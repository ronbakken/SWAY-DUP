/*
INF Marketplace
Copyright (C) 2018  INF Marketplace LLC
Author: Jan Boon <kaetemi@no-break.space>
*/

syntax = "proto3";

package inf;
option csharp_namespace = "InfX";

enum OAuthMechanism {
  OAM_NONE = 0;
  /// OAuth1, Twitter-like
  OAM_OAUTH1 = 1;
  /// OAuth2, Spotify-like
  OAM_OAUTH2 = 2;
  
}

// Only use server-side for hardcoding!
enum OAuthProviderIds {
  OAP_NONE = 0;
  OAP_TWITTER = 1;
  OAP_FACEBOOK = 2;
  
}

enum AccountType {
  AT_UNKNOWN = 0;
  AT_INFLUENCER = 1;
  AT_BUSINESS = 2;
  AT_SUPPORT = 3;
  
}

/// Global account state. Higher value means more access. 
/// Should always check using a >= compare, except for GAS_INITIALIZE case
enum GlobalAccountState {
  GAS_INITIALIZE = 0;
  GAS_BLOCKED = 1;
  GAS_READ_ONLY = 2;
  GAS_READ_WRITE = 3;
  GAS_DEBUG = 4;
  GAS_SUPPORT = 5;
  GAS_MANAGER = 6;
  GAS_GOD = 7;
  
}

/// Global account state reason. These are for user message only. Not functional.
enum GlobalAccountStateReason {
  GASR_NEW_ACCOUNT = 0; // User is a new account
  GASR_ACCOUNT_BANNED = 1; // User is disallowed from the service
  GASR_CREATE_DENIED = 2; // User account creation request was denied. Contact support
  GASR_APPROVED = 3; // User account was approved
  GASR_DEMO_APPROVED = 4; // User account was automatically approved for demonstration purpose
  GASR_PENDING = 5; // User account approval is pending
  GASR_REQUIRE_INFO = 6; // More information is required from the user to approve their account
  
}

/// NotificationFlags are set at login and may be sent through GCM as well
enum NotificationFlags {
  /// Set whenever GAS changed (wipe after dismissed)
  NF_ACCOUNT_STATE = 0;
  /// Set for new users to learn, pops help message to FAB (wipe on dismissed)
  NF_MAKE_AN_OFFER_FAB = 1;
  /// There are new unread messages from other users (wipe when opening message tab)
  NF_UNREAD_MESSAGES = 2;
  /// Customer support requesting attention (may interpret as duplicate of  NF_ACCOUNT_STATUS if GASR_REQUIRE_INFO)
  NF_CS_REQUEST = 3;
  
}

enum BusinessOfferState {
  BOS_DRAFT = 0;
  BOS_OPEN = 1; // Open and awaiting new applicants
  BOS_ACTIVE = 2; // Active but no longer accepting applicants // (Will be renamed to CLOSED)
  BOS_CLOSED = 3; // (Will be renamed to ARCHIVED)
  
}

enum BusinessOfferStateReason {
  BOSR_NEW_OFFER = 0;
  BOSR_USER_CLOSED = 1; // You have closed this offer.
  BOSR_TOS_VIOLATION = 2; // This offer violates the Terms of Service
  BOSR_COMPLETED = 3; // This offer has been completed by all applicants
  
}

enum ApplicantChatType {
  ACT_PLAIN = 0;
  ACT_HAGGLE = 1; // url-encoded haggle message (deliverable=...&reward=...&remarks=...)
  ACT_IMAGE_KEY = 2;
  ACT_MARKER = 3; // system marker (id=...)
  
}

enum ApplicantState {
  AS_HAGGLING = 0;
  
  AS_DEAL = 1;
  AS_REJECTED = 2;
  
  AS_COMPLETE = 3;
  AS_DISPUTE = 4;
  AS_RESOLVED = 5;
  
}

enum ApplicantChatMarker {
  ACM_APPLIED = 0; // ${User} has applied for ${offer}.
  ACM_WANT_DEAL = 1; // ${User} wants to make a deal.
  ACM_DEAL_MADE = 2; // A deal has been made. Congratulations!
  ACM_REJECTED = 3; // ${User} has rejected the application.
  ACM_MARKED_COMPLETE = 4; // ${User} has marked the deal as complete.
  ACM_COMPLETE = 5; // The offer has been completed. Well done!
  ACM_MARKED_DISPUTE = 6; // (Disputes are silent, although can be seen :))
  ACM_RESOLVED = 7; // The dispute has been resolved through customer support. Case closed.
  ACM_MESSAGE_DROPPED = 8; // Empty message to drop an invalid message. Not stored in database.
  
}

/* end of file */
