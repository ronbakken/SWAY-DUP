/*
INF Marketplace
Copyright (C) 2018  INF Marketplace LLC
Author: Jan Boon <kaetemi@no-break.space>
*/

/*

Planned changes:
- Support both geohash and s2 in location info for evaluation
- Aggregate image urls into a generic structure (blurred data or url and full image url)
- Specialized fields for non-text chat messages (storing protobuf blob in database)
- Separate offer terms into 'terms' structure for re use in proposal transactions
- Brand accounts can be created as shared accounts without authentication mechanism (cf Facebook Pages, YouTube Channels, etc)

*/

syntax = "proto3";

package inf_common;
option csharp_namespace = "InfCommon";

import 'enum_protobuf.proto';

// This message MUST NOT contain 'repeated' due to usage of 'mergeFromMessage'
message DataSocialMedia {
  /// Social media is connected to the account
  bool connected = 1;
  /// Token for connection is expired, data outdated and user must re-connect 
  /// by OAuth (happens if the user revokes the token from the social provider)
  bool expired = 15;
  
  /// TODO: Information from this social media connection may be published to other users (user setting)
  // bool published = 17;
  /// TODO: Allow logging in with this account (user setting)
  // bool allow_log_in = 18;
  /// TODO: Possible to log in or sign up with the connected account (user setting)
  // bool can_authenticate = 19;
  
  /// This connection can be used to sign up (the account is not signed up yet)
  bool can_sign_up = 20;
  
  /* Names. Use whichever one is not empty. Prefer displayName. */
  /// Screen name, eg. Twitter account name
  string screen_name = 4;
  /// Display name, eg. Facebook full name
  string display_name = 5;
  
  /* Further info. May have null values. Most data isn't always shared. */
  /// Url to the actual social media profile
  string avatar_url = 14;
  string blurredAvatar_url = 16;
  string profile_url = 13;
  string description = 6;
  string location = 7;
  string url = 8;
  string email = 12;
  
  /* Use the largest of either friendsCount or followersCount for boasting. */
  int32 friends_count = 9;
  int32 followers_count = 2;
  int32 following_count = 3;
  
  int32 posts_count = 10;
  
  bool verified = 11;
  
}

message DataOAuthCredentials {
  /* Server info, never shared with client */
  /// User id
  string user_id = 4;
  /// Token for OAuth1 and OAuth2
  string token = 1;
  /// Secret token for OAuth1. May be empty string for OAuth2
  string token_secret = 2;
  /// Expiration timestamp in seconds. No expiration if 0
  int32 token_expires = 3;
  
}

message DataOffer {
  int64 offerId = 1;
  int64 accountId = 2;
  int64 locationId = 3;
  
  string title = 4;
  string description = 5;
  string thumbnailUrl = 6;
  string blurredThumbnailUrl = 24;
  
  string deliverables = 7;
  string reward = 8;
  
  // Embedded business location info
  string locationName = 21; // Business or location name depending
  string location = 9;
  double latitude = 18;
  double longitude = 19;
  int32 locationOfferCount = 20; // Number of offers at the same location
  
  // Detail info
  repeated string coverUrls = 10;
  repeated string blurredCoverUrls = 25;
  bytes categories = 23;
  
  // State
  OfferState state = 12;
  OfferStateReason stateReason = 13;
  bool archived = 26;
  
  // Info for business
  // int32 proposalsNew = 14;
  // int32 proposalsAccepted = 15;
  // int32 proposalsCompleted = 16;
  // int32 proposalsRefused = 17;
  
  // Info for influencer
  int64 influencerProposalId = 22; // So the Offer View knows this offer has already been applied to
  
}

message DataLocation {
  int64 locationId = 1;
  
  // User-provided name of the location (eg. "Waterproof Vests LA")
  string name = 2;
  
  // Location details. Influencer displays `approximate`, business `detail`
  string approximate = 7;
  string detail = 8;
  string postcode = 9;
  string regionCode = 10;
  string countryCode = 11;
  
  // Actual location
  double latitude = 4;
  double longitude = 5;
  
  // Location in indexed formats
  int64 s2cellId = 12;
  int64 geohashInt = 14;
  string geoHash = 15;
  
}

message DataAccountState {
  // Session ID. If 0, authentication failed, and the client must create a new account
  int64 sessionId = 1;
  
  // Account ID. If 0, proceed with account creation
  int64 accountId = 2;
  
  // Account type. If not AT_UNKNOWN, account creation may bypass type selection
  AccountType accountType = 3;
  
  GlobalAccountState globalAccountState = 4;
  GlobalAccountStateReason globalAccountStateReason = 5;
  
  AccountLevel accountLevel = 8;
  NotificationFlags notificationFlags = 6;
  
  string firebaseToken = 7;
  
}

message DataAccountSummary {
  string name = 1;
  string description = 2;
  string location = 3;
  string avatarThumbnailUrl = 4;
  string blurredAvatarThumbnailUrl = 5;
  
}

message DataAccountDetail {
  repeated int32 categories = 13;
  repeated DataSocialMedia socialMedia = 3;
  
  string avatarCoverUrl = 7; // Higher resolution, but same as avatarThumbnailUrl
  string blurredAvatarCoverUrl = 12;
  
  string website = 6;
  string email = 9;
  // bool emailVerified = 10;
  
  // Embedded primary location info, if applicable
  string locationName = 14;
  string location = 15;
  double latitude = 4;
  double longitude = 5;
  int64 locationId = 8; // Primary location id
  
}

message DataAccount {
  DataAccountState state = 1;
  DataAccountSummary summary = 2;
  DataAccountDetail detail = 3;
  
}

message DataProposal {
  int64 proposalId = 1;
  int64 offerId = 2;
  int64 influencerAccountId = 3; // Account which applied
  int64 businessAccountId = 16;
  int64 senderAccountId = 20; // Either influencer or business sent this
  
  /// Embedded data
  string influencerName = 17;
  string businessName = 18;
  string offerTitle = 19;
  
  /// Last chat
  int64 lastChatId = 22;
  
  /// Last seen
  int64 influencerSeenChatId = 23;
  int64 influencerSeenTime = 24;
  int64 businessSeenChatId = 25;
  int64 businessSeenTime = 26;
  
  /// Current chat ID with haggle buttons (deliverables / reward / remarks)
  int64 termsChatId = 4;
  bool influencerWantsDeal = 6;
  bool businessWantsDeal = 5;
  
  bool influencerMarkedDelivered = 7;
  bool influencerMarkedRewarded = 8;
  bool businessMarkedDelivered = 9;
  bool businessMarkedRewarded = 10;
  
  int32 influencerGaveRating = 12;
  int32 businessGaveRating = 11; // 1 to 5, 0 is no rating given (rating given implies complete)
  
  bool influencerDisputed = 15;
  bool businessDisputed = 14;
  
  ProposalState state = 13;
  bool archived = 21;
  
}

message DataProposalChat {
  int64 chatId = 7; // Sequential identifier in the chat stream
  int64 sent = 10; // Sent timestamp
  int64 senderId = 2; // Account which sent
  int64 proposalId = 1; // One chat per proposal
  
  int64 sessionId = 11; // Cleared upon forwarding
  int32 sessionGhostId = 6; // Deduplication client-side (ghost entry)
  
  ProposalChatType type = 8;
  string text = 5; // The written text
  // int64 seen = 9; // 0 if not seen
  
}

/* end of file */
