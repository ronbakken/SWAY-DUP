
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";

package inf;
option csharp_namespace = "InfX";

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

message ConfigSubCategories {
  repeated string labels = 1;
}

message ConfigCategories {
  repeated ConfigSubCategories sub = 1;
}

enum OAuthMechanism {
  OAM_NONE = 0;
  /// OAuth1, Twitter-like
  OAM_OAUTH1 = 1;
  /// OAuth2, Spotify-like
  OAM_OAUTH2 = 2;
}

// Only use server-side for hardcoding!
enum OAuthProviderIds {
  OAP_NONE = 0;
  OAP_TWITTER = 1;
  OAP_FACEBOOK = 2;
}

message ConfigOAuthProvider {
  /// Whether the OAuth provider is visible in the UI
  bool visible = 1;
  
  /// Whether the OAuth provider can be used to authenticate
  bool enabled = 2;
  
  /// Visual name
  string label = 3;
  int32 fontAwesomeBrand = 14;
  
  /// OAuth mechanism
  OAuthMechanism mechanism = 15;
  
  /// API endpoints of the OAuth provider
  string host = 4;
  
  /// Url that will be used to detect login success by the app
  string callbackUrl = 9;
  
  /// API endpoints for Twitter-like OAuth
  string requestTokenUrl = 5; // If request token is not set, the alternate mechanism is used
  string authenticateUrl = 6;
  string accessTokenUrl = 16;
  
  /// Generated by the OAuth provider, Twitter-like
  string consumerKey = 10;
  string consumerSecret = 11;
  
  /// API endpoints for Spotify-like OAuth
  string authUrl = 7;
  string authQuery = 8;
  
  /// From OAuth provider, Spotify-like
  string clientId = 12;
  string clientSecret = 17;
  
  /// Whitelisted hosts during authentication
  repeated string whitelistHosts = 18;
  
}

message ConfigOAuthProviders {
  /// List of all OAuthProviders
  repeated ConfigOAuthProvider all = 1;
  
}

message ConfigServices {
  // INF
  repeated string apiHosts = 8;
  string configUrl = 9;
  string termsOfServiceUrl = 10;
  string privacyPolicyUrl = 11;
  
  // MapBox
  string mapboxApi = 1;
  string mapboxUrlTemplate = 2;
  string mapboxToken = 3;
  
  // DigitalOcean Spaces
  string spacesRegion = 4;
  string spacesKey = 5;
  string spacesSecret = 6;
  string spacesBucket = 7;
  
  // Cloudinary (Url Templates)
  string cloudinaryUrl = 19;
  string cloudinaryThumbnailUrl = 20;
  string cloudinaryCoverUrl = 21;
  
  // IPStack (FreeGeoIP)
  string ipstackApi = 13;
  string ipstackKey = 12;
  
  // MariaDB (MySQL)
  string mariadbHost = 14;
  int32 mariadbPort = 15;
  string mariadbUser = 16;
  string mariadbPassword = 17;
  string mariadbDatabase = 18;
  
  // Freshdesk (Support)
  string freshdeskApi = 22;
  string freshdeskKey = 23;
  
}

message ConfigData {
  /// If this goes up in a config, the client must be updated
  int32 clientVersion = 1;
  
  /// Timestamp when the config was built. Unix epoch UTC milliseconds
  int64 timestamp = 5;
  
  /// Configuration data
  ConfigCategories categories = 2;
  ConfigOAuthProviders oauthProviders = 3;
  ConfigServices services = 6;
  
}

// end of config file format messages.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

message CategoryId {
  int32 main = 1;
  int32 sub = 2;
}

/*
message CategoryIdSet {
  repeated CategoryId ids = 1;
}
*/

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

enum AccountType {
  AT_UNKNOWN = 0;
  AT_INFLUENCER = 1;
  AT_BUSINESS = 2;
  AT_SUPPORT = 3;
  
}

/// Global account state. Higher value means more access. 
/// Should always check using a >= compare, except for GAS_INITIALIZE case
enum GlobalAccountState {
  GAS_INITIALIZE = 0;
  GAS_BLOCKED = 1;
  GAS_READ_ONLY = 2;
  GAS_READ_WRITE = 3;
  GAS_DEBUG = 4;
  GAS_SUPPORT = 5;
  GAS_MANAGER = 6;
  GAS_GOD = 7;
  
}

/// Global account state reason. These are for user message only. Not functional.
enum GlobalAccountStateReason {
  GASR_NEW_ACCOUNT = 0; // User is a new account
  GASR_ACCOUNT_BANNED = 1; // User is disallowed from the service
  GASR_CREATE_DENIED = 2; // User account creation request was denied. Contact support
  GASR_APPROVED = 3; // User account was approved
  GASR_DEMO_APPROVED = 4; // User account was automatically approved for demonstration purpose
  GASR_PENDING = 5; // User account approval is pending
  GASR_REQUIRE_INFO = 6; // More information is required from the user to approve their account
  
}

/// NotificationFlags are set at login and may be sent through GCM as well
enum NotificationFlags {
  /// Set whenever GAS changed (wipe after dismissed)
  NF_ACCOUNT_STATE = 0;
  /// Set for new users to learn, pops help message to FAB (wipe on dismissed)
  NF_MAKE_AN_OFFER_FAB = 1;
  /// There are new unread messages from other users (wipe when opening message tab)
  NF_UNREAD_MESSAGES = 2;
  /// Customer support requesting attention (may interpret as duplicate of  NF_ACCOUNT_STATUS if GASR_REQUIRE_INFO)
  NF_CS_REQUEST = 3;
  
}

enum BusinessOfferState {
  BOS_DRAFT = 0;
  BOS_OPEN = 1; // Open and awaiting new applicants
  BOS_ACTIVE = 2; // Active but no longer accepting applicants
  BOS_CLOSED = 3;
  
}

enum BusinessOfferStateReason {
  BOSR_NEW_OFFER = 0;
  BOSR_USER_CLOSED = 1; // You have closed this offer.
  BOSR_TOS_VIOLATION = 2; // This offer violates the Terms of Service
  BOSR_COMPLETED = 3; // This offer has been completed by all applicants
  
}

enum ApplicantChatType {
  ACT_PLAIN = 0;
  ACT_HAGGLE = 1; // url-encoded haggle message (deliverable=...&reward=...&remarks=...)
  ACT_IMAGE_KEY = 2;
  ACT_MARKER = 3; // system marker (id=...)
  
}

enum ApplicantState {
  AS_HAGGLING = 0;
  
  AS_DEAL = 1;
  AS_REJECTED = 2;
  
  AS_COMPLETE = 3;
  AS_DISPUTE = 4;
  AS_RESOLVED = 5;
  
}

enum ApplicantChatMarker {
  ACM_APPLIED = 0; // ${User} has applied for ${offer}.
  ACM_WANT_DEAL = 1; // ${User} wants to make a deal.
  ACM_DEAL_MADE = 2; // A deal has been made. Congratulations!
  ACM_REJECTED = 3; // ${User} has rejected the application.
  ACM_MARKED_COMPLETE = 4; // ${User} has marked the deal as complete.
  ACM_COMPLETE = 5; // The offer has been completed. Well done!
  ACM_MARKED_DISPUTE = 6; // (Disputes are silent, although can be seen :))
  ACM_RESOLVED = 7; // The dispute has been resolved through customer support. Case closed.
  
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// This message may not contain 'repeated' due to usage of 'mergeFromMessage'
message DataSocialMedia {
  /// Social media is connected to the account
  bool connected = 1;
  /// Token for connection is expired, data outdated and user must re-connect by OAuth
  bool expired = 15;
  
  /* Names. Use whichever one is not empty. Prefer displayName. */
  /// Screen name, eg. Twitter account name
  string screenName = 4;
  /// Display name, eg. Facebook full name
  string displayName = 5;
  
  /* Further info. May have null values. Most data isn't always shared. */
  /// Url to the actual social media profile
  string avatarUrl = 14;
  string profileUrl = 13;
  string description = 6;
  string location = 7;
  string url = 8;
  string email = 12;
  
  /* Use the largest of either friendsCount or followersCount for boasting. */
  int32 friendsCount = 9;
  int32 followersCount = 2;
  int32 followingCount = 3;
  
  int32 postsCount = 10;
  
  bool verified = 11;
  
}

message DataOAuthCredentials {
  /* Server info, never shared with client */
  /// User id
  string userId = 4;
  /// Token for OAuth1 and OAuth2
  string token = 1;
  /// Secret token for OAuth1. May be empty string for OAuth2
  string tokenSecret = 2;
  /// Expiration timestamp in seconds. No expiration if 0
  int32 tokenExpires = 3;
  
}

message DataBusinessOffer {
  int32 offerId = 1;
  int32 accountId = 2;
  int32 locationId = 3;
  
  string title = 4;
  string description = 5;
  string thumbnailUrl = 6;
  
  string deliverables = 7;
  string reward = 8;
  
  // Embedded business location info
  string locationName = 21; // Business or location name depending
  string location = 9;
  double latitude = 18;
  double longitude = 19;
  int32 locationOfferCount = 20; // Number of offers at the same location
  
  repeated string coverUrls = 10;
  repeated CategoryId categories = 11;
  
  BusinessOfferState state = 12;
  BusinessOfferStateReason stateReason = 13;
  int32 applicantsNew = 14;
  int32 applicantsAccepted = 15;
  int32 applicantsCompleted = 16;
  int32 applicantsRefused = 17;
  
}

message DataLocation {
  int32 locationId = 1;
  
  string name = 2;
  string avatarUrl = 6;
  
  string approximate = 7;
  string detail = 8;
  string postcode = 9;
  string regionCode = 10;
  string countryCode = 11;
  
  double latitude = 4;
  double longitude = 5;
  int64 s2cellId = 12;
  
}

message DataAccountState {
  // Device ID. If 0, authentication failed, and the client must create a new account
  int32 deviceId = 1;
  
  // Account ID. If 0, proceed with account creation
  int32 accountId = 2;
  
  // Account type. If not AT_UNKNOWN, account creation may bypass type selection
  AccountType accountType = 3;
  
  GlobalAccountState globalAccountState = 4; // TODO: Rename to globalState
  GlobalAccountStateReason globalAccountStateReason = 5; // TODO: Rename to globalStateReason
  
  NotificationFlags notificationFlags = 6;
  
}

message DataAccountSummary {
  string name = 1;
  string description = 2;
  string location = 3;
  string avatarThumbnailUrl = 4;
  
}

message DataAccountDetail {
  // repeated string coverUrls = 1;
  repeated CategoryId categories = 2;
  repeated DataSocialMedia socialMedia = 3;
  string avatarCoverUrl = 7; // Higher resolution, but same as avatarThumbnailUrl
  string url = 6;
  string email = 9;
  // bool emailVerified = 10;
  double latitude = 4; // necessary?
  double longitude = 5; // necessary?
  int32 locationId = 8;
  
}

message DataAccount {
  DataAccountState state = 1;
  DataAccountSummary summary = 2;
  DataAccountDetail detail = 3;
  
}

message DataApplicant {
  int32 applicantId = 1;
  int32 offerId = 2;
  int32 influencerAccountId = 3; // Account which applied
  int32 businessAccountId = 16;
  // datetime schedule etc
  
  /// Current chat ID with haggle buttons (deliverables / reward / remarks)
  int64 haggleChatId = 4;
  bool influencerWantsDeal = 6;
  bool businessWantsDeal = 5;
  
  bool influencerMarkedDelivered = 7;
  bool influencerMarkedRewarded = 8;
  bool businessMarkedDelivered = 9;
  bool businessMarkedRewarded = 10;
  
  int32 influencerGaveRating = 12;
  int32 businessGaveRating = 11; // 1 to 5, 0 is no rating given (rating given implies complete)
  
  bool influencerDisputed = 15;
  bool businessDisputed = 14;
  
  ApplicantState state = 13;
  
}

message DataApplicantChat {
  int64 chatId = 7; // Sequential identifier in the chat stream
  int64 sent = 10; // Sent timestamp
  int32 senderId = 2; // Account which sent
  int32 applicantId = 1; // One chat per applicant
  
  int32 deviceId = 11; // Cleared upon forwarding
  int32 deviceGhostId = 6; // Deduplication client-side (ghost entry)
  
  ApplicantChatType type = 8;
  string text = 5; // The written text
  int64 seen = 9; // 0 if not seen
  
}

/*
message DataSocialState {
  repeated NetSocialMedia media = 1;
  
}*/

// end of generalized data format messages.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Protobuf types list:
// https://developers.google.com/protocol-buffers/docs/proto?csw=1#scalar

// Sends some info from https://pub.dartlang.org/packages/device_info#-readme-tab-
// Name: DA_CREAT
// Response: NetDeviceAuthState
message NetDeviceAuthCreateReq {
  // Public key for future authentication (AES-256)
  bytes aesKey = 1;
  
  // Common identifier for the device in case of multiple accounts
  bytes commonDeviceId = 4;
  
  // Device information for developers
  string name = 2;
  string info = 3;
  
}

// Device requires an authentication challenge
// Name: DA_CHALL
// Response: NetDevAuthChallengeResReq
message NetDeviceAuthChallengeReq {
  // Id of the device that wants to authenticate
  int32 deviceId = 1;
  
}

// Server supplies challenge for the device
// Name: DA_R_CHA
// Response: NetDeviceAuthSignatureResReq
message NetDeviceAuthChallengeResReq {
  bytes challenge = 1;
  
}

// App completes the challenge
// Name: DA_R_SIG
// Response: NetDeviceAuthState
message NetDeviceAuthSignatureResReq {
  bytes signature = 1;
  
}

// Create or auth result
// Name: DA_STATE
message NetDeviceAuthState {
  /// Whole account data
  DataAccount data = 8;
  
}

// App requests the server to set the account type
// Special case when going backwards in the onboarding process
// Valid when account_id == 0
// Removes all OAuth associated with the device
// Name: A_SETTYP
message NetSetAccountType {
  AccountType accountType = 1;
  
}

// App requests OAuth url
// Name: OA_URLRE
// Response: NetOAuthUrlRes
message NetOAuthUrlReq {
  int32 oauthProvider = 1;
  
}

// App requests OAuth url
// Name: OA_R_URL
// Response: NetOAuthUrlRes
message NetOAuthUrlRes {
  string authUrl = 1;
  string callbackUrl = 2;
  
}

// App adds another OAuth provider to the account
// Name: OA_CONNE
// Response: NetOAuthConnectRes
message NetOAuthConnectReq {
  int32 oauthProvider = 1;
  string callbackQuery = 2;
  
}

// OAuth addition result
// Name: OA_R_CON
message NetOAuthConnectRes {
  DataSocialMedia socialMedia = 1;
  
}

// Create account
// Response: NetDeviceAuthState
// Name: A_CREATE
message NetAccountCreateReq {
  double latitude = 2;
  double longitude = 3;
  
}

// end of messages related to authentication.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Client requests the server permission to upload an image
// The server may delete the image later if it is never used
// Name: UP_IMAGE
// Response: NetResImageUpload
message NetUploadImageReq {
  // File information
  string fileName = 1;
  
  int32 contentLength = 2;
  string contentType = 4;
  
  // Hashed file contents
  bytes contentSha256 = 3;
  
}

// Request parameters to be used by the client verbatim for uploading
// Name: UP_R_IMG
message NetUploadImageRes {
  // Request options
  string requestMethod = 1;
  string requestUrl = 2;
  
  // Result options
  bool fileExists = 9; // If true, no need to upload
  string uploadKey = 10;
  string coverUrl = 11;
  string thumbnailUrl = 12;
  
}

// end of messages related to image uploading.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Id: S_PROFIL
message NetSetProfile {
  // Basics
  string name = 1;
  string description = 2;
  string avatarKey = 4;
  
  string url = 6;
  
  repeated CategoryId categories = 12;
  
  double latitude = 14;
  double longitude = 15;
  
}

// end of messages related to profile editing.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Message to create offer
// Id: C_OFFERR
// Response C_R_OFFE (DataBusinessOffer)
message NetCreateOfferReq {
  // Basics
  string title = 1;
  repeated string imageKeys = 2;
  string description = 3;
  string deliverables = 4;
  string reward = 5;
  
  int32 locationId = 6; // 0 being the user's default location -- dropdown selection from user locations if supported
  
}

// Message to load or refresh offer list
// Server will send a stream of DataBusinessOffer messages (Id: DB_OFFER)
// Id: L_OFFERS
// Response: NetLoadOffersRes (Id: L_R_OFFE)
message NetLoadOffersReq {
  // Offers with id lower than this (older offers) (ignore if 0)
  int32 before = 1;
  
  // Offers with id higher than this (newer offers) (ignore if 0)
  int32 after = 2;
  
  // Limit (ignore if 0)
  int32 limit = 3;
  
}

// Response which is sent when all DB_OFFER messages have been sent
// Used by the client to signal to the user that refresh is complete, if refresh was done manually (and to avoid multiple simultaneous loads)
// Id: L_R_OFFE
message NetLoadOffersRes {
  // Oldest offer which was sent
  int32 oldest = 1;
  
  // Newest offer which was sent
  int32 newest = 2;
  
}

// Update offer information, assume the recipient owns this offer (client should check accountId though, in case protocol changes)
// Id: DB_OFFER
// message DataBusinessOffer

// end of messages related to offers.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Server notifies client of new DataApplicant (An influencer has applied for your offer!) (Live New) (should also have firebase variants)
// Id: LN_APPLI
// Data: DataApplicant

// Server notifies client of new DataApplicantChat (should also have firebase variants)
// Id: LN_A_CHA
// Data: DataApplicantChat

// Server updates DataApplicant (Live Update)
// Id: LU_APPLI
// Data: DataApplicant

// Server updates DataApplicantChat (loading)
// Id: LU_A_CHA
// Data: DataApplicantChat

// Apply for offer
// Id: O_APPLYY
// Response: DataApplicant (Id: O_R_APPL) (or exception in case of failure)
message NetOfferApplyReq {
  int32 offerId = 1;
  int32 deviceGhostId = 8;
  
  string remarks = 2;
  
}

// Send chat plain
// Id: CH_PLAIN
message NetChatPlain {
  int32 applicantId = 1;
  int32 deviceGhostId = 8;
  string text = 6;
  
}

// Send chat haggle (refuse if already accepted by both)
// Id: CH_HAGGL
message NetChatHaggle {
  int32 applicantId = 1;
  int32 deviceGhostId = 8;
  string deliverables = 3;
  string reward = 4;
  string remarks = 2;
  
}

// Send chat image key
// Id: CH_IMAGE
message NetChatImageKey {
  int32 applicantId = 1;
  int32 deviceGhostId = 8;
  string imageKey = 5;
  
}

// Mark as completed OR Report a problem
// Id: AP_COMPL
// Response: DataApplicant (Id: AP_R_COM)
message NetApplicantCompletionReq {
  int32 applicantId = 1;
  
  bool delivered = 2;  // Markings can only be changed under DEAL and DISPUTE stage, ignored otherwise
  bool rewarded = 3;
  
  int32 rating = 4; // Ignored in case of problem report. If both users rate, then offer moves to COMPLETE, even if in DISPUTE
  
  bool dispute = 5;
  string disputeDescription = 6; // Problem description for support. Sent by mail (sql transaction... :))
  
}

// Message to load or refresh applicant list
// Server will send a stream of DataApplicant messages (Id: LU_APPLI)
// Id: L_APPLIC
// Response: NetLoadApplicantsRes (Id: L_R_APPL)
message NetLoadApplicantsReq {
  // Offer for which to send applicants (ignored when requested by influencer)
  int32 offerId = 4;
  
  // Applicants with id lower than this (older applicants) (ignore if 0)
  int32 before = 1;
  
  // Applicants with id higher than this (newer applicants) (ignore if 0)
  int32 after = 2;
  
  // Limit (ignore if 0)
  int32 limit = 3;
  
}

// Response which is sent when all LU_APPLI messages have been sent
// Used by the client to signal to the user that refresh is complete, if refresh was done manually (and to avoid multiple simultaneous loads)
// Id: L_R_APPL
message NetLoadApplicantsRes {
  // Oldest applicant which was sent
  int32 oldest = 1;
  
  // Newest applicant which was sent
  int32 newest = 2;
  
}

// Message to load or refresh applicant chat list
// Server will send a stream of DataApplicantChat messages (Id: LU_A_CHA)
// Id: L_APCHAT
// Response: NetLoadApplicantsRes (Id: L_R_APCH)
message NetLoadApplicantChatsReq {
  // Applicant for which to send chats
  int32 applicantId = 5;
  
  // Applicant chats with id lower than this (older applicant chats) (ignore if 0)
  int32 before = 1;
  
  // Applicant chats with id higher than this (newer applicant chats) (ignore if 0)
  int32 after = 2;
  
  // Limit (ignore if 0)
  int32 limit = 3;
  
}

// Response which is sent when all LU_APPLI messages have been sent
// Used by the client to signal to the user that refresh is complete, if refresh was done manually (and to avoid multiple simultaneous loads)
// Id: L_R_APCH
message NetLoadApplicantChatsRes {
  // Oldest applicant chat which was sent
  int32 oldest = 1;
  
  // Newest applicant chat which was sent
  int32 newest = 2;
  
}

// end of messages related to applicants.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Edit Profile

// Load Public Profile
// Id: L_PROFIL
// Response: DataAccount (Id: L_R_PROF)
message NetLoadPublicProfileReq {
  int32 accountId = 1;
  
}

// end of messages related to profiles.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

/* end of file */
