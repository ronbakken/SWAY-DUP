
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";

option csharp_namespace = "InfX";

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

message ConfigSubCategories {
  repeated string labels = 1;
}

message ConfigCategories {
  repeated ConfigSubCategories sub = 1;
}

enum OAuthMechanism {
  OAM_NONE = 0;
  /// OAuth1, Twitter-like
  OAM_OAUTH1 = 1;
  /// OAuth2, Spotify-like
  OAM_OAUTH2 = 2;
}

message ConfigOAuthProvider {
  /// Whether the OAuth provider is visible in the UI
  bool visible = 1;
  
  /// Whether the OAuth provider can be used to authenticate
  bool enabled = 2;
  
  /// Visual name
  string label = 3;
  int32 fontAwesomeBrand = 14;
  
  /// OAuth mechanism
  OAuthMechanism mechanism = 15;
  
  /// API endpoints of the OAuth provider
  string host = 4;
  
  /// Url that will be used to detect login success by the app
  string callbackUrl = 9;
  
  /// API endpoints for Twitter-like OAuth
  string requestTokenUrl = 5; // If request token is not set, the alternate mechanism is used
  string authenticateUrl = 6;
  string accessTokenUrl = 16;
  
  /// Generated by the OAuth provider, Twitter-like
  string consumerKey = 10;
  string consumerSecret = 11;
  
  /// API endpoints for Spotify-like OAuth
  string authUrl = 7;
  string authQuery = 8;
  
  /// From OAuth provider, Spotify-like
  string clientId = 12;
  string clientSecret = 17;
}

message ConfigOAuthProviders {
  /// List of all OAuthProviders
  repeated ConfigOAuthProvider all = 1;
  
}

message ConfigData {
  /// If this goes up in a config, the client must be updated
  int32 clientVersion = 1;
  
  /// Timestamp when the config was built. Unix epoch UTC milliseconds
  int64 timestamp = 5;
  
  /// URLs where the config can be downloaded
  repeated string downloadUrls = 4;
  
  /// Configuration data
  ConfigCategories categories = 2;
  ConfigOAuthProviders oauthProviders = 3;
  
}

// end of config file format messages.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

message CategoryId {
  int32 main = 1;
  int32 sub = 2;
}

/*
message CategoryIdSet {
  repeated CategoryId ids = 1;
}
*/

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

enum AccountType {
  AT_UNKNOWN = 0;
  AT_INFLUENCER = 1;
  AT_BUSINESS = 2;
  
}

/// Global account state. Higher value means more access. 
/// Should always check using a >= compare, except for GAS_INITIALIZE case
enum GlobalAccountState {
  GAS_INITIALIZE = 0;
  GAS_BLOCKED = 1;
  GAS_READ_ONLY = 2;
  GAS_READ_WRITE = 3;
  GAS_MODERATOR = 4;
  GAS_ADMIN = 5;
  GAS_GOD = 6;
  
}

/// Global account state reason. These are for user message only. Not functional.
enum GlobalAccountStateReason {
  GASR_NEW_ACCOUNT = 0; // User is a new account
  GASR_ACCOUNT_BANNED = 1; // User is disallowed from the service
  GASR_CREATE_DENIED = 2; // User account creation request was denied. Contact support
  GASR_APPROVED = 3; // User account was approved
  GASR_DEMO_APPROVED = 4; // User account was automatically approved for demonstration purpose
  GASR_PENDING = 5; // User account approval is pending
  GASR_REQUIRE_INFO = 6; // More information is required from the user to approve their account
  
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

message DataInfluencer {
  int64 id = 1;
  string name = 2;
  string location = 3;
  string avatarUrl = 4;
  repeated CategoryId categories = 5;
  double lat = 6;
  double lng = 7;
  
}

message DataBusiness {
  int64 id = 1;
  string name = 2;
  string location = 3;
  string avatarUrl = 4;
  repeated CategoryId categories = 5;
  double lat = 6;
  double lng = 7;
  
}

message DataOffer {
  int64 id = 1;
  DataBusiness business = 2;
  string title = 3;
  repeated string imageUrls = 4;
  repeated CategoryId categories = 5;
  double lat = 6;
  double lng = 7;
  string description = 8;
  string deliverables = 9;
  string reward = 10;
  
}

message DataApplicant {
  int64 id = 1;
  DataOffer offer = 2;
  DataInfluencer influencer = 3;
  // bool influencer accepted/delivered/...
  // bool business accepted/received service/...
  // datetime schedule etc
  
}

message DataChat {
  int64 applicantId = 1; // One chat per applicant
  int64 sequenceId = 2; // Sequential identifier in the chat stream
  int64 keyId = 3; // Deduplication client-side (ghost entry)
  bool outgoing = 4; // Outgoing or incoming message
  string text = 5; // The written text
  
}

message DataAccountState {
  // Device ID. If 0, authentication failed, and the client must create a new account
  int32 deviceId = 1;
  
  // Account ID. If 0, proceed with account creation
  int32 accountId = 2;
  
  // Account type. If not AT_UNKNOWN, account creation may bypass type selection
  AccountType accountType = 3;
  
  GlobalAccountState globalAccountState = 4;
  GlobalAccountStateReason globalAccountStateReason = 5;
  
}

message DataSocialMedia {
  bool connected = 1;
  int32 followers = 2;
  int32 following = 3;
  string screenName = 4;
  string displayName = 5;
  
}

/*
message DataSocialState {
  repeated NetSocialMedia media = 1;
  
}*/

// end of generalized data format messages.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Protobuf types list:
// https://developers.google.com/protocol-buffers/docs/proto?csw=1#scalar

// Sends some info from https://pub.dartlang.org/packages/device_info#-readme-tab-
// Name: DA_CREAT
// Response: NetDeviceAuthState
message NetDeviceAuthCreateReq {
  // Public key for future authentication (AES-256)
  bytes aesKey = 1;
  
  // Device information for developers
  string name = 2;
  string info = 3;
  
}

// Device requires an authentication challenge
// Name: DA_CHALL
// Response: NetDevAuthChallengeResReq
message NetDeviceAuthChallengeReq {
  // Id of the device that wants to authenticate
  int32 deviceId = 1;
  
}

// Server supplies challenge for the device
// Name: DA_R_CHA
// Response: NetDeviceAuthSignatureResReq
message NetDeviceAuthChallengeResReq {
  bytes challenge = 1;
  
}

// App completes the challenge
// Name: DA_R_SIG
// Response: NetDeviceAuthState
message NetDeviceAuthSignatureResReq {
  bytes signature = 1;
  
}

// Create or auth result
// Name: DA_STATE
message NetDeviceAuthState {
  DataAccountState accountState = 7;
  
  // Social media state
  repeated DataSocialMedia socialMedia = 6;
  
}

// App requests the server to set the account type
// Special case when going backwards in the onboarding process
// Valid when account_id == 0
// Removes all OAuth associated with the device
// Name: A_SETTYP
message NetSetAccountType {
  AccountType accountType = 1;
  
}

// App requests OAuth url
// Name: OA_URLRE
// Response: NetOAuthUrlRes
message NetOAuthUrlReq {
  int32 oauthProvider = 1;
  
}

// App requests OAuth url
// Name: OA_R_URL
// Response: NetOAuthUrlRes
message NetOAuthUrlRes {
  string authUrl = 1;
  string callbackUrl = 2;
  
}

// App adds another OAuth provider to the account
// Name: OA_CONNE
// Response: NetOAuthConnectRes
message NetOAuthConnectReq {
  int32 oauthProvider = 1;
  string callbackQuery = 2;
  
}

// OAuth addition result
// Name: OA_R_CON
message NetOAuthConnectRes {
  DataSocialMedia socialMedia = 1;
  
}

// Create account
// Response: NetDeviceAuthState
// Name: A_CREATE
message NetAccountCreateReq {
  string name = 1;
  float lat = 2;
  float lng = 3;
  
}

// end of messages related to authentication.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////



// Client requests the server permission to upload an image
// The server may delete the image later if it is never used
message NetReqImageUpload {
  // File information
  string fileName = 1;
  int32 fileSize = 2;
  
  // Hashed file contents
  string sha256 = 3;
  
}

// Request parameters to be used by the client verbatim for uploading
message NetResImageUpload {
  string requestMethod = 1;
  string requestUrl = 2;
  string headerContentType = 3;
  string headerContentLength = 4;
  string headerHost = 5;
  string headerXAmzDate = 6;
  string headerXAmzStorageClass = 7;
  string headerAuthorization = 8;
  
}

// Message to create offer
message NetReqCreateOffer {
  DataOffer offer = 1;
  repeated string imageIds = 2;
  
  /*
  string title = 1;
  repeated string imageIds = 2;
  string description = 3;
  string deliverables = 4;
  string reward = 5;
  */
  
}

// Response to successful offer creation
message NetResCreateOffer {
  // Identifier of the offer on the server
  int64 id = 1;
  
}

/* end of file */
