
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";

option csharp_namespace = "InfX";

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

message ConfigSubCategories {
  repeated string labels = 1;
}

message ConfigCategories {
  repeated ConfigSubCategories sub = 1;
}

message ConfigOAuthProvider {
  bool visible = 1;
  bool enabled = 2;
  /// Visual name
  string label = 3;
  int32 fontAwesomeBrand = 14;
  /// API endpoints of the OAuth provider
  string host = 4;
  /// API endpoints for Twitter-like OAuth
  string requestTokenUrl = 5; // If request token is not set, the alternate mechanism is used
  string authenticateUrl = 6;
  /// API endpoints for Spotify-like OAuth
  string authUrl = 7;
  string authQuery = 8;
  /// Url that will be used to detect login success by the app
  string callbackUrl = 9;
  /// Generated by the OAuth provider, not really secret, Twitter-like
  string consumerKey = 10;
  string consumerSecret = 11;
  /// From OAuth provider, Spotify-like, may not include clientSecret
  string clientId = 12;
  /// Request settings
  string nativeAuth = 13;
}

message ConfigOAuthProviders {
  /// List of all OAuthProviders
  repeated ConfigOAuthProvider all = 1;
  /// This AES-256 key decrypts the OAuth keys
  string key = 2;
}

message ConfigData {
  /// If this goes up in a config, the client must be updated
  int32 clientVersion = 1;
  
  /// Timestamp when the config was built. Unix epoch UTC milliseconds
  int64 timestamp = 5;
  
  /// URLs where the config can be downloaded
  repeated string downloadUrls = 4;
  
  /// Configuration data
  ConfigCategories categories = 2;
  ConfigOAuthProviders oauthProviders = 3;
  
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

message CategoryId {
  int32 main = 1;
  int32 sub = 2;
}

/*
message CategoryIdSet {
  repeated CategoryId ids = 1;
}
*/

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

enum AccountType {
  AT_UNKNOWN = 0;
  AT_INFLUENCER = 1;
  AT_BUSINESS = 2;
  
}

/// Global account state. Higher value means more access. 
/// Should always check using a >= compare, except for GAS_INITIALIZE case
enum GlobalAccountState {
  GAS_INITIALIZE = 0;
  GAS_BLOCKED = 1;
  GAS_READ_ONLY = 2;
  GAS_READ_WRITE = 3;
  GAS_MODERATOR = 4;
  GAS_ADMIN = 5;
  GAS_GOD = 6;
  
}

/// Global account state reason. These are for user message only. Not functional.
enum GlobalAccountStateReason {
  GASR_NEW_ACCOUNT = 0; // User is a new account
  GASR_ACCOUNT_BANNED = 1; // User is disallowed from the service
  GASR_CREATE_DENIED = 2; // User account creation request was denied. Contact support
  GASR_APPROVED = 3; // User account was approved
  GASR_DEMO_APPROVED = 4; // User account was automatically approved for demonstration purpose
  GASR_PENDING = 5; // User account approval is pending
  GASR_REQUIRE_INFO = 6; // More information is required from the user to approve their account
  
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

message DataInfluencer {
  int64 id = 1;
  string name = 2;
  string location = 3;
  string avatarUrl = 4;
  repeated CategoryId categories = 5;
  double lat = 6;
  double lng = 7;
  
}

message DataBusiness {
  int64 id = 1;
  string name = 2;
  string location = 3;
  string avatarUrl = 4;
  repeated CategoryId categories = 5;
  double lat = 6;
  double lng = 7;
  
}

message DataOffer {
  int64 id = 1;
  DataBusiness business = 2;
  string title = 3;
  repeated string imageUrls = 4;
  repeated CategoryId categories = 5;
  double lat = 6;
  double lng = 7;
  string description = 8;
  string deliverables = 9;
  string reward = 10;
  
}

message DataApplicant {
  int64 id = 1;
  DataOffer offer = 2;
  DataInfluencer influencer = 3;
  // bool influencer accepted/delivered/...
  // bool business accepted/received service/...
  // datetime schedule etc
  
}

message DataChat {
  int64 applicantId = 1; // One chat per applicant
  int64 sequenceId = 2; // Sequential identifier in the chat stream
  int64 keyId = 3; // Deduplication client-side (ghost entry)
  bool outgoing = 4; // Outgoing or incoming message
  string text = 5; // The written text
  
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Type of message
enum NetMessageType {
  NMT_UNKNOWN = 0;
  NMT_CLIENT_IDENTIFY = 1;
  
}

// TODO: proto3 has Any type, check if supported by dart protobuf compiler
/* message NetMessageHeader {
  NetMessageType type = 1;
  int32 requestSeq = 2; // This message is a request, the response will have the same identifier under the response parameter
  int32 responseSeq = 3; // This is a response, using the identifier from the request it is responding to
} */

// Generic rejection
message NetResRejected {
  string rejectReason = 1;
}

// Client requests the server permission to upload an image
// The server may delete the image later if it is never used
message NetReqImageUpload {
  // File information
  string fileName = 1;
  int32 fileSize = 2;
  
  // Hashed file contents
  string sha256 = 3;
  
}

// Request parameters to be used by the client verbatim for uploading
message NetResImageUpload {
  string requestMethod = 1;
  string requestUrl = 2;
  string headerContentType = 3;
  string headerContentLength = 4;
  string headerHost = 5;
  string headerXAmzDate = 6;
  string headerXAmzStorageClass = 7;
  string headerAuthorization = 8;
  
}

// Message to create offer
message NetReqCreateOffer {
  DataOffer offer = 1;
  repeated string imageIds = 2;
  
  /*
  string title = 1;
  repeated string imageIds = 2;
  string description = 3;
  string deliverables = 4;
  string reward = 5;
  */
  
}

// Response to successful offer creation
message NetResCreateOffer {
  // Identifier of the offer on the server
  int64 id = 1;
  
}

/* end of file */
