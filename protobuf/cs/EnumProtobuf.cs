// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enum_protobuf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace InfX {

  /// <summary>Holder for reflection information generated from enum_protobuf.proto</summary>
  public static partial class EnumProtobufReflection {

    #region Descriptor
    /// <summary>File descriptor for enum_protobuf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EnumProtobufReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNlbnVtX3Byb3RvYnVmLnByb3RvEgNpbmYqPgoOT0F1dGhNZWNoYW5pc20S",
            "DAoIT0FNX05PTkUQABIOCgpPQU1fT0FVVEgxEAESDgoKT0FNX09BVVRIMhAC",
            "KkMKEE9BdXRoUHJvdmlkZXJJZHMSDAoIT0FQX05PTkUQABIPCgtPQVBfVFdJ",
            "VFRFUhABEhAKDE9BUF9GQUNFQk9PSxACKlEKC0FjY291bnRUeXBlEg4KCkFU",
            "X1VOS05PV04QABIRCg1BVF9JTkZMVUVOQ0VSEAESDwoLQVRfQlVTSU5FU1MQ",
            "AhIOCgpBVF9TVVBQT1JUEAMqngEKEkdsb2JhbEFjY291bnRTdGF0ZRISCg5H",
            "QVNfSU5JVElBTElaRRAAEg8KC0dBU19CTE9DS0VEEAESEQoNR0FTX1JFQURf",
            "T05MWRACEhIKDkdBU19SRUFEX1dSSVRFEAMSDQoJR0FTX0RFQlVHEAQSDwoL",
            "R0FTX1NVUFBPUlQQBRIPCgtHQVNfTUFOQUdFUhAGEgsKB0dBU19HT0QQByq1",
            "AQoYR2xvYmFsQWNjb3VudFN0YXRlUmVhc29uEhQKEEdBU1JfTkVXX0FDQ09V",
            "TlQQABIXChNHQVNSX0FDQ09VTlRfQkFOTkVEEAESFgoSR0FTUl9DUkVBVEVf",
            "REVOSUVEEAISEQoNR0FTUl9BUFBST1ZFRBADEhYKEkdBU1JfREVNT19BUFBS",
            "T1ZFRBAEEhAKDEdBU1JfUEVORElORxAFEhUKEUdBU1JfUkVRVUlSRV9JTkZP",
            "EAYqbgoRTm90aWZpY2F0aW9uRmxhZ3MSFAoQTkZfQUNDT1VOVF9TVEFURRAA",
            "EhgKFE5GX01BS0VfQU5fT0ZGRVJfRkFCEAESFgoSTkZfVU5SRUFEX01FU1NB",
            "R0VTEAISEQoNTkZfQ1NfUkVRVUVTVBADKlEKEkJ1c2luZXNzT2ZmZXJTdGF0",
            "ZRINCglCT1NfRFJBRlQQABIMCghCT1NfT1BFThABEg4KCkJPU19BQ1RJVkUQ",
            "AhIOCgpCT1NfQ0xPU0VEEAMqcAoYQnVzaW5lc3NPZmZlclN0YXRlUmVhc29u",
            "EhIKDkJPU1JfTkVXX09GRkVSEAASFAoQQk9TUl9VU0VSX0NMT1NFRBABEhYK",
            "EkJPU1JfVE9TX1ZJT0xBVElPThACEhIKDkJPU1JfQ09NUExFVEVEEAMqVQoR",
            "QXBwbGljYW50Q2hhdFR5cGUSDQoJQUNUX1BMQUlOEAASDgoKQUNUX0hBR0dM",
            "RRABEhEKDUFDVF9JTUFHRV9LRVkQAhIOCgpBQ1RfTUFSS0VSEAMqcQoOQXBw",
            "bGljYW50U3RhdGUSDwoLQVNfSEFHR0xJTkcQABILCgdBU19ERUFMEAESDwoL",
            "QVNfUkVKRUNURUQQAhIPCgtBU19DT01QTEVURRADEg4KCkFTX0RJU1BVVEUQ",
            "BBIPCgtBU19SRVNPTFZFRBAFKswBChNBcHBsaWNhbnRDaGF0TWFya2VyEg8K",
            "C0FDTV9BUFBMSUVEEAASEQoNQUNNX1dBTlRfREVBTBABEhEKDUFDTV9ERUFM",
            "X01BREUQAhIQCgxBQ01fUkVKRUNURUQQAxIXChNBQ01fTUFSS0VEX0NPTVBM",
            "RVRFEAQSEAoMQUNNX0NPTVBMRVRFEAUSFgoSQUNNX01BUktFRF9ESVNQVVRF",
            "EAYSEAoMQUNNX1JFU09MVkVEEAcSFwoTQUNNX01FU1NBR0VfRFJPUFBFRBAI",
            "QgeqAgRJbmZYYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::InfX.OAuthMechanism), typeof(global::InfX.OAuthProviderIds), typeof(global::InfX.AccountType), typeof(global::InfX.GlobalAccountState), typeof(global::InfX.GlobalAccountStateReason), typeof(global::InfX.NotificationFlags), typeof(global::InfX.BusinessOfferState), typeof(global::InfX.BusinessOfferStateReason), typeof(global::InfX.ApplicantChatType), typeof(global::InfX.ApplicantState), typeof(global::InfX.ApplicantChatMarker), }, null));
    }
    #endregion

  }
  #region Enums
  public enum OAuthMechanism {
    [pbr::OriginalName("OAM_NONE")] OamNone = 0,
    /// <summary>
    /// / OAuth1, Twitter-like
    /// </summary>
    [pbr::OriginalName("OAM_OAUTH1")] OamOauth1 = 1,
    /// <summary>
    /// / OAuth2, Spotify-like
    /// </summary>
    [pbr::OriginalName("OAM_OAUTH2")] OamOauth2 = 2,
  }

  /// <summary>
  ///  Only use server-side for hardcoding!
  /// </summary>
  public enum OAuthProviderIds {
    [pbr::OriginalName("OAP_NONE")] OapNone = 0,
    [pbr::OriginalName("OAP_TWITTER")] OapTwitter = 1,
    [pbr::OriginalName("OAP_FACEBOOK")] OapFacebook = 2,
  }

  public enum AccountType {
    [pbr::OriginalName("AT_UNKNOWN")] AtUnknown = 0,
    [pbr::OriginalName("AT_INFLUENCER")] AtInfluencer = 1,
    [pbr::OriginalName("AT_BUSINESS")] AtBusiness = 2,
    [pbr::OriginalName("AT_SUPPORT")] AtSupport = 3,
  }

  /// <summary>
  /// / Global account state. Higher value means more access. 
  /// / Should always check using a >= compare, except for GAS_INITIALIZE case
  /// </summary>
  public enum GlobalAccountState {
    [pbr::OriginalName("GAS_INITIALIZE")] GasInitialize = 0,
    [pbr::OriginalName("GAS_BLOCKED")] GasBlocked = 1,
    [pbr::OriginalName("GAS_READ_ONLY")] GasReadOnly = 2,
    [pbr::OriginalName("GAS_READ_WRITE")] GasReadWrite = 3,
    [pbr::OriginalName("GAS_DEBUG")] GasDebug = 4,
    [pbr::OriginalName("GAS_SUPPORT")] GasSupport = 5,
    [pbr::OriginalName("GAS_MANAGER")] GasManager = 6,
    [pbr::OriginalName("GAS_GOD")] GasGod = 7,
  }

  /// <summary>
  /// / Global account state reason. These are for user message only. Not functional.
  /// </summary>
  public enum GlobalAccountStateReason {
    /// <summary>
    ///  User is a new account
    /// </summary>
    [pbr::OriginalName("GASR_NEW_ACCOUNT")] GasrNewAccount = 0,
    /// <summary>
    ///  User is disallowed from the service
    /// </summary>
    [pbr::OriginalName("GASR_ACCOUNT_BANNED")] GasrAccountBanned = 1,
    /// <summary>
    ///  User account creation request was denied. Contact support
    /// </summary>
    [pbr::OriginalName("GASR_CREATE_DENIED")] GasrCreateDenied = 2,
    /// <summary>
    ///  User account was approved
    /// </summary>
    [pbr::OriginalName("GASR_APPROVED")] GasrApproved = 3,
    /// <summary>
    ///  User account was automatically approved for demonstration purpose
    /// </summary>
    [pbr::OriginalName("GASR_DEMO_APPROVED")] GasrDemoApproved = 4,
    /// <summary>
    ///  User account approval is pending
    /// </summary>
    [pbr::OriginalName("GASR_PENDING")] GasrPending = 5,
    /// <summary>
    ///  More information is required from the user to approve their account
    /// </summary>
    [pbr::OriginalName("GASR_REQUIRE_INFO")] GasrRequireInfo = 6,
  }

  /// <summary>
  /// / NotificationFlags are set at login and may be sent through GCM as well
  /// </summary>
  public enum NotificationFlags {
    /// <summary>
    /// / Set whenever GAS changed (wipe after dismissed)
    /// </summary>
    [pbr::OriginalName("NF_ACCOUNT_STATE")] NfAccountState = 0,
    /// <summary>
    /// / Set for new users to learn, pops help message to FAB (wipe on dismissed)
    /// </summary>
    [pbr::OriginalName("NF_MAKE_AN_OFFER_FAB")] NfMakeAnOfferFab = 1,
    /// <summary>
    /// / There are new unread messages from other users (wipe when opening message tab)
    /// </summary>
    [pbr::OriginalName("NF_UNREAD_MESSAGES")] NfUnreadMessages = 2,
    /// <summary>
    /// / Customer support requesting attention (may interpret as duplicate of  NF_ACCOUNT_STATUS if GASR_REQUIRE_INFO)
    /// </summary>
    [pbr::OriginalName("NF_CS_REQUEST")] NfCsRequest = 3,
  }

  public enum BusinessOfferState {
    [pbr::OriginalName("BOS_DRAFT")] BosDraft = 0,
    /// <summary>
    ///  Open and awaiting new applicants
    /// </summary>
    [pbr::OriginalName("BOS_OPEN")] BosOpen = 1,
    /// <summary>
    ///  Active but no longer accepting applicants
    /// </summary>
    [pbr::OriginalName("BOS_ACTIVE")] BosActive = 2,
    [pbr::OriginalName("BOS_CLOSED")] BosClosed = 3,
  }

  public enum BusinessOfferStateReason {
    [pbr::OriginalName("BOSR_NEW_OFFER")] BosrNewOffer = 0,
    /// <summary>
    ///  You have closed this offer.
    /// </summary>
    [pbr::OriginalName("BOSR_USER_CLOSED")] BosrUserClosed = 1,
    /// <summary>
    ///  This offer violates the Terms of Service
    /// </summary>
    [pbr::OriginalName("BOSR_TOS_VIOLATION")] BosrTosViolation = 2,
    /// <summary>
    ///  This offer has been completed by all applicants
    /// </summary>
    [pbr::OriginalName("BOSR_COMPLETED")] BosrCompleted = 3,
  }

  public enum ApplicantChatType {
    [pbr::OriginalName("ACT_PLAIN")] ActPlain = 0,
    /// <summary>
    ///  url-encoded haggle message (deliverable=...&amp;reward=...&amp;remarks=...)
    /// </summary>
    [pbr::OriginalName("ACT_HAGGLE")] ActHaggle = 1,
    [pbr::OriginalName("ACT_IMAGE_KEY")] ActImageKey = 2,
    /// <summary>
    ///  system marker (id=...)
    /// </summary>
    [pbr::OriginalName("ACT_MARKER")] ActMarker = 3,
  }

  public enum ApplicantState {
    [pbr::OriginalName("AS_HAGGLING")] AsHaggling = 0,
    [pbr::OriginalName("AS_DEAL")] AsDeal = 1,
    [pbr::OriginalName("AS_REJECTED")] AsRejected = 2,
    [pbr::OriginalName("AS_COMPLETE")] AsComplete = 3,
    [pbr::OriginalName("AS_DISPUTE")] AsDispute = 4,
    [pbr::OriginalName("AS_RESOLVED")] AsResolved = 5,
  }

  public enum ApplicantChatMarker {
    /// <summary>
    ///  ${User} has applied for ${offer}.
    /// </summary>
    [pbr::OriginalName("ACM_APPLIED")] AcmApplied = 0,
    /// <summary>
    ///  ${User} wants to make a deal.
    /// </summary>
    [pbr::OriginalName("ACM_WANT_DEAL")] AcmWantDeal = 1,
    /// <summary>
    ///  A deal has been made. Congratulations!
    /// </summary>
    [pbr::OriginalName("ACM_DEAL_MADE")] AcmDealMade = 2,
    /// <summary>
    ///  ${User} has rejected the application.
    /// </summary>
    [pbr::OriginalName("ACM_REJECTED")] AcmRejected = 3,
    /// <summary>
    ///  ${User} has marked the deal as complete.
    /// </summary>
    [pbr::OriginalName("ACM_MARKED_COMPLETE")] AcmMarkedComplete = 4,
    /// <summary>
    ///  The offer has been completed. Well done!
    /// </summary>
    [pbr::OriginalName("ACM_COMPLETE")] AcmComplete = 5,
    /// <summary>
    ///  (Disputes are silent, although can be seen :))
    /// </summary>
    [pbr::OriginalName("ACM_MARKED_DISPUTE")] AcmMarkedDispute = 6,
    /// <summary>
    ///  The dispute has been resolved through customer support. Case closed.
    /// </summary>
    [pbr::OriginalName("ACM_RESOLVED")] AcmResolved = 7,
    /// <summary>
    ///  Empty message to drop an invalid message. Not stored in database.
    /// </summary>
    [pbr::OriginalName("ACM_MESSAGE_DROPPED")] AcmMessageDropped = 8,
  }

  #endregion

}

#endregion Designer generated code
