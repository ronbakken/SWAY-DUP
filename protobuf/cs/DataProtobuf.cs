// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_protobuf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace InfX {

  /// <summary>Holder for reflection information generated from data_protobuf.proto</summary>
  public static partial class DataProtobufReflection {

    #region Descriptor
    /// <summary>File descriptor for data_protobuf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataProtobufReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNkYXRhX3Byb3RvYnVmLnByb3RvEgNpbmYaE2VudW1fcHJvdG9idWYucHJv",
            "dG8itAIKD0RhdGFTb2NpYWxNZWRpYRIRCgljb25uZWN0ZWQYASABKAgSDwoH",
            "ZXhwaXJlZBgPIAEoCBISCgpzY3JlZW5OYW1lGAQgASgJEhMKC2Rpc3BsYXlO",
            "YW1lGAUgASgJEhEKCWF2YXRhclVybBgOIAEoCRISCgpwcm9maWxlVXJsGA0g",
            "ASgJEhMKC2Rlc2NyaXB0aW9uGAYgASgJEhAKCGxvY2F0aW9uGAcgASgJEgsK",
            "A3VybBgIIAEoCRINCgVlbWFpbBgMIAEoCRIUCgxmcmllbmRzQ291bnQYCSAB",
            "KAUSFgoOZm9sbG93ZXJzQ291bnQYAiABKAUSFgoOZm9sbG93aW5nQ291bnQY",
            "AyABKAUSEgoKcG9zdHNDb3VudBgKIAEoBRIQCgh2ZXJpZmllZBgLIAEoCCJg",
            "ChREYXRhT0F1dGhDcmVkZW50aWFscxIOCgZ1c2VySWQYBCABKAkSDQoFdG9r",
            "ZW4YASABKAkSEwoLdG9rZW5TZWNyZXQYAiABKAkSFAoMdG9rZW5FeHBpcmVz",
            "GAMgASgFIqEEChFEYXRhQnVzaW5lc3NPZmZlchIPCgdvZmZlcklkGAEgASgF",
            "EhEKCWFjY291bnRJZBgCIAEoBRISCgpsb2NhdGlvbklkGAMgASgFEg0KBXRp",
            "dGxlGAQgASgJEhMKC2Rlc2NyaXB0aW9uGAUgASgJEhQKDHRodW1ibmFpbFVy",
            "bBgGIAEoCRIUCgxkZWxpdmVyYWJsZXMYByABKAkSDgoGcmV3YXJkGAggASgJ",
            "EhQKDGxvY2F0aW9uTmFtZRgVIAEoCRIQCghsb2NhdGlvbhgJIAEoCRIQCghs",
            "YXRpdHVkZRgSIAEoARIRCglsb25naXR1ZGUYEyABKAESGgoSbG9jYXRpb25P",
            "ZmZlckNvdW50GBQgASgFEhEKCWNvdmVyVXJscxgKIAMoCRISCgpjYXRlZ29y",
            "aWVzGBcgASgMEiYKBXN0YXRlGAwgASgOMhcuaW5mLkJ1c2luZXNzT2ZmZXJT",
            "dGF0ZRIyCgtzdGF0ZVJlYXNvbhgNIAEoDjIdLmluZi5CdXNpbmVzc09mZmVy",
            "U3RhdGVSZWFzb24SFQoNYXBwbGljYW50c05ldxgOIAEoBRIaChJhcHBsaWNh",
            "bnRzQWNjZXB0ZWQYDyABKAUSGwoTYXBwbGljYW50c0NvbXBsZXRlZBgQIAEo",
            "BRIZChFhcHBsaWNhbnRzUmVmdXNlZBgRIAEoBRIdChVpbmZsdWVuY2VyQXBw",
            "bGljYW50SWQYFiABKAUi2gEKDERhdGFMb2NhdGlvbhISCgpsb2NhdGlvbklk",
            "GAEgASgFEgwKBG5hbWUYAiABKAkSEQoJYXZhdGFyVXJsGAYgASgJEhMKC2Fw",
            "cHJveGltYXRlGAcgASgJEg4KBmRldGFpbBgIIAEoCRIQCghwb3N0Y29kZRgJ",
            "IAEoCRISCgpyZWdpb25Db2RlGAogASgJEhMKC2NvdW50cnlDb2RlGAsgASgJ",
            "EhAKCGxhdGl0dWRlGAQgASgBEhEKCWxvbmdpdHVkZRgFIAEoARIQCghzMmNl",
            "bGxJZBgMIAEoAyKeAgoQRGF0YUFjY291bnRTdGF0ZRIQCghkZXZpY2VJZBgB",
            "IAEoBRIRCglhY2NvdW50SWQYAiABKAUSJQoLYWNjb3VudFR5cGUYAyABKA4y",
            "EC5pbmYuQWNjb3VudFR5cGUSMwoSZ2xvYmFsQWNjb3VudFN0YXRlGAQgASgO",
            "MhcuaW5mLkdsb2JhbEFjY291bnRTdGF0ZRI/ChhnbG9iYWxBY2NvdW50U3Rh",
            "dGVSZWFzb24YBSABKA4yHS5pbmYuR2xvYmFsQWNjb3VudFN0YXRlUmVhc29u",
            "EjEKEW5vdGlmaWNhdGlvbkZsYWdzGAYgASgOMhYuaW5mLk5vdGlmaWNhdGlv",
            "bkZsYWdzEhUKDWZpcmViYXNlVG9rZW4YByABKAkiZQoSRGF0YUFjY291bnRT",
            "dW1tYXJ5EgwKBG5hbWUYASABKAkSEwoLZGVzY3JpcHRpb24YAiABKAkSEAoI",
            "bG9jYXRpb24YAyABKAkSGgoSYXZhdGFyVGh1bWJuYWlsVXJsGAQgASgJIr8B",
            "ChFEYXRhQWNjb3VudERldGFpbBISCgpjYXRlZ29yaWVzGAsgASgMEikKC3Nv",
            "Y2lhbE1lZGlhGAMgAygLMhQuaW5mLkRhdGFTb2NpYWxNZWRpYRIWCg5hdmF0",
            "YXJDb3ZlclVybBgHIAEoCRILCgN1cmwYBiABKAkSDQoFZW1haWwYCSABKAkS",
            "EAoIbGF0aXR1ZGUYBCABKAESEQoJbG9uZ2l0dWRlGAUgASgBEhIKCmxvY2F0",
            "aW9uSWQYCCABKAUihQEKC0RhdGFBY2NvdW50EiQKBXN0YXRlGAEgASgLMhUu",
            "aW5mLkRhdGFBY2NvdW50U3RhdGUSKAoHc3VtbWFyeRgCIAEoCzIXLmluZi5E",
            "YXRhQWNjb3VudFN1bW1hcnkSJgoGZGV0YWlsGAMgASgLMhYuaW5mLkRhdGFB",
            "Y2NvdW50RGV0YWlsIpcECg1EYXRhQXBwbGljYW50EhMKC2FwcGxpY2FudElk",
            "GAEgASgFEg8KB29mZmVySWQYAiABKAUSGwoTaW5mbHVlbmNlckFjY291bnRJ",
            "ZBgDIAEoBRIZChFidXNpbmVzc0FjY291bnRJZBgQIAEoBRIWCg5pbmZsdWVu",
            "Y2VyTmFtZRgRIAEoCRIUCgxidXNpbmVzc05hbWUYEiABKAkSEgoKb2ZmZXJU",
            "aXRsZRgTIAEoCRIUCgxoYWdnbGVDaGF0SWQYBCABKAMSGwoTaW5mbHVlbmNl",
            "cldhbnRzRGVhbBgGIAEoCBIZChFidXNpbmVzc1dhbnRzRGVhbBgFIAEoCBIh",
            "ChlpbmZsdWVuY2VyTWFya2VkRGVsaXZlcmVkGAcgASgIEiAKGGluZmx1ZW5j",
            "ZXJNYXJrZWRSZXdhcmRlZBgIIAEoCBIfChdidXNpbmVzc01hcmtlZERlbGl2",
            "ZXJlZBgJIAEoCBIeChZidXNpbmVzc01hcmtlZFJld2FyZGVkGAogASgIEhwK",
            "FGluZmx1ZW5jZXJHYXZlUmF0aW5nGAwgASgFEhoKEmJ1c2luZXNzR2F2ZVJh",
            "dGluZxgLIAEoBRIaChJpbmZsdWVuY2VyRGlzcHV0ZWQYDyABKAgSGAoQYnVz",
            "aW5lc3NEaXNwdXRlZBgOIAEoCBIiCgVzdGF0ZRgNIAEoDjITLmluZi5BcHBs",
            "aWNhbnRTdGF0ZSLDAQoRRGF0YUFwcGxpY2FudENoYXQSDgoGY2hhdElkGAcg",
            "ASgDEgwKBHNlbnQYCiABKAMSEAoIc2VuZGVySWQYAiABKAUSEwoLYXBwbGlj",
            "YW50SWQYASABKAUSEAoIZGV2aWNlSWQYCyABKAUSFQoNZGV2aWNlR2hvc3RJ",
            "ZBgGIAEoBRIkCgR0eXBlGAggASgOMhYuaW5mLkFwcGxpY2FudENoYXRUeXBl",
            "EgwKBHRleHQYBSABKAkSDAoEc2VlbhgJIAEoA0IHqgIESW5mWGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::InfX.EnumProtobufReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataSocialMedia), global::InfX.DataSocialMedia.Parser, new[]{ "Connected", "Expired", "ScreenName", "DisplayName", "AvatarUrl", "ProfileUrl", "Description", "Location", "Url", "Email", "FriendsCount", "FollowersCount", "FollowingCount", "PostsCount", "Verified" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataOAuthCredentials), global::InfX.DataOAuthCredentials.Parser, new[]{ "UserId", "Token", "TokenSecret", "TokenExpires" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataBusinessOffer), global::InfX.DataBusinessOffer.Parser, new[]{ "OfferId", "AccountId", "LocationId", "Title", "Description", "ThumbnailUrl", "Deliverables", "Reward", "LocationName", "Location", "Latitude", "Longitude", "LocationOfferCount", "CoverUrls", "Categories", "State", "StateReason", "ApplicantsNew", "ApplicantsAccepted", "ApplicantsCompleted", "ApplicantsRefused", "InfluencerApplicantId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataLocation), global::InfX.DataLocation.Parser, new[]{ "LocationId", "Name", "AvatarUrl", "Approximate", "Detail", "Postcode", "RegionCode", "CountryCode", "Latitude", "Longitude", "S2CellId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataAccountState), global::InfX.DataAccountState.Parser, new[]{ "DeviceId", "AccountId", "AccountType", "GlobalAccountState", "GlobalAccountStateReason", "NotificationFlags", "FirebaseToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataAccountSummary), global::InfX.DataAccountSummary.Parser, new[]{ "Name", "Description", "Location", "AvatarThumbnailUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataAccountDetail), global::InfX.DataAccountDetail.Parser, new[]{ "Categories", "SocialMedia", "AvatarCoverUrl", "Url", "Email", "Latitude", "Longitude", "LocationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataAccount), global::InfX.DataAccount.Parser, new[]{ "State", "Summary", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataApplicant), global::InfX.DataApplicant.Parser, new[]{ "ApplicantId", "OfferId", "InfluencerAccountId", "BusinessAccountId", "InfluencerName", "BusinessName", "OfferTitle", "HaggleChatId", "InfluencerWantsDeal", "BusinessWantsDeal", "InfluencerMarkedDelivered", "InfluencerMarkedRewarded", "BusinessMarkedDelivered", "BusinessMarkedRewarded", "InfluencerGaveRating", "BusinessGaveRating", "InfluencerDisputed", "BusinessDisputed", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataApplicantChat), global::InfX.DataApplicantChat.Parser, new[]{ "ChatId", "Sent", "SenderId", "ApplicantId", "DeviceId", "DeviceGhostId", "Type", "Text", "Seen" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  This message MUST NOT contain 'repeated' due to usage of 'mergeFromMessage'
  /// </summary>
  public sealed partial class DataSocialMedia : pb::IMessage<DataSocialMedia> {
    private static readonly pb::MessageParser<DataSocialMedia> _parser = new pb::MessageParser<DataSocialMedia>(() => new DataSocialMedia());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataSocialMedia> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.DataProtobufReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSocialMedia() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSocialMedia(DataSocialMedia other) : this() {
      connected_ = other.connected_;
      expired_ = other.expired_;
      screenName_ = other.screenName_;
      displayName_ = other.displayName_;
      avatarUrl_ = other.avatarUrl_;
      profileUrl_ = other.profileUrl_;
      description_ = other.description_;
      location_ = other.location_;
      url_ = other.url_;
      email_ = other.email_;
      friendsCount_ = other.friendsCount_;
      followersCount_ = other.followersCount_;
      followingCount_ = other.followingCount_;
      postsCount_ = other.postsCount_;
      verified_ = other.verified_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSocialMedia Clone() {
      return new DataSocialMedia(this);
    }

    /// <summary>Field number for the "connected" field.</summary>
    public const int ConnectedFieldNumber = 1;
    private bool connected_;
    /// <summary>
    /// / Social media is connected to the account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Connected {
      get { return connected_; }
      set {
        connected_ = value;
      }
    }

    /// <summary>Field number for the "expired" field.</summary>
    public const int ExpiredFieldNumber = 15;
    private bool expired_;
    /// <summary>
    /// / Token for connection is expired, data outdated and user must re-connect by OAuth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Expired {
      get { return expired_; }
      set {
        expired_ = value;
      }
    }

    /// <summary>Field number for the "screenName" field.</summary>
    public const int ScreenNameFieldNumber = 4;
    private string screenName_ = "";
    /// <summary>
    /// / Screen name, eg. Twitter account name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScreenName {
      get { return screenName_; }
      set {
        screenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "displayName" field.</summary>
    public const int DisplayNameFieldNumber = 5;
    private string displayName_ = "";
    /// <summary>
    /// / Display name, eg. Facebook full name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatarUrl" field.</summary>
    public const int AvatarUrlFieldNumber = 14;
    private string avatarUrl_ = "";
    /// <summary>
    /// / Url to the actual social media profile
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "profileUrl" field.</summary>
    public const int ProfileUrlFieldNumber = 13;
    private string profileUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProfileUrl {
      get { return profileUrl_; }
      set {
        profileUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 7;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 8;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 12;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "friendsCount" field.</summary>
    public const int FriendsCountFieldNumber = 9;
    private int friendsCount_;
    /// <summary>
    ///  Use the largest of either friendsCount or followersCount for boasting. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FriendsCount {
      get { return friendsCount_; }
      set {
        friendsCount_ = value;
      }
    }

    /// <summary>Field number for the "followersCount" field.</summary>
    public const int FollowersCountFieldNumber = 2;
    private int followersCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FollowersCount {
      get { return followersCount_; }
      set {
        followersCount_ = value;
      }
    }

    /// <summary>Field number for the "followingCount" field.</summary>
    public const int FollowingCountFieldNumber = 3;
    private int followingCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FollowingCount {
      get { return followingCount_; }
      set {
        followingCount_ = value;
      }
    }

    /// <summary>Field number for the "postsCount" field.</summary>
    public const int PostsCountFieldNumber = 10;
    private int postsCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PostsCount {
      get { return postsCount_; }
      set {
        postsCount_ = value;
      }
    }

    /// <summary>Field number for the "verified" field.</summary>
    public const int VerifiedFieldNumber = 11;
    private bool verified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Verified {
      get { return verified_; }
      set {
        verified_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataSocialMedia);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataSocialMedia other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Connected != other.Connected) return false;
      if (Expired != other.Expired) return false;
      if (ScreenName != other.ScreenName) return false;
      if (DisplayName != other.DisplayName) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (ProfileUrl != other.ProfileUrl) return false;
      if (Description != other.Description) return false;
      if (Location != other.Location) return false;
      if (Url != other.Url) return false;
      if (Email != other.Email) return false;
      if (FriendsCount != other.FriendsCount) return false;
      if (FollowersCount != other.FollowersCount) return false;
      if (FollowingCount != other.FollowingCount) return false;
      if (PostsCount != other.PostsCount) return false;
      if (Verified != other.Verified) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Connected != false) hash ^= Connected.GetHashCode();
      if (Expired != false) hash ^= Expired.GetHashCode();
      if (ScreenName.Length != 0) hash ^= ScreenName.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (ProfileUrl.Length != 0) hash ^= ProfileUrl.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (FriendsCount != 0) hash ^= FriendsCount.GetHashCode();
      if (FollowersCount != 0) hash ^= FollowersCount.GetHashCode();
      if (FollowingCount != 0) hash ^= FollowingCount.GetHashCode();
      if (PostsCount != 0) hash ^= PostsCount.GetHashCode();
      if (Verified != false) hash ^= Verified.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Connected != false) {
        output.WriteRawTag(8);
        output.WriteBool(Connected);
      }
      if (FollowersCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FollowersCount);
      }
      if (FollowingCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FollowingCount);
      }
      if (ScreenName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ScreenName);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DisplayName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Location);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Url);
      }
      if (FriendsCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FriendsCount);
      }
      if (PostsCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PostsCount);
      }
      if (Verified != false) {
        output.WriteRawTag(88);
        output.WriteBool(Verified);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Email);
      }
      if (ProfileUrl.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ProfileUrl);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(AvatarUrl);
      }
      if (Expired != false) {
        output.WriteRawTag(120);
        output.WriteBool(Expired);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Connected != false) {
        size += 1 + 1;
      }
      if (Expired != false) {
        size += 1 + 1;
      }
      if (ScreenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScreenName);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (ProfileUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProfileUrl);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (FriendsCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCount);
      }
      if (FollowersCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FollowersCount);
      }
      if (FollowingCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FollowingCount);
      }
      if (PostsCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PostsCount);
      }
      if (Verified != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataSocialMedia other) {
      if (other == null) {
        return;
      }
      if (other.Connected != false) {
        Connected = other.Connected;
      }
      if (other.Expired != false) {
        Expired = other.Expired;
      }
      if (other.ScreenName.Length != 0) {
        ScreenName = other.ScreenName;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.ProfileUrl.Length != 0) {
        ProfileUrl = other.ProfileUrl;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.FriendsCount != 0) {
        FriendsCount = other.FriendsCount;
      }
      if (other.FollowersCount != 0) {
        FollowersCount = other.FollowersCount;
      }
      if (other.FollowingCount != 0) {
        FollowingCount = other.FollowingCount;
      }
      if (other.PostsCount != 0) {
        PostsCount = other.PostsCount;
      }
      if (other.Verified != false) {
        Verified = other.Verified;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Connected = input.ReadBool();
            break;
          }
          case 16: {
            FollowersCount = input.ReadInt32();
            break;
          }
          case 24: {
            FollowingCount = input.ReadInt32();
            break;
          }
          case 34: {
            ScreenName = input.ReadString();
            break;
          }
          case 42: {
            DisplayName = input.ReadString();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 58: {
            Location = input.ReadString();
            break;
          }
          case 66: {
            Url = input.ReadString();
            break;
          }
          case 72: {
            FriendsCount = input.ReadInt32();
            break;
          }
          case 80: {
            PostsCount = input.ReadInt32();
            break;
          }
          case 88: {
            Verified = input.ReadBool();
            break;
          }
          case 98: {
            Email = input.ReadString();
            break;
          }
          case 106: {
            ProfileUrl = input.ReadString();
            break;
          }
          case 114: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 120: {
            Expired = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Server info, never shared with client 
  /// </summary>
  public sealed partial class DataOAuthCredentials : pb::IMessage<DataOAuthCredentials> {
    private static readonly pb::MessageParser<DataOAuthCredentials> _parser = new pb::MessageParser<DataOAuthCredentials>(() => new DataOAuthCredentials());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataOAuthCredentials> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.DataProtobufReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOAuthCredentials() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOAuthCredentials(DataOAuthCredentials other) : this() {
      userId_ = other.userId_;
      token_ = other.token_;
      tokenSecret_ = other.tokenSecret_;
      tokenExpires_ = other.tokenExpires_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOAuthCredentials Clone() {
      return new DataOAuthCredentials(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 4;
    private string userId_ = "";
    /// <summary>
    /// / User id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    /// / Token for OAuth1 and OAuth2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tokenSecret" field.</summary>
    public const int TokenSecretFieldNumber = 2;
    private string tokenSecret_ = "";
    /// <summary>
    /// / Secret token for OAuth1. May be empty string for OAuth2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSecret {
      get { return tokenSecret_; }
      set {
        tokenSecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tokenExpires" field.</summary>
    public const int TokenExpiresFieldNumber = 3;
    private int tokenExpires_;
    /// <summary>
    /// / Expiration timestamp in seconds. No expiration if 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TokenExpires {
      get { return tokenExpires_; }
      set {
        tokenExpires_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataOAuthCredentials);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataOAuthCredentials other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Token != other.Token) return false;
      if (TokenSecret != other.TokenSecret) return false;
      if (TokenExpires != other.TokenExpires) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (TokenSecret.Length != 0) hash ^= TokenSecret.GetHashCode();
      if (TokenExpires != 0) hash ^= TokenExpires.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (TokenSecret.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenSecret);
      }
      if (TokenExpires != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TokenExpires);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (TokenSecret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSecret);
      }
      if (TokenExpires != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TokenExpires);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataOAuthCredentials other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.TokenSecret.Length != 0) {
        TokenSecret = other.TokenSecret;
      }
      if (other.TokenExpires != 0) {
        TokenExpires = other.TokenExpires;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            TokenSecret = input.ReadString();
            break;
          }
          case 24: {
            TokenExpires = input.ReadInt32();
            break;
          }
          case 34: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataBusinessOffer : pb::IMessage<DataBusinessOffer> {
    private static readonly pb::MessageParser<DataBusinessOffer> _parser = new pb::MessageParser<DataBusinessOffer>(() => new DataBusinessOffer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataBusinessOffer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.DataProtobufReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBusinessOffer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBusinessOffer(DataBusinessOffer other) : this() {
      offerId_ = other.offerId_;
      accountId_ = other.accountId_;
      locationId_ = other.locationId_;
      title_ = other.title_;
      description_ = other.description_;
      thumbnailUrl_ = other.thumbnailUrl_;
      deliverables_ = other.deliverables_;
      reward_ = other.reward_;
      locationName_ = other.locationName_;
      location_ = other.location_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      locationOfferCount_ = other.locationOfferCount_;
      coverUrls_ = other.coverUrls_.Clone();
      categories_ = other.categories_;
      state_ = other.state_;
      stateReason_ = other.stateReason_;
      applicantsNew_ = other.applicantsNew_;
      applicantsAccepted_ = other.applicantsAccepted_;
      applicantsCompleted_ = other.applicantsCompleted_;
      applicantsRefused_ = other.applicantsRefused_;
      influencerApplicantId_ = other.influencerApplicantId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBusinessOffer Clone() {
      return new DataBusinessOffer(this);
    }

    /// <summary>Field number for the "offerId" field.</summary>
    public const int OfferIdFieldNumber = 1;
    private int offerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OfferId {
      get { return offerId_; }
      set {
        offerId_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private int accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "locationId" field.</summary>
    public const int LocationIdFieldNumber = 3;
    private int locationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocationId {
      get { return locationId_; }
      set {
        locationId_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 4;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumbnailUrl" field.</summary>
    public const int ThumbnailUrlFieldNumber = 6;
    private string thumbnailUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ThumbnailUrl {
      get { return thumbnailUrl_; }
      set {
        thumbnailUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deliverables" field.</summary>
    public const int DeliverablesFieldNumber = 7;
    private string deliverables_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deliverables {
      get { return deliverables_; }
      set {
        deliverables_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 8;
    private string reward_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reward {
      get { return reward_; }
      set {
        reward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locationName" field.</summary>
    public const int LocationNameFieldNumber = 21;
    private string locationName_ = "";
    /// <summary>
    ///  Embedded business location info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocationName {
      get { return locationName_; }
      set {
        locationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 9;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 18;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 19;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "locationOfferCount" field.</summary>
    public const int LocationOfferCountFieldNumber = 20;
    private int locationOfferCount_;
    /// <summary>
    ///  Number of offers at the same location
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocationOfferCount {
      get { return locationOfferCount_; }
      set {
        locationOfferCount_ = value;
      }
    }

    /// <summary>Field number for the "coverUrls" field.</summary>
    public const int CoverUrlsFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_coverUrls_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> coverUrls_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  Detail info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CoverUrls {
      get { return coverUrls_; }
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 23;
    private pb::ByteString categories_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Categories {
      get { return categories_; }
      set {
        categories_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 12;
    private global::InfX.BusinessOfferState state_ = 0;
    /// <summary>
    ///  State
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.BusinessOfferState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "stateReason" field.</summary>
    public const int StateReasonFieldNumber = 13;
    private global::InfX.BusinessOfferStateReason stateReason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.BusinessOfferStateReason StateReason {
      get { return stateReason_; }
      set {
        stateReason_ = value;
      }
    }

    /// <summary>Field number for the "applicantsNew" field.</summary>
    public const int ApplicantsNewFieldNumber = 14;
    private int applicantsNew_;
    /// <summary>
    ///  Info for business
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantsNew {
      get { return applicantsNew_; }
      set {
        applicantsNew_ = value;
      }
    }

    /// <summary>Field number for the "applicantsAccepted" field.</summary>
    public const int ApplicantsAcceptedFieldNumber = 15;
    private int applicantsAccepted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantsAccepted {
      get { return applicantsAccepted_; }
      set {
        applicantsAccepted_ = value;
      }
    }

    /// <summary>Field number for the "applicantsCompleted" field.</summary>
    public const int ApplicantsCompletedFieldNumber = 16;
    private int applicantsCompleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantsCompleted {
      get { return applicantsCompleted_; }
      set {
        applicantsCompleted_ = value;
      }
    }

    /// <summary>Field number for the "applicantsRefused" field.</summary>
    public const int ApplicantsRefusedFieldNumber = 17;
    private int applicantsRefused_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantsRefused {
      get { return applicantsRefused_; }
      set {
        applicantsRefused_ = value;
      }
    }

    /// <summary>Field number for the "influencerApplicantId" field.</summary>
    public const int InfluencerApplicantIdFieldNumber = 22;
    private int influencerApplicantId_;
    /// <summary>
    ///  Info for influencer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InfluencerApplicantId {
      get { return influencerApplicantId_; }
      set {
        influencerApplicantId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataBusinessOffer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataBusinessOffer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OfferId != other.OfferId) return false;
      if (AccountId != other.AccountId) return false;
      if (LocationId != other.LocationId) return false;
      if (Title != other.Title) return false;
      if (Description != other.Description) return false;
      if (ThumbnailUrl != other.ThumbnailUrl) return false;
      if (Deliverables != other.Deliverables) return false;
      if (Reward != other.Reward) return false;
      if (LocationName != other.LocationName) return false;
      if (Location != other.Location) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (LocationOfferCount != other.LocationOfferCount) return false;
      if(!coverUrls_.Equals(other.coverUrls_)) return false;
      if (Categories != other.Categories) return false;
      if (State != other.State) return false;
      if (StateReason != other.StateReason) return false;
      if (ApplicantsNew != other.ApplicantsNew) return false;
      if (ApplicantsAccepted != other.ApplicantsAccepted) return false;
      if (ApplicantsCompleted != other.ApplicantsCompleted) return false;
      if (ApplicantsRefused != other.ApplicantsRefused) return false;
      if (InfluencerApplicantId != other.InfluencerApplicantId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OfferId != 0) hash ^= OfferId.GetHashCode();
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      if (LocationId != 0) hash ^= LocationId.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (ThumbnailUrl.Length != 0) hash ^= ThumbnailUrl.GetHashCode();
      if (Deliverables.Length != 0) hash ^= Deliverables.GetHashCode();
      if (Reward.Length != 0) hash ^= Reward.GetHashCode();
      if (LocationName.Length != 0) hash ^= LocationName.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      if (LocationOfferCount != 0) hash ^= LocationOfferCount.GetHashCode();
      hash ^= coverUrls_.GetHashCode();
      if (Categories.Length != 0) hash ^= Categories.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (StateReason != 0) hash ^= StateReason.GetHashCode();
      if (ApplicantsNew != 0) hash ^= ApplicantsNew.GetHashCode();
      if (ApplicantsAccepted != 0) hash ^= ApplicantsAccepted.GetHashCode();
      if (ApplicantsCompleted != 0) hash ^= ApplicantsCompleted.GetHashCode();
      if (ApplicantsRefused != 0) hash ^= ApplicantsRefused.GetHashCode();
      if (InfluencerApplicantId != 0) hash ^= InfluencerApplicantId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OfferId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OfferId);
      }
      if (AccountId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AccountId);
      }
      if (LocationId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LocationId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Title);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (ThumbnailUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ThumbnailUrl);
      }
      if (Deliverables.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Deliverables);
      }
      if (Reward.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Reward);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Location);
      }
      coverUrls_.WriteTo(output, _repeated_coverUrls_codec);
      if (State != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) State);
      }
      if (StateReason != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) StateReason);
      }
      if (ApplicantsNew != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ApplicantsNew);
      }
      if (ApplicantsAccepted != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ApplicantsAccepted);
      }
      if (ApplicantsCompleted != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ApplicantsCompleted);
      }
      if (ApplicantsRefused != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ApplicantsRefused);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(Longitude);
      }
      if (LocationOfferCount != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(LocationOfferCount);
      }
      if (LocationName.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(LocationName);
      }
      if (InfluencerApplicantId != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(InfluencerApplicantId);
      }
      if (Categories.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteBytes(Categories);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OfferId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfferId);
      }
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      if (LocationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocationId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (ThumbnailUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ThumbnailUrl);
      }
      if (Deliverables.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Deliverables);
      }
      if (Reward.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reward);
      }
      if (LocationName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LocationName);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Latitude != 0D) {
        size += 2 + 8;
      }
      if (Longitude != 0D) {
        size += 2 + 8;
      }
      if (LocationOfferCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LocationOfferCount);
      }
      size += coverUrls_.CalculateSize(_repeated_coverUrls_codec);
      if (Categories.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Categories);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (StateReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StateReason);
      }
      if (ApplicantsNew != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicantsNew);
      }
      if (ApplicantsAccepted != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicantsAccepted);
      }
      if (ApplicantsCompleted != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ApplicantsCompleted);
      }
      if (ApplicantsRefused != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ApplicantsRefused);
      }
      if (InfluencerApplicantId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InfluencerApplicantId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataBusinessOffer other) {
      if (other == null) {
        return;
      }
      if (other.OfferId != 0) {
        OfferId = other.OfferId;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      if (other.LocationId != 0) {
        LocationId = other.LocationId;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.ThumbnailUrl.Length != 0) {
        ThumbnailUrl = other.ThumbnailUrl;
      }
      if (other.Deliverables.Length != 0) {
        Deliverables = other.Deliverables;
      }
      if (other.Reward.Length != 0) {
        Reward = other.Reward;
      }
      if (other.LocationName.Length != 0) {
        LocationName = other.LocationName;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.LocationOfferCount != 0) {
        LocationOfferCount = other.LocationOfferCount;
      }
      coverUrls_.Add(other.coverUrls_);
      if (other.Categories.Length != 0) {
        Categories = other.Categories;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.StateReason != 0) {
        StateReason = other.StateReason;
      }
      if (other.ApplicantsNew != 0) {
        ApplicantsNew = other.ApplicantsNew;
      }
      if (other.ApplicantsAccepted != 0) {
        ApplicantsAccepted = other.ApplicantsAccepted;
      }
      if (other.ApplicantsCompleted != 0) {
        ApplicantsCompleted = other.ApplicantsCompleted;
      }
      if (other.ApplicantsRefused != 0) {
        ApplicantsRefused = other.ApplicantsRefused;
      }
      if (other.InfluencerApplicantId != 0) {
        InfluencerApplicantId = other.InfluencerApplicantId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OfferId = input.ReadInt32();
            break;
          }
          case 16: {
            AccountId = input.ReadInt32();
            break;
          }
          case 24: {
            LocationId = input.ReadInt32();
            break;
          }
          case 34: {
            Title = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            ThumbnailUrl = input.ReadString();
            break;
          }
          case 58: {
            Deliverables = input.ReadString();
            break;
          }
          case 66: {
            Reward = input.ReadString();
            break;
          }
          case 74: {
            Location = input.ReadString();
            break;
          }
          case 82: {
            coverUrls_.AddEntriesFrom(input, _repeated_coverUrls_codec);
            break;
          }
          case 96: {
            state_ = (global::InfX.BusinessOfferState) input.ReadEnum();
            break;
          }
          case 104: {
            stateReason_ = (global::InfX.BusinessOfferStateReason) input.ReadEnum();
            break;
          }
          case 112: {
            ApplicantsNew = input.ReadInt32();
            break;
          }
          case 120: {
            ApplicantsAccepted = input.ReadInt32();
            break;
          }
          case 128: {
            ApplicantsCompleted = input.ReadInt32();
            break;
          }
          case 136: {
            ApplicantsRefused = input.ReadInt32();
            break;
          }
          case 145: {
            Latitude = input.ReadDouble();
            break;
          }
          case 153: {
            Longitude = input.ReadDouble();
            break;
          }
          case 160: {
            LocationOfferCount = input.ReadInt32();
            break;
          }
          case 170: {
            LocationName = input.ReadString();
            break;
          }
          case 176: {
            InfluencerApplicantId = input.ReadInt32();
            break;
          }
          case 186: {
            Categories = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataLocation : pb::IMessage<DataLocation> {
    private static readonly pb::MessageParser<DataLocation> _parser = new pb::MessageParser<DataLocation>(() => new DataLocation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.DataProtobufReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLocation(DataLocation other) : this() {
      locationId_ = other.locationId_;
      name_ = other.name_;
      avatarUrl_ = other.avatarUrl_;
      approximate_ = other.approximate_;
      detail_ = other.detail_;
      postcode_ = other.postcode_;
      regionCode_ = other.regionCode_;
      countryCode_ = other.countryCode_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      s2CellId_ = other.s2CellId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLocation Clone() {
      return new DataLocation(this);
    }

    /// <summary>Field number for the "locationId" field.</summary>
    public const int LocationIdFieldNumber = 1;
    private int locationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocationId {
      get { return locationId_; }
      set {
        locationId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatarUrl" field.</summary>
    public const int AvatarUrlFieldNumber = 6;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "approximate" field.</summary>
    public const int ApproximateFieldNumber = 7;
    private string approximate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Approximate {
      get { return approximate_; }
      set {
        approximate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 8;
    private string detail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "postcode" field.</summary>
    public const int PostcodeFieldNumber = 9;
    private string postcode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Postcode {
      get { return postcode_; }
      set {
        postcode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "regionCode" field.</summary>
    public const int RegionCodeFieldNumber = 10;
    private string regionCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegionCode {
      get { return regionCode_; }
      set {
        regionCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "countryCode" field.</summary>
    public const int CountryCodeFieldNumber = 11;
    private string countryCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 4;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 5;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "s2cellId" field.</summary>
    public const int S2CellIdFieldNumber = 12;
    private long s2CellId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long S2CellId {
      get { return s2CellId_; }
      set {
        s2CellId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocationId != other.LocationId) return false;
      if (Name != other.Name) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (Approximate != other.Approximate) return false;
      if (Detail != other.Detail) return false;
      if (Postcode != other.Postcode) return false;
      if (RegionCode != other.RegionCode) return false;
      if (CountryCode != other.CountryCode) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (S2CellId != other.S2CellId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocationId != 0) hash ^= LocationId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (Approximate.Length != 0) hash ^= Approximate.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      if (Postcode.Length != 0) hash ^= Postcode.GetHashCode();
      if (RegionCode.Length != 0) hash ^= RegionCode.GetHashCode();
      if (CountryCode.Length != 0) hash ^= CountryCode.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      if (S2CellId != 0L) hash ^= S2CellId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LocationId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LocationId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Longitude);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AvatarUrl);
      }
      if (Approximate.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Approximate);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Detail);
      }
      if (Postcode.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Postcode);
      }
      if (RegionCode.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RegionCode);
      }
      if (CountryCode.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CountryCode);
      }
      if (S2CellId != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(S2CellId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocationId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (Approximate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Approximate);
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      if (Postcode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Postcode);
      }
      if (RegionCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegionCode);
      }
      if (CountryCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (S2CellId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(S2CellId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataLocation other) {
      if (other == null) {
        return;
      }
      if (other.LocationId != 0) {
        LocationId = other.LocationId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.Approximate.Length != 0) {
        Approximate = other.Approximate;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
      if (other.Postcode.Length != 0) {
        Postcode = other.Postcode;
      }
      if (other.RegionCode.Length != 0) {
        RegionCode = other.RegionCode;
      }
      if (other.CountryCode.Length != 0) {
        CountryCode = other.CountryCode;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.S2CellId != 0L) {
        S2CellId = other.S2CellId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LocationId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 33: {
            Latitude = input.ReadDouble();
            break;
          }
          case 41: {
            Longitude = input.ReadDouble();
            break;
          }
          case 50: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 58: {
            Approximate = input.ReadString();
            break;
          }
          case 66: {
            Detail = input.ReadString();
            break;
          }
          case 74: {
            Postcode = input.ReadString();
            break;
          }
          case 82: {
            RegionCode = input.ReadString();
            break;
          }
          case 90: {
            CountryCode = input.ReadString();
            break;
          }
          case 96: {
            S2CellId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataAccountState : pb::IMessage<DataAccountState> {
    private static readonly pb::MessageParser<DataAccountState> _parser = new pb::MessageParser<DataAccountState>(() => new DataAccountState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataAccountState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.DataProtobufReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountState(DataAccountState other) : this() {
      deviceId_ = other.deviceId_;
      accountId_ = other.accountId_;
      accountType_ = other.accountType_;
      globalAccountState_ = other.globalAccountState_;
      globalAccountStateReason_ = other.globalAccountStateReason_;
      notificationFlags_ = other.notificationFlags_;
      firebaseToken_ = other.firebaseToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountState Clone() {
      return new DataAccountState(this);
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private int deviceId_;
    /// <summary>
    ///  Device ID. If 0, authentication failed, and the client must create a new account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private int accountId_;
    /// <summary>
    ///  Account ID. If 0, proceed with account creation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "accountType" field.</summary>
    public const int AccountTypeFieldNumber = 3;
    private global::InfX.AccountType accountType_ = 0;
    /// <summary>
    ///  Account type. If not AT_UNKNOWN, account creation may bypass type selection
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.AccountType AccountType {
      get { return accountType_; }
      set {
        accountType_ = value;
      }
    }

    /// <summary>Field number for the "globalAccountState" field.</summary>
    public const int GlobalAccountStateFieldNumber = 4;
    private global::InfX.GlobalAccountState globalAccountState_ = 0;
    /// <summary>
    ///  TODO: Rename to globalState
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.GlobalAccountState GlobalAccountState {
      get { return globalAccountState_; }
      set {
        globalAccountState_ = value;
      }
    }

    /// <summary>Field number for the "globalAccountStateReason" field.</summary>
    public const int GlobalAccountStateReasonFieldNumber = 5;
    private global::InfX.GlobalAccountStateReason globalAccountStateReason_ = 0;
    /// <summary>
    ///  TODO: Rename to globalStateReason
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.GlobalAccountStateReason GlobalAccountStateReason {
      get { return globalAccountStateReason_; }
      set {
        globalAccountStateReason_ = value;
      }
    }

    /// <summary>Field number for the "notificationFlags" field.</summary>
    public const int NotificationFlagsFieldNumber = 6;
    private global::InfX.NotificationFlags notificationFlags_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.NotificationFlags NotificationFlags {
      get { return notificationFlags_; }
      set {
        notificationFlags_ = value;
      }
    }

    /// <summary>Field number for the "firebaseToken" field.</summary>
    public const int FirebaseTokenFieldNumber = 7;
    private string firebaseToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirebaseToken {
      get { return firebaseToken_; }
      set {
        firebaseToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataAccountState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataAccountState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      if (AccountId != other.AccountId) return false;
      if (AccountType != other.AccountType) return false;
      if (GlobalAccountState != other.GlobalAccountState) return false;
      if (GlobalAccountStateReason != other.GlobalAccountStateReason) return false;
      if (NotificationFlags != other.NotificationFlags) return false;
      if (FirebaseToken != other.FirebaseToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId != 0) hash ^= DeviceId.GetHashCode();
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      if (AccountType != 0) hash ^= AccountType.GetHashCode();
      if (GlobalAccountState != 0) hash ^= GlobalAccountState.GetHashCode();
      if (GlobalAccountStateReason != 0) hash ^= GlobalAccountStateReason.GetHashCode();
      if (NotificationFlags != 0) hash ^= NotificationFlags.GetHashCode();
      if (FirebaseToken.Length != 0) hash ^= FirebaseToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeviceId);
      }
      if (AccountId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AccountId);
      }
      if (AccountType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AccountType);
      }
      if (GlobalAccountState != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) GlobalAccountState);
      }
      if (GlobalAccountStateReason != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) GlobalAccountStateReason);
      }
      if (NotificationFlags != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) NotificationFlags);
      }
      if (FirebaseToken.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FirebaseToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviceId);
      }
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      if (AccountType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccountType);
      }
      if (GlobalAccountState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GlobalAccountState);
      }
      if (GlobalAccountStateReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GlobalAccountStateReason);
      }
      if (NotificationFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NotificationFlags);
      }
      if (FirebaseToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirebaseToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataAccountState other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      if (other.AccountType != 0) {
        AccountType = other.AccountType;
      }
      if (other.GlobalAccountState != 0) {
        GlobalAccountState = other.GlobalAccountState;
      }
      if (other.GlobalAccountStateReason != 0) {
        GlobalAccountStateReason = other.GlobalAccountStateReason;
      }
      if (other.NotificationFlags != 0) {
        NotificationFlags = other.NotificationFlags;
      }
      if (other.FirebaseToken.Length != 0) {
        FirebaseToken = other.FirebaseToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DeviceId = input.ReadInt32();
            break;
          }
          case 16: {
            AccountId = input.ReadInt32();
            break;
          }
          case 24: {
            accountType_ = (global::InfX.AccountType) input.ReadEnum();
            break;
          }
          case 32: {
            globalAccountState_ = (global::InfX.GlobalAccountState) input.ReadEnum();
            break;
          }
          case 40: {
            globalAccountStateReason_ = (global::InfX.GlobalAccountStateReason) input.ReadEnum();
            break;
          }
          case 48: {
            notificationFlags_ = (global::InfX.NotificationFlags) input.ReadEnum();
            break;
          }
          case 58: {
            FirebaseToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataAccountSummary : pb::IMessage<DataAccountSummary> {
    private static readonly pb::MessageParser<DataAccountSummary> _parser = new pb::MessageParser<DataAccountSummary>(() => new DataAccountSummary());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataAccountSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.DataProtobufReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountSummary(DataAccountSummary other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      location_ = other.location_;
      avatarThumbnailUrl_ = other.avatarThumbnailUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountSummary Clone() {
      return new DataAccountSummary(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 3;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatarThumbnailUrl" field.</summary>
    public const int AvatarThumbnailUrlFieldNumber = 4;
    private string avatarThumbnailUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarThumbnailUrl {
      get { return avatarThumbnailUrl_; }
      set {
        avatarThumbnailUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataAccountSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataAccountSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Location != other.Location) return false;
      if (AvatarThumbnailUrl != other.AvatarThumbnailUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (AvatarThumbnailUrl.Length != 0) hash ^= AvatarThumbnailUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Location);
      }
      if (AvatarThumbnailUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AvatarThumbnailUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (AvatarThumbnailUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarThumbnailUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataAccountSummary other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.AvatarThumbnailUrl.Length != 0) {
        AvatarThumbnailUrl = other.AvatarThumbnailUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            Location = input.ReadString();
            break;
          }
          case 34: {
            AvatarThumbnailUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataAccountDetail : pb::IMessage<DataAccountDetail> {
    private static readonly pb::MessageParser<DataAccountDetail> _parser = new pb::MessageParser<DataAccountDetail>(() => new DataAccountDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataAccountDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.DataProtobufReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountDetail(DataAccountDetail other) : this() {
      categories_ = other.categories_;
      socialMedia_ = other.socialMedia_.Clone();
      avatarCoverUrl_ = other.avatarCoverUrl_;
      url_ = other.url_;
      email_ = other.email_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      locationId_ = other.locationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountDetail Clone() {
      return new DataAccountDetail(this);
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 11;
    private pb::ByteString categories_ = pb::ByteString.Empty;
    /// <summary>
    ///  repeated string coverUrls = 1;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Categories {
      get { return categories_; }
      set {
        categories_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "socialMedia" field.</summary>
    public const int SocialMediaFieldNumber = 3;
    private static readonly pb::FieldCodec<global::InfX.DataSocialMedia> _repeated_socialMedia_codec
        = pb::FieldCodec.ForMessage(26, global::InfX.DataSocialMedia.Parser);
    private readonly pbc::RepeatedField<global::InfX.DataSocialMedia> socialMedia_ = new pbc::RepeatedField<global::InfX.DataSocialMedia>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.DataSocialMedia> SocialMedia {
      get { return socialMedia_; }
    }

    /// <summary>Field number for the "avatarCoverUrl" field.</summary>
    public const int AvatarCoverUrlFieldNumber = 7;
    private string avatarCoverUrl_ = "";
    /// <summary>
    ///  Higher resolution, but same as avatarThumbnailUrl
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarCoverUrl {
      get { return avatarCoverUrl_; }
      set {
        avatarCoverUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 6;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 9;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 4;
    private double latitude_;
    /// <summary>
    ///  bool emailVerified = 10;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 5;
    private double longitude_;
    /// <summary>
    ///  necessary?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "locationId" field.</summary>
    public const int LocationIdFieldNumber = 8;
    private int locationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocationId {
      get { return locationId_; }
      set {
        locationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataAccountDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataAccountDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Categories != other.Categories) return false;
      if(!socialMedia_.Equals(other.socialMedia_)) return false;
      if (AvatarCoverUrl != other.AvatarCoverUrl) return false;
      if (Url != other.Url) return false;
      if (Email != other.Email) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (LocationId != other.LocationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Categories.Length != 0) hash ^= Categories.GetHashCode();
      hash ^= socialMedia_.GetHashCode();
      if (AvatarCoverUrl.Length != 0) hash ^= AvatarCoverUrl.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      if (LocationId != 0) hash ^= LocationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      socialMedia_.WriteTo(output, _repeated_socialMedia_codec);
      if (Latitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Longitude);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Url);
      }
      if (AvatarCoverUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AvatarCoverUrl);
      }
      if (LocationId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LocationId);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Email);
      }
      if (Categories.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(Categories);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Categories.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Categories);
      }
      size += socialMedia_.CalculateSize(_repeated_socialMedia_codec);
      if (AvatarCoverUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarCoverUrl);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (LocationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataAccountDetail other) {
      if (other == null) {
        return;
      }
      if (other.Categories.Length != 0) {
        Categories = other.Categories;
      }
      socialMedia_.Add(other.socialMedia_);
      if (other.AvatarCoverUrl.Length != 0) {
        AvatarCoverUrl = other.AvatarCoverUrl;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.LocationId != 0) {
        LocationId = other.LocationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            socialMedia_.AddEntriesFrom(input, _repeated_socialMedia_codec);
            break;
          }
          case 33: {
            Latitude = input.ReadDouble();
            break;
          }
          case 41: {
            Longitude = input.ReadDouble();
            break;
          }
          case 50: {
            Url = input.ReadString();
            break;
          }
          case 58: {
            AvatarCoverUrl = input.ReadString();
            break;
          }
          case 64: {
            LocationId = input.ReadInt32();
            break;
          }
          case 74: {
            Email = input.ReadString();
            break;
          }
          case 90: {
            Categories = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataAccount : pb::IMessage<DataAccount> {
    private static readonly pb::MessageParser<DataAccount> _parser = new pb::MessageParser<DataAccount>(() => new DataAccount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.DataProtobufReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccount(DataAccount other) : this() {
      State = other.state_ != null ? other.State.Clone() : null;
      Summary = other.summary_ != null ? other.Summary.Clone() : null;
      Detail = other.detail_ != null ? other.Detail.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccount Clone() {
      return new DataAccount(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::InfX.DataAccountState state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.DataAccountState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "summary" field.</summary>
    public const int SummaryFieldNumber = 2;
    private global::InfX.DataAccountSummary summary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.DataAccountSummary Summary {
      get { return summary_; }
      set {
        summary_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 3;
    private global::InfX.DataAccountDetail detail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.DataAccountDetail Detail {
      get { return detail_; }
      set {
        detail_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(State, other.State)) return false;
      if (!object.Equals(Summary, other.Summary)) return false;
      if (!object.Equals(Detail, other.Detail)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (state_ != null) hash ^= State.GetHashCode();
      if (summary_ != null) hash ^= Summary.GetHashCode();
      if (detail_ != null) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (state_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(State);
      }
      if (summary_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Summary);
      }
      if (detail_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (summary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Summary);
      }
      if (detail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataAccount other) {
      if (other == null) {
        return;
      }
      if (other.state_ != null) {
        if (state_ == null) {
          state_ = new global::InfX.DataAccountState();
        }
        State.MergeFrom(other.State);
      }
      if (other.summary_ != null) {
        if (summary_ == null) {
          summary_ = new global::InfX.DataAccountSummary();
        }
        Summary.MergeFrom(other.Summary);
      }
      if (other.detail_ != null) {
        if (detail_ == null) {
          detail_ = new global::InfX.DataAccountDetail();
        }
        Detail.MergeFrom(other.Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (state_ == null) {
              state_ = new global::InfX.DataAccountState();
            }
            input.ReadMessage(state_);
            break;
          }
          case 18: {
            if (summary_ == null) {
              summary_ = new global::InfX.DataAccountSummary();
            }
            input.ReadMessage(summary_);
            break;
          }
          case 26: {
            if (detail_ == null) {
              detail_ = new global::InfX.DataAccountDetail();
            }
            input.ReadMessage(detail_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataApplicant : pb::IMessage<DataApplicant> {
    private static readonly pb::MessageParser<DataApplicant> _parser = new pb::MessageParser<DataApplicant>(() => new DataApplicant());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataApplicant> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.DataProtobufReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataApplicant() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataApplicant(DataApplicant other) : this() {
      applicantId_ = other.applicantId_;
      offerId_ = other.offerId_;
      influencerAccountId_ = other.influencerAccountId_;
      businessAccountId_ = other.businessAccountId_;
      influencerName_ = other.influencerName_;
      businessName_ = other.businessName_;
      offerTitle_ = other.offerTitle_;
      haggleChatId_ = other.haggleChatId_;
      influencerWantsDeal_ = other.influencerWantsDeal_;
      businessWantsDeal_ = other.businessWantsDeal_;
      influencerMarkedDelivered_ = other.influencerMarkedDelivered_;
      influencerMarkedRewarded_ = other.influencerMarkedRewarded_;
      businessMarkedDelivered_ = other.businessMarkedDelivered_;
      businessMarkedRewarded_ = other.businessMarkedRewarded_;
      influencerGaveRating_ = other.influencerGaveRating_;
      businessGaveRating_ = other.businessGaveRating_;
      influencerDisputed_ = other.influencerDisputed_;
      businessDisputed_ = other.businessDisputed_;
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataApplicant Clone() {
      return new DataApplicant(this);
    }

    /// <summary>Field number for the "applicantId" field.</summary>
    public const int ApplicantIdFieldNumber = 1;
    private int applicantId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantId {
      get { return applicantId_; }
      set {
        applicantId_ = value;
      }
    }

    /// <summary>Field number for the "offerId" field.</summary>
    public const int OfferIdFieldNumber = 2;
    private int offerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OfferId {
      get { return offerId_; }
      set {
        offerId_ = value;
      }
    }

    /// <summary>Field number for the "influencerAccountId" field.</summary>
    public const int InfluencerAccountIdFieldNumber = 3;
    private int influencerAccountId_;
    /// <summary>
    ///  Account which applied
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InfluencerAccountId {
      get { return influencerAccountId_; }
      set {
        influencerAccountId_ = value;
      }
    }

    /// <summary>Field number for the "businessAccountId" field.</summary>
    public const int BusinessAccountIdFieldNumber = 16;
    private int businessAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BusinessAccountId {
      get { return businessAccountId_; }
      set {
        businessAccountId_ = value;
      }
    }

    /// <summary>Field number for the "influencerName" field.</summary>
    public const int InfluencerNameFieldNumber = 17;
    private string influencerName_ = "";
    /// <summary>
    /// / Embedded data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InfluencerName {
      get { return influencerName_; }
      set {
        influencerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "businessName" field.</summary>
    public const int BusinessNameFieldNumber = 18;
    private string businessName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BusinessName {
      get { return businessName_; }
      set {
        businessName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offerTitle" field.</summary>
    public const int OfferTitleFieldNumber = 19;
    private string offerTitle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OfferTitle {
      get { return offerTitle_; }
      set {
        offerTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "haggleChatId" field.</summary>
    public const int HaggleChatIdFieldNumber = 4;
    private long haggleChatId_;
    /// <summary>
    /// / Current chat ID with haggle buttons (deliverables / reward / remarks)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HaggleChatId {
      get { return haggleChatId_; }
      set {
        haggleChatId_ = value;
      }
    }

    /// <summary>Field number for the "influencerWantsDeal" field.</summary>
    public const int InfluencerWantsDealFieldNumber = 6;
    private bool influencerWantsDeal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InfluencerWantsDeal {
      get { return influencerWantsDeal_; }
      set {
        influencerWantsDeal_ = value;
      }
    }

    /// <summary>Field number for the "businessWantsDeal" field.</summary>
    public const int BusinessWantsDealFieldNumber = 5;
    private bool businessWantsDeal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BusinessWantsDeal {
      get { return businessWantsDeal_; }
      set {
        businessWantsDeal_ = value;
      }
    }

    /// <summary>Field number for the "influencerMarkedDelivered" field.</summary>
    public const int InfluencerMarkedDeliveredFieldNumber = 7;
    private bool influencerMarkedDelivered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InfluencerMarkedDelivered {
      get { return influencerMarkedDelivered_; }
      set {
        influencerMarkedDelivered_ = value;
      }
    }

    /// <summary>Field number for the "influencerMarkedRewarded" field.</summary>
    public const int InfluencerMarkedRewardedFieldNumber = 8;
    private bool influencerMarkedRewarded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InfluencerMarkedRewarded {
      get { return influencerMarkedRewarded_; }
      set {
        influencerMarkedRewarded_ = value;
      }
    }

    /// <summary>Field number for the "businessMarkedDelivered" field.</summary>
    public const int BusinessMarkedDeliveredFieldNumber = 9;
    private bool businessMarkedDelivered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BusinessMarkedDelivered {
      get { return businessMarkedDelivered_; }
      set {
        businessMarkedDelivered_ = value;
      }
    }

    /// <summary>Field number for the "businessMarkedRewarded" field.</summary>
    public const int BusinessMarkedRewardedFieldNumber = 10;
    private bool businessMarkedRewarded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BusinessMarkedRewarded {
      get { return businessMarkedRewarded_; }
      set {
        businessMarkedRewarded_ = value;
      }
    }

    /// <summary>Field number for the "influencerGaveRating" field.</summary>
    public const int InfluencerGaveRatingFieldNumber = 12;
    private int influencerGaveRating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InfluencerGaveRating {
      get { return influencerGaveRating_; }
      set {
        influencerGaveRating_ = value;
      }
    }

    /// <summary>Field number for the "businessGaveRating" field.</summary>
    public const int BusinessGaveRatingFieldNumber = 11;
    private int businessGaveRating_;
    /// <summary>
    ///  1 to 5, 0 is no rating given (rating given implies complete)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BusinessGaveRating {
      get { return businessGaveRating_; }
      set {
        businessGaveRating_ = value;
      }
    }

    /// <summary>Field number for the "influencerDisputed" field.</summary>
    public const int InfluencerDisputedFieldNumber = 15;
    private bool influencerDisputed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InfluencerDisputed {
      get { return influencerDisputed_; }
      set {
        influencerDisputed_ = value;
      }
    }

    /// <summary>Field number for the "businessDisputed" field.</summary>
    public const int BusinessDisputedFieldNumber = 14;
    private bool businessDisputed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BusinessDisputed {
      get { return businessDisputed_; }
      set {
        businessDisputed_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 13;
    private global::InfX.ApplicantState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.ApplicantState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataApplicant);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataApplicant other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicantId != other.ApplicantId) return false;
      if (OfferId != other.OfferId) return false;
      if (InfluencerAccountId != other.InfluencerAccountId) return false;
      if (BusinessAccountId != other.BusinessAccountId) return false;
      if (InfluencerName != other.InfluencerName) return false;
      if (BusinessName != other.BusinessName) return false;
      if (OfferTitle != other.OfferTitle) return false;
      if (HaggleChatId != other.HaggleChatId) return false;
      if (InfluencerWantsDeal != other.InfluencerWantsDeal) return false;
      if (BusinessWantsDeal != other.BusinessWantsDeal) return false;
      if (InfluencerMarkedDelivered != other.InfluencerMarkedDelivered) return false;
      if (InfluencerMarkedRewarded != other.InfluencerMarkedRewarded) return false;
      if (BusinessMarkedDelivered != other.BusinessMarkedDelivered) return false;
      if (BusinessMarkedRewarded != other.BusinessMarkedRewarded) return false;
      if (InfluencerGaveRating != other.InfluencerGaveRating) return false;
      if (BusinessGaveRating != other.BusinessGaveRating) return false;
      if (InfluencerDisputed != other.InfluencerDisputed) return false;
      if (BusinessDisputed != other.BusinessDisputed) return false;
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicantId != 0) hash ^= ApplicantId.GetHashCode();
      if (OfferId != 0) hash ^= OfferId.GetHashCode();
      if (InfluencerAccountId != 0) hash ^= InfluencerAccountId.GetHashCode();
      if (BusinessAccountId != 0) hash ^= BusinessAccountId.GetHashCode();
      if (InfluencerName.Length != 0) hash ^= InfluencerName.GetHashCode();
      if (BusinessName.Length != 0) hash ^= BusinessName.GetHashCode();
      if (OfferTitle.Length != 0) hash ^= OfferTitle.GetHashCode();
      if (HaggleChatId != 0L) hash ^= HaggleChatId.GetHashCode();
      if (InfluencerWantsDeal != false) hash ^= InfluencerWantsDeal.GetHashCode();
      if (BusinessWantsDeal != false) hash ^= BusinessWantsDeal.GetHashCode();
      if (InfluencerMarkedDelivered != false) hash ^= InfluencerMarkedDelivered.GetHashCode();
      if (InfluencerMarkedRewarded != false) hash ^= InfluencerMarkedRewarded.GetHashCode();
      if (BusinessMarkedDelivered != false) hash ^= BusinessMarkedDelivered.GetHashCode();
      if (BusinessMarkedRewarded != false) hash ^= BusinessMarkedRewarded.GetHashCode();
      if (InfluencerGaveRating != 0) hash ^= InfluencerGaveRating.GetHashCode();
      if (BusinessGaveRating != 0) hash ^= BusinessGaveRating.GetHashCode();
      if (InfluencerDisputed != false) hash ^= InfluencerDisputed.GetHashCode();
      if (BusinessDisputed != false) hash ^= BusinessDisputed.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicantId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ApplicantId);
      }
      if (OfferId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OfferId);
      }
      if (InfluencerAccountId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(InfluencerAccountId);
      }
      if (HaggleChatId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(HaggleChatId);
      }
      if (BusinessWantsDeal != false) {
        output.WriteRawTag(40);
        output.WriteBool(BusinessWantsDeal);
      }
      if (InfluencerWantsDeal != false) {
        output.WriteRawTag(48);
        output.WriteBool(InfluencerWantsDeal);
      }
      if (InfluencerMarkedDelivered != false) {
        output.WriteRawTag(56);
        output.WriteBool(InfluencerMarkedDelivered);
      }
      if (InfluencerMarkedRewarded != false) {
        output.WriteRawTag(64);
        output.WriteBool(InfluencerMarkedRewarded);
      }
      if (BusinessMarkedDelivered != false) {
        output.WriteRawTag(72);
        output.WriteBool(BusinessMarkedDelivered);
      }
      if (BusinessMarkedRewarded != false) {
        output.WriteRawTag(80);
        output.WriteBool(BusinessMarkedRewarded);
      }
      if (BusinessGaveRating != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(BusinessGaveRating);
      }
      if (InfluencerGaveRating != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(InfluencerGaveRating);
      }
      if (State != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) State);
      }
      if (BusinessDisputed != false) {
        output.WriteRawTag(112);
        output.WriteBool(BusinessDisputed);
      }
      if (InfluencerDisputed != false) {
        output.WriteRawTag(120);
        output.WriteBool(InfluencerDisputed);
      }
      if (BusinessAccountId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(BusinessAccountId);
      }
      if (InfluencerName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(InfluencerName);
      }
      if (BusinessName.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(BusinessName);
      }
      if (OfferTitle.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(OfferTitle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicantId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicantId);
      }
      if (OfferId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfferId);
      }
      if (InfluencerAccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InfluencerAccountId);
      }
      if (BusinessAccountId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BusinessAccountId);
      }
      if (InfluencerName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InfluencerName);
      }
      if (BusinessName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BusinessName);
      }
      if (OfferTitle.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OfferTitle);
      }
      if (HaggleChatId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HaggleChatId);
      }
      if (InfluencerWantsDeal != false) {
        size += 1 + 1;
      }
      if (BusinessWantsDeal != false) {
        size += 1 + 1;
      }
      if (InfluencerMarkedDelivered != false) {
        size += 1 + 1;
      }
      if (InfluencerMarkedRewarded != false) {
        size += 1 + 1;
      }
      if (BusinessMarkedDelivered != false) {
        size += 1 + 1;
      }
      if (BusinessMarkedRewarded != false) {
        size += 1 + 1;
      }
      if (InfluencerGaveRating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InfluencerGaveRating);
      }
      if (BusinessGaveRating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BusinessGaveRating);
      }
      if (InfluencerDisputed != false) {
        size += 1 + 1;
      }
      if (BusinessDisputed != false) {
        size += 1 + 1;
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataApplicant other) {
      if (other == null) {
        return;
      }
      if (other.ApplicantId != 0) {
        ApplicantId = other.ApplicantId;
      }
      if (other.OfferId != 0) {
        OfferId = other.OfferId;
      }
      if (other.InfluencerAccountId != 0) {
        InfluencerAccountId = other.InfluencerAccountId;
      }
      if (other.BusinessAccountId != 0) {
        BusinessAccountId = other.BusinessAccountId;
      }
      if (other.InfluencerName.Length != 0) {
        InfluencerName = other.InfluencerName;
      }
      if (other.BusinessName.Length != 0) {
        BusinessName = other.BusinessName;
      }
      if (other.OfferTitle.Length != 0) {
        OfferTitle = other.OfferTitle;
      }
      if (other.HaggleChatId != 0L) {
        HaggleChatId = other.HaggleChatId;
      }
      if (other.InfluencerWantsDeal != false) {
        InfluencerWantsDeal = other.InfluencerWantsDeal;
      }
      if (other.BusinessWantsDeal != false) {
        BusinessWantsDeal = other.BusinessWantsDeal;
      }
      if (other.InfluencerMarkedDelivered != false) {
        InfluencerMarkedDelivered = other.InfluencerMarkedDelivered;
      }
      if (other.InfluencerMarkedRewarded != false) {
        InfluencerMarkedRewarded = other.InfluencerMarkedRewarded;
      }
      if (other.BusinessMarkedDelivered != false) {
        BusinessMarkedDelivered = other.BusinessMarkedDelivered;
      }
      if (other.BusinessMarkedRewarded != false) {
        BusinessMarkedRewarded = other.BusinessMarkedRewarded;
      }
      if (other.InfluencerGaveRating != 0) {
        InfluencerGaveRating = other.InfluencerGaveRating;
      }
      if (other.BusinessGaveRating != 0) {
        BusinessGaveRating = other.BusinessGaveRating;
      }
      if (other.InfluencerDisputed != false) {
        InfluencerDisputed = other.InfluencerDisputed;
      }
      if (other.BusinessDisputed != false) {
        BusinessDisputed = other.BusinessDisputed;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicantId = input.ReadInt32();
            break;
          }
          case 16: {
            OfferId = input.ReadInt32();
            break;
          }
          case 24: {
            InfluencerAccountId = input.ReadInt32();
            break;
          }
          case 32: {
            HaggleChatId = input.ReadInt64();
            break;
          }
          case 40: {
            BusinessWantsDeal = input.ReadBool();
            break;
          }
          case 48: {
            InfluencerWantsDeal = input.ReadBool();
            break;
          }
          case 56: {
            InfluencerMarkedDelivered = input.ReadBool();
            break;
          }
          case 64: {
            InfluencerMarkedRewarded = input.ReadBool();
            break;
          }
          case 72: {
            BusinessMarkedDelivered = input.ReadBool();
            break;
          }
          case 80: {
            BusinessMarkedRewarded = input.ReadBool();
            break;
          }
          case 88: {
            BusinessGaveRating = input.ReadInt32();
            break;
          }
          case 96: {
            InfluencerGaveRating = input.ReadInt32();
            break;
          }
          case 104: {
            state_ = (global::InfX.ApplicantState) input.ReadEnum();
            break;
          }
          case 112: {
            BusinessDisputed = input.ReadBool();
            break;
          }
          case 120: {
            InfluencerDisputed = input.ReadBool();
            break;
          }
          case 128: {
            BusinessAccountId = input.ReadInt32();
            break;
          }
          case 138: {
            InfluencerName = input.ReadString();
            break;
          }
          case 146: {
            BusinessName = input.ReadString();
            break;
          }
          case 154: {
            OfferTitle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataApplicantChat : pb::IMessage<DataApplicantChat> {
    private static readonly pb::MessageParser<DataApplicantChat> _parser = new pb::MessageParser<DataApplicantChat>(() => new DataApplicantChat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataApplicantChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.DataProtobufReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataApplicantChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataApplicantChat(DataApplicantChat other) : this() {
      chatId_ = other.chatId_;
      sent_ = other.sent_;
      senderId_ = other.senderId_;
      applicantId_ = other.applicantId_;
      deviceId_ = other.deviceId_;
      deviceGhostId_ = other.deviceGhostId_;
      type_ = other.type_;
      text_ = other.text_;
      seen_ = other.seen_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataApplicantChat Clone() {
      return new DataApplicantChat(this);
    }

    /// <summary>Field number for the "chatId" field.</summary>
    public const int ChatIdFieldNumber = 7;
    private long chatId_;
    /// <summary>
    ///  Sequential identifier in the chat stream
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ChatId {
      get { return chatId_; }
      set {
        chatId_ = value;
      }
    }

    /// <summary>Field number for the "sent" field.</summary>
    public const int SentFieldNumber = 10;
    private long sent_;
    /// <summary>
    ///  Sent timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Sent {
      get { return sent_; }
      set {
        sent_ = value;
      }
    }

    /// <summary>Field number for the "senderId" field.</summary>
    public const int SenderIdFieldNumber = 2;
    private int senderId_;
    /// <summary>
    ///  Account which sent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SenderId {
      get { return senderId_; }
      set {
        senderId_ = value;
      }
    }

    /// <summary>Field number for the "applicantId" field.</summary>
    public const int ApplicantIdFieldNumber = 1;
    private int applicantId_;
    /// <summary>
    ///  One chat per applicant
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantId {
      get { return applicantId_; }
      set {
        applicantId_ = value;
      }
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 11;
    private int deviceId_;
    /// <summary>
    ///  Cleared upon forwarding
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = value;
      }
    }

    /// <summary>Field number for the "deviceGhostId" field.</summary>
    public const int DeviceGhostIdFieldNumber = 6;
    private int deviceGhostId_;
    /// <summary>
    ///  Deduplication client-side (ghost entry)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeviceGhostId {
      get { return deviceGhostId_; }
      set {
        deviceGhostId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 8;
    private global::InfX.ApplicantChatType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.ApplicantChatType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 5;
    private string text_ = "";
    /// <summary>
    ///  The written text
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seen" field.</summary>
    public const int SeenFieldNumber = 9;
    private long seen_;
    /// <summary>
    ///  0 if not seen
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Seen {
      get { return seen_; }
      set {
        seen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataApplicantChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataApplicantChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatId != other.ChatId) return false;
      if (Sent != other.Sent) return false;
      if (SenderId != other.SenderId) return false;
      if (ApplicantId != other.ApplicantId) return false;
      if (DeviceId != other.DeviceId) return false;
      if (DeviceGhostId != other.DeviceGhostId) return false;
      if (Type != other.Type) return false;
      if (Text != other.Text) return false;
      if (Seen != other.Seen) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChatId != 0L) hash ^= ChatId.GetHashCode();
      if (Sent != 0L) hash ^= Sent.GetHashCode();
      if (SenderId != 0) hash ^= SenderId.GetHashCode();
      if (ApplicantId != 0) hash ^= ApplicantId.GetHashCode();
      if (DeviceId != 0) hash ^= DeviceId.GetHashCode();
      if (DeviceGhostId != 0) hash ^= DeviceGhostId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (Seen != 0L) hash ^= Seen.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicantId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ApplicantId);
      }
      if (SenderId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SenderId);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Text);
      }
      if (DeviceGhostId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DeviceGhostId);
      }
      if (ChatId != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ChatId);
      }
      if (Type != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Type);
      }
      if (Seen != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Seen);
      }
      if (Sent != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Sent);
      }
      if (DeviceId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(DeviceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChatId);
      }
      if (Sent != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sent);
      }
      if (SenderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SenderId);
      }
      if (ApplicantId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicantId);
      }
      if (DeviceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviceId);
      }
      if (DeviceGhostId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviceGhostId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Seen != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seen);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataApplicantChat other) {
      if (other == null) {
        return;
      }
      if (other.ChatId != 0L) {
        ChatId = other.ChatId;
      }
      if (other.Sent != 0L) {
        Sent = other.Sent;
      }
      if (other.SenderId != 0) {
        SenderId = other.SenderId;
      }
      if (other.ApplicantId != 0) {
        ApplicantId = other.ApplicantId;
      }
      if (other.DeviceId != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.DeviceGhostId != 0) {
        DeviceGhostId = other.DeviceGhostId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Seen != 0L) {
        Seen = other.Seen;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicantId = input.ReadInt32();
            break;
          }
          case 16: {
            SenderId = input.ReadInt32();
            break;
          }
          case 42: {
            Text = input.ReadString();
            break;
          }
          case 48: {
            DeviceGhostId = input.ReadInt32();
            break;
          }
          case 56: {
            ChatId = input.ReadInt64();
            break;
          }
          case 64: {
            type_ = (global::InfX.ApplicantChatType) input.ReadEnum();
            break;
          }
          case 72: {
            Seen = input.ReadInt64();
            break;
          }
          case 80: {
            Sent = input.ReadInt64();
            break;
          }
          case 88: {
            DeviceId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
