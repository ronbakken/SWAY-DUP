// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net_ident_protobuf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace InfX {

  /// <summary>Holder for reflection information generated from net_ident_protobuf.proto</summary>
  public static partial class NetIdentProtobufReflection {

    #region Descriptor
    /// <summary>File descriptor for net_ident_protobuf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NetIdentProtobufReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhuZXRfaWRlbnRfcHJvdG9idWYucHJvdG8SA2luZhoTZW51bV9wcm90b2J1",
            "Zi5wcm90bxoTZGF0YV9wcm90b2J1Zi5wcm90byJcChZOZXREZXZpY2VBdXRo",
            "Q3JlYXRlUmVxEg4KBmFlc0tleRgBIAEoDBIWCg5jb21tb25EZXZpY2VJZBgE",
            "IAEoDBIMCgRuYW1lGAIgASgJEgwKBGluZm8YAyABKAkiLQoZTmV0RGV2aWNl",
            "QXV0aENoYWxsZW5nZVJlcRIQCghkZXZpY2VJZBgBIAEoBSIxChxOZXREZXZp",
            "Y2VBdXRoQ2hhbGxlbmdlUmVzUmVxEhEKCWNoYWxsZW5nZRgBIAEoDCIxChxO",
            "ZXREZXZpY2VBdXRoU2lnbmF0dXJlUmVzUmVxEhEKCXNpZ25hdHVyZRgBIAEo",
            "DCI0ChJOZXREZXZpY2VBdXRoU3RhdGUSHgoEZGF0YRgIIAEoCzIQLmluZi5E",
            "YXRhQWNjb3VudCI6ChFOZXRTZXRBY2NvdW50VHlwZRIlCgthY2NvdW50VHlw",
            "ZRgBIAEoDjIQLmluZi5BY2NvdW50VHlwZSJGChNOZXRTZXRGaXJlYmFzZVRv",
            "a2VuEhUKDWZpcmViYXNlVG9rZW4YASABKAkSGAoQb2xkRmlyZWJhc2VUb2tl",
            "bhgCIAEoCSInCg5OZXRPQXV0aFVybFJlcRIVCg1vYXV0aFByb3ZpZGVyGAEg",
            "ASgFIjYKDk5ldE9BdXRoVXJsUmVzEg8KB2F1dGhVcmwYASABKAkSEwoLY2Fs",
            "bGJhY2tVcmwYAiABKAkiQgoSTmV0T0F1dGhDb25uZWN0UmVxEhUKDW9hdXRo",
            "UHJvdmlkZXIYASABKAUSFQoNY2FsbGJhY2tRdWVyeRgCIAEoCSI/ChJOZXRP",
            "QXV0aENvbm5lY3RSZXMSKQoLc29jaWFsTWVkaWEYASABKAsyFC5pbmYuRGF0",
            "YVNvY2lhbE1lZGlhIjoKE05ldEFjY291bnRDcmVhdGVSZXESEAoIbGF0aXR1",
            "ZGUYAiABKAESEQoJbG9uZ2l0dWRlGAMgASgBQgeqAgRJbmZYYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::InfX.EnumProtobufReflection.Descriptor, global::InfX.DataProtobufReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetDeviceAuthCreateReq), global::InfX.NetDeviceAuthCreateReq.Parser, new[]{ "AesKey", "CommonDeviceId", "Name", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetDeviceAuthChallengeReq), global::InfX.NetDeviceAuthChallengeReq.Parser, new[]{ "DeviceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetDeviceAuthChallengeResReq), global::InfX.NetDeviceAuthChallengeResReq.Parser, new[]{ "Challenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetDeviceAuthSignatureResReq), global::InfX.NetDeviceAuthSignatureResReq.Parser, new[]{ "Signature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetDeviceAuthState), global::InfX.NetDeviceAuthState.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetSetAccountType), global::InfX.NetSetAccountType.Parser, new[]{ "AccountType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetSetFirebaseToken), global::InfX.NetSetFirebaseToken.Parser, new[]{ "FirebaseToken", "OldFirebaseToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetOAuthUrlReq), global::InfX.NetOAuthUrlReq.Parser, new[]{ "OauthProvider" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetOAuthUrlRes), global::InfX.NetOAuthUrlRes.Parser, new[]{ "AuthUrl", "CallbackUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetOAuthConnectReq), global::InfX.NetOAuthConnectReq.Parser, new[]{ "OauthProvider", "CallbackQuery" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetOAuthConnectRes), global::InfX.NetOAuthConnectRes.Parser, new[]{ "SocialMedia" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetAccountCreateReq), global::InfX.NetAccountCreateReq.Parser, new[]{ "Latitude", "Longitude" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Sends some info from https://pub.dartlang.org/packages/device_info#-readme-tab-
  ///  Name: DA_CREAT
  ///  Response: NetDeviceAuthState
  /// </summary>
  public sealed partial class NetDeviceAuthCreateReq : pb::IMessage<NetDeviceAuthCreateReq> {
    private static readonly pb::MessageParser<NetDeviceAuthCreateReq> _parser = new pb::MessageParser<NetDeviceAuthCreateReq>(() => new NetDeviceAuthCreateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetDeviceAuthCreateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetIdentProtobufReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthCreateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthCreateReq(NetDeviceAuthCreateReq other) : this() {
      aesKey_ = other.aesKey_;
      commonDeviceId_ = other.commonDeviceId_;
      name_ = other.name_;
      info_ = other.info_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthCreateReq Clone() {
      return new NetDeviceAuthCreateReq(this);
    }

    /// <summary>Field number for the "aesKey" field.</summary>
    public const int AesKeyFieldNumber = 1;
    private pb::ByteString aesKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  Public key for future authentication (AES-256)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AesKey {
      get { return aesKey_; }
      set {
        aesKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "commonDeviceId" field.</summary>
    public const int CommonDeviceIdFieldNumber = 4;
    private pb::ByteString commonDeviceId_ = pb::ByteString.Empty;
    /// <summary>
    ///  Common identifier for the device in case of multiple accounts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CommonDeviceId {
      get { return commonDeviceId_; }
      set {
        commonDeviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///  Device information for developers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private string info_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetDeviceAuthCreateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetDeviceAuthCreateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AesKey != other.AesKey) return false;
      if (CommonDeviceId != other.CommonDeviceId) return false;
      if (Name != other.Name) return false;
      if (Info != other.Info) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AesKey.Length != 0) hash ^= AesKey.GetHashCode();
      if (CommonDeviceId.Length != 0) hash ^= CommonDeviceId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AesKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(AesKey);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Info);
      }
      if (CommonDeviceId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(CommonDeviceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AesKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AesKey);
      }
      if (CommonDeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CommonDeviceId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetDeviceAuthCreateReq other) {
      if (other == null) {
        return;
      }
      if (other.AesKey.Length != 0) {
        AesKey = other.AesKey;
      }
      if (other.CommonDeviceId.Length != 0) {
        CommonDeviceId = other.CommonDeviceId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AesKey = input.ReadBytes();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Info = input.ReadString();
            break;
          }
          case 34: {
            CommonDeviceId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Device requires an authentication challenge
  ///  Name: DA_CHALL
  ///  Response: NetDevAuthChallengeResReq
  /// </summary>
  public sealed partial class NetDeviceAuthChallengeReq : pb::IMessage<NetDeviceAuthChallengeReq> {
    private static readonly pb::MessageParser<NetDeviceAuthChallengeReq> _parser = new pb::MessageParser<NetDeviceAuthChallengeReq>(() => new NetDeviceAuthChallengeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetDeviceAuthChallengeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetIdentProtobufReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthChallengeReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthChallengeReq(NetDeviceAuthChallengeReq other) : this() {
      deviceId_ = other.deviceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthChallengeReq Clone() {
      return new NetDeviceAuthChallengeReq(this);
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private int deviceId_;
    /// <summary>
    ///  Id of the device that wants to authenticate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetDeviceAuthChallengeReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetDeviceAuthChallengeReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId != 0) hash ^= DeviceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeviceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetDeviceAuthChallengeReq other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId != 0) {
        DeviceId = other.DeviceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DeviceId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Server supplies challenge for the device
  ///  Name: DA_R_CHA
  ///  Response: NetDeviceAuthSignatureResReq
  /// </summary>
  public sealed partial class NetDeviceAuthChallengeResReq : pb::IMessage<NetDeviceAuthChallengeResReq> {
    private static readonly pb::MessageParser<NetDeviceAuthChallengeResReq> _parser = new pb::MessageParser<NetDeviceAuthChallengeResReq>(() => new NetDeviceAuthChallengeResReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetDeviceAuthChallengeResReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetIdentProtobufReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthChallengeResReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthChallengeResReq(NetDeviceAuthChallengeResReq other) : this() {
      challenge_ = other.challenge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthChallengeResReq Clone() {
      return new NetDeviceAuthChallengeResReq(this);
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 1;
    private pb::ByteString challenge_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Challenge {
      get { return challenge_; }
      set {
        challenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetDeviceAuthChallengeResReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetDeviceAuthChallengeResReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Challenge != other.Challenge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Challenge.Length != 0) hash ^= Challenge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Challenge.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Challenge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Challenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Challenge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetDeviceAuthChallengeResReq other) {
      if (other == null) {
        return;
      }
      if (other.Challenge.Length != 0) {
        Challenge = other.Challenge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Challenge = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  App completes the challenge
  ///  Name: DA_R_SIG
  ///  Response: NetDeviceAuthState
  /// </summary>
  public sealed partial class NetDeviceAuthSignatureResReq : pb::IMessage<NetDeviceAuthSignatureResReq> {
    private static readonly pb::MessageParser<NetDeviceAuthSignatureResReq> _parser = new pb::MessageParser<NetDeviceAuthSignatureResReq>(() => new NetDeviceAuthSignatureResReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetDeviceAuthSignatureResReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetIdentProtobufReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthSignatureResReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthSignatureResReq(NetDeviceAuthSignatureResReq other) : this() {
      signature_ = other.signature_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthSignatureResReq Clone() {
      return new NetDeviceAuthSignatureResReq(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetDeviceAuthSignatureResReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetDeviceAuthSignatureResReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetDeviceAuthSignatureResReq other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Create or auth result
  ///  Name: DA_STATE
  /// </summary>
  public sealed partial class NetDeviceAuthState : pb::IMessage<NetDeviceAuthState> {
    private static readonly pb::MessageParser<NetDeviceAuthState> _parser = new pb::MessageParser<NetDeviceAuthState>(() => new NetDeviceAuthState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetDeviceAuthState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetIdentProtobufReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthState(NetDeviceAuthState other) : this() {
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthState Clone() {
      return new NetDeviceAuthState(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 8;
    private global::InfX.DataAccount data_;
    /// <summary>
    /// / Whole account data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.DataAccount Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetDeviceAuthState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetDeviceAuthState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetDeviceAuthState other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::InfX.DataAccount();
        }
        Data.MergeFrom(other.Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 66: {
            if (data_ == null) {
              data_ = new global::InfX.DataAccount();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  App requests the server to set the account type
  ///  Special case when going backwards in the onboarding process
  ///  Valid when account_id == 0
  ///  Removes all OAuth associated with the device
  ///  Name: A_SETTYP
  /// </summary>
  public sealed partial class NetSetAccountType : pb::IMessage<NetSetAccountType> {
    private static readonly pb::MessageParser<NetSetAccountType> _parser = new pb::MessageParser<NetSetAccountType>(() => new NetSetAccountType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetSetAccountType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetIdentProtobufReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetSetAccountType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetSetAccountType(NetSetAccountType other) : this() {
      accountType_ = other.accountType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetSetAccountType Clone() {
      return new NetSetAccountType(this);
    }

    /// <summary>Field number for the "accountType" field.</summary>
    public const int AccountTypeFieldNumber = 1;
    private global::InfX.AccountType accountType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.AccountType AccountType {
      get { return accountType_; }
      set {
        accountType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetSetAccountType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetSetAccountType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountType != other.AccountType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountType != 0) hash ^= AccountType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AccountType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccountType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetSetAccountType other) {
      if (other == null) {
        return;
      }
      if (other.AccountType != 0) {
        AccountType = other.AccountType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            accountType_ = (global::InfX.AccountType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  App sets device firebase messaging token
  ///  Name: SFIREBAT
  /// </summary>
  public sealed partial class NetSetFirebaseToken : pb::IMessage<NetSetFirebaseToken> {
    private static readonly pb::MessageParser<NetSetFirebaseToken> _parser = new pb::MessageParser<NetSetFirebaseToken>(() => new NetSetFirebaseToken());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetSetFirebaseToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetIdentProtobufReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetSetFirebaseToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetSetFirebaseToken(NetSetFirebaseToken other) : this() {
      firebaseToken_ = other.firebaseToken_;
      oldFirebaseToken_ = other.oldFirebaseToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetSetFirebaseToken Clone() {
      return new NetSetFirebaseToken(this);
    }

    /// <summary>Field number for the "firebaseToken" field.</summary>
    public const int FirebaseTokenFieldNumber = 1;
    private string firebaseToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirebaseToken {
      get { return firebaseToken_; }
      set {
        firebaseToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oldFirebaseToken" field.</summary>
    public const int OldFirebaseTokenFieldNumber = 2;
    private string oldFirebaseToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OldFirebaseToken {
      get { return oldFirebaseToken_; }
      set {
        oldFirebaseToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetSetFirebaseToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetSetFirebaseToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FirebaseToken != other.FirebaseToken) return false;
      if (OldFirebaseToken != other.OldFirebaseToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FirebaseToken.Length != 0) hash ^= FirebaseToken.GetHashCode();
      if (OldFirebaseToken.Length != 0) hash ^= OldFirebaseToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FirebaseToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FirebaseToken);
      }
      if (OldFirebaseToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OldFirebaseToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FirebaseToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirebaseToken);
      }
      if (OldFirebaseToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OldFirebaseToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetSetFirebaseToken other) {
      if (other == null) {
        return;
      }
      if (other.FirebaseToken.Length != 0) {
        FirebaseToken = other.FirebaseToken;
      }
      if (other.OldFirebaseToken.Length != 0) {
        OldFirebaseToken = other.OldFirebaseToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FirebaseToken = input.ReadString();
            break;
          }
          case 18: {
            OldFirebaseToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  App requests OAuth url
  ///  Name: OA_URLRE
  ///  Response: NetOAuthUrlRes
  /// </summary>
  public sealed partial class NetOAuthUrlReq : pb::IMessage<NetOAuthUrlReq> {
    private static readonly pb::MessageParser<NetOAuthUrlReq> _parser = new pb::MessageParser<NetOAuthUrlReq>(() => new NetOAuthUrlReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetOAuthUrlReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetIdentProtobufReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthUrlReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthUrlReq(NetOAuthUrlReq other) : this() {
      oauthProvider_ = other.oauthProvider_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthUrlReq Clone() {
      return new NetOAuthUrlReq(this);
    }

    /// <summary>Field number for the "oauthProvider" field.</summary>
    public const int OauthProviderFieldNumber = 1;
    private int oauthProvider_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OauthProvider {
      get { return oauthProvider_; }
      set {
        oauthProvider_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetOAuthUrlReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetOAuthUrlReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OauthProvider != other.OauthProvider) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OauthProvider != 0) hash ^= OauthProvider.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OauthProvider != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OauthProvider);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OauthProvider != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OauthProvider);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetOAuthUrlReq other) {
      if (other == null) {
        return;
      }
      if (other.OauthProvider != 0) {
        OauthProvider = other.OauthProvider;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OauthProvider = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  App requests OAuth url
  ///  Name: OA_R_URL
  ///  Response: NetOAuthUrlRes
  /// </summary>
  public sealed partial class NetOAuthUrlRes : pb::IMessage<NetOAuthUrlRes> {
    private static readonly pb::MessageParser<NetOAuthUrlRes> _parser = new pb::MessageParser<NetOAuthUrlRes>(() => new NetOAuthUrlRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetOAuthUrlRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetIdentProtobufReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthUrlRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthUrlRes(NetOAuthUrlRes other) : this() {
      authUrl_ = other.authUrl_;
      callbackUrl_ = other.callbackUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthUrlRes Clone() {
      return new NetOAuthUrlRes(this);
    }

    /// <summary>Field number for the "authUrl" field.</summary>
    public const int AuthUrlFieldNumber = 1;
    private string authUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthUrl {
      get { return authUrl_; }
      set {
        authUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "callbackUrl" field.</summary>
    public const int CallbackUrlFieldNumber = 2;
    private string callbackUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallbackUrl {
      get { return callbackUrl_; }
      set {
        callbackUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetOAuthUrlRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetOAuthUrlRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AuthUrl != other.AuthUrl) return false;
      if (CallbackUrl != other.CallbackUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AuthUrl.Length != 0) hash ^= AuthUrl.GetHashCode();
      if (CallbackUrl.Length != 0) hash ^= CallbackUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AuthUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AuthUrl);
      }
      if (CallbackUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CallbackUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AuthUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthUrl);
      }
      if (CallbackUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallbackUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetOAuthUrlRes other) {
      if (other == null) {
        return;
      }
      if (other.AuthUrl.Length != 0) {
        AuthUrl = other.AuthUrl;
      }
      if (other.CallbackUrl.Length != 0) {
        CallbackUrl = other.CallbackUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AuthUrl = input.ReadString();
            break;
          }
          case 18: {
            CallbackUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  App adds another OAuth provider to the account
  ///  Name: OA_CONNE
  ///  Response: NetOAuthConnectRes
  /// </summary>
  public sealed partial class NetOAuthConnectReq : pb::IMessage<NetOAuthConnectReq> {
    private static readonly pb::MessageParser<NetOAuthConnectReq> _parser = new pb::MessageParser<NetOAuthConnectReq>(() => new NetOAuthConnectReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetOAuthConnectReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetIdentProtobufReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthConnectReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthConnectReq(NetOAuthConnectReq other) : this() {
      oauthProvider_ = other.oauthProvider_;
      callbackQuery_ = other.callbackQuery_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthConnectReq Clone() {
      return new NetOAuthConnectReq(this);
    }

    /// <summary>Field number for the "oauthProvider" field.</summary>
    public const int OauthProviderFieldNumber = 1;
    private int oauthProvider_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OauthProvider {
      get { return oauthProvider_; }
      set {
        oauthProvider_ = value;
      }
    }

    /// <summary>Field number for the "callbackQuery" field.</summary>
    public const int CallbackQueryFieldNumber = 2;
    private string callbackQuery_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallbackQuery {
      get { return callbackQuery_; }
      set {
        callbackQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetOAuthConnectReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetOAuthConnectReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OauthProvider != other.OauthProvider) return false;
      if (CallbackQuery != other.CallbackQuery) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OauthProvider != 0) hash ^= OauthProvider.GetHashCode();
      if (CallbackQuery.Length != 0) hash ^= CallbackQuery.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OauthProvider != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OauthProvider);
      }
      if (CallbackQuery.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CallbackQuery);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OauthProvider != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OauthProvider);
      }
      if (CallbackQuery.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallbackQuery);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetOAuthConnectReq other) {
      if (other == null) {
        return;
      }
      if (other.OauthProvider != 0) {
        OauthProvider = other.OauthProvider;
      }
      if (other.CallbackQuery.Length != 0) {
        CallbackQuery = other.CallbackQuery;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OauthProvider = input.ReadInt32();
            break;
          }
          case 18: {
            CallbackQuery = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  OAuth addition result
  ///  Name: OA_R_CON
  /// </summary>
  public sealed partial class NetOAuthConnectRes : pb::IMessage<NetOAuthConnectRes> {
    private static readonly pb::MessageParser<NetOAuthConnectRes> _parser = new pb::MessageParser<NetOAuthConnectRes>(() => new NetOAuthConnectRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetOAuthConnectRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetIdentProtobufReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthConnectRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthConnectRes(NetOAuthConnectRes other) : this() {
      SocialMedia = other.socialMedia_ != null ? other.SocialMedia.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthConnectRes Clone() {
      return new NetOAuthConnectRes(this);
    }

    /// <summary>Field number for the "socialMedia" field.</summary>
    public const int SocialMediaFieldNumber = 1;
    private global::InfX.DataSocialMedia socialMedia_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.DataSocialMedia SocialMedia {
      get { return socialMedia_; }
      set {
        socialMedia_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetOAuthConnectRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetOAuthConnectRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SocialMedia, other.SocialMedia)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (socialMedia_ != null) hash ^= SocialMedia.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (socialMedia_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SocialMedia);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (socialMedia_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SocialMedia);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetOAuthConnectRes other) {
      if (other == null) {
        return;
      }
      if (other.socialMedia_ != null) {
        if (socialMedia_ == null) {
          socialMedia_ = new global::InfX.DataSocialMedia();
        }
        SocialMedia.MergeFrom(other.SocialMedia);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (socialMedia_ == null) {
              socialMedia_ = new global::InfX.DataSocialMedia();
            }
            input.ReadMessage(socialMedia_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Create account
  ///  Response: NetDeviceAuthState
  ///  Name: A_CREATE
  /// </summary>
  public sealed partial class NetAccountCreateReq : pb::IMessage<NetAccountCreateReq> {
    private static readonly pb::MessageParser<NetAccountCreateReq> _parser = new pb::MessageParser<NetAccountCreateReq>(() => new NetAccountCreateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetAccountCreateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetIdentProtobufReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetAccountCreateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetAccountCreateReq(NetAccountCreateReq other) : this() {
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetAccountCreateReq Clone() {
      return new NetAccountCreateReq(this);
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 2;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 3;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetAccountCreateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetAccountCreateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Latitude != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Longitude);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetAccountCreateReq other) {
      if (other == null) {
        return;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 17: {
            Latitude = input.ReadDouble();
            break;
          }
          case 25: {
            Longitude = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
