// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net_applicants_protobuf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace InfX {

  /// <summary>Holder for reflection information generated from net_applicants_protobuf.proto</summary>
  public static partial class NetApplicantsProtobufReflection {

    #region Descriptor
    /// <summary>File descriptor for net_applicants_protobuf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NetApplicantsProtobufReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1uZXRfYXBwbGljYW50c19wcm90b2J1Zi5wcm90bxIDaW5mGhNkYXRhX3By",
            "b3RvYnVmLnByb3RvIlUKFE5ldExvYWRBcHBsaWNhbnRzUmVxEg8KB29mZmVy",
            "SWQYBCABKAUSDgoGYmVmb3JlGAEgASgFEg0KBWFmdGVyGAIgASgFEg0KBWxp",
            "bWl0GAMgASgFIioKE05ldExvYWRBcHBsaWNhbnRSZXESEwoLYXBwbGljYW50",
            "SWQYASABKAUiXQoYTmV0TG9hZEFwcGxpY2FudENoYXRzUmVxEhMKC2FwcGxp",
            "Y2FudElkGAUgASgFEg4KBmJlZm9yZRgBIAEoBRINCgVhZnRlchgCIAEoBRIN",
            "CgVsaW1pdBgDIAEoBSJICgxOZXRDaGF0UGxhaW4SEwoLYXBwbGljYW50SWQY",
            "ASABKAUSFQoNZGV2aWNlR2hvc3RJZBgIIAEoBRIMCgR0ZXh0GAYgASgJInIK",
            "DU5ldENoYXRIYWdnbGUSEwoLYXBwbGljYW50SWQYASABKAUSFQoNZGV2aWNl",
            "R2hvc3RJZBgIIAEoBRIUCgxkZWxpdmVyYWJsZXMYAyABKAkSDgoGcmV3YXJk",
            "GAQgASgJEg8KB3JlbWFya3MYAiABKAkiTwoPTmV0Q2hhdEltYWdlS2V5EhMK",
            "C2FwcGxpY2FudElkGAEgASgFEhUKDWRldmljZUdob3N0SWQYCCABKAUSEAoI",
            "aW1hZ2VLZXkYBSABKAkiRAoXTmV0QXBwbGljYW50V2FudERlYWxSZXESEwoL",
            "YXBwbGljYW50SWQYASABKAUSFAoMaGFnZ2xlQ2hhdElkGAIgASgDIjwKFU5l",
            "dEFwcGxpY2FudFJlamVjdFJlcRITCgthcHBsaWNhbnRJZBgBIAEoBRIOCgZy",
            "ZWFzb24YAiABKAkiOgoVTmV0QXBwbGljYW50UmVwb3J0UmVxEhMKC2FwcGxp",
            "Y2FudElkGAEgASgFEgwKBHRleHQYAiABKAkikgEKGU5ldEFwcGxpY2FudENv",
            "bXBsZXRpb25SZXESEwoLYXBwbGljYW50SWQYASABKAUSEQoJZGVsaXZlcmVk",
            "GAIgASgIEhAKCHJld2FyZGVkGAMgASgIEg4KBnJhdGluZxgEIAEoBRIPCgdk",
            "aXNwdXRlGAUgASgIEhoKEmRpc3B1dGVEZXNjcmlwdGlvbhgGIAEoCSJuChVO",
            "ZXRBcHBsaWNhbnRDb21tb25SZXMSKwoPdXBkYXRlQXBwbGljYW50GAEgASgL",
            "MhIuaW5mLkRhdGFBcHBsaWNhbnQSKAoIbmV3Q2hhdHMYAiADKAsyFi5pbmYu",
            "RGF0YUFwcGxpY2FudENoYXRCB6oCBEluZlhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::InfX.DataProtobufReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetLoadApplicantsReq), global::InfX.NetLoadApplicantsReq.Parser, new[]{ "OfferId", "Before", "After", "Limit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetLoadApplicantReq), global::InfX.NetLoadApplicantReq.Parser, new[]{ "ApplicantId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetLoadApplicantChatsReq), global::InfX.NetLoadApplicantChatsReq.Parser, new[]{ "ApplicantId", "Before", "After", "Limit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetChatPlain), global::InfX.NetChatPlain.Parser, new[]{ "ApplicantId", "DeviceGhostId", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetChatHaggle), global::InfX.NetChatHaggle.Parser, new[]{ "ApplicantId", "DeviceGhostId", "Deliverables", "Reward", "Remarks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetChatImageKey), global::InfX.NetChatImageKey.Parser, new[]{ "ApplicantId", "DeviceGhostId", "ImageKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetApplicantWantDealReq), global::InfX.NetApplicantWantDealReq.Parser, new[]{ "ApplicantId", "HaggleChatId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetApplicantRejectReq), global::InfX.NetApplicantRejectReq.Parser, new[]{ "ApplicantId", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetApplicantReportReq), global::InfX.NetApplicantReportReq.Parser, new[]{ "ApplicantId", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetApplicantCompletionReq), global::InfX.NetApplicantCompletionReq.Parser, new[]{ "ApplicantId", "Delivered", "Rewarded", "Rating", "Dispute", "DisputeDescription" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetApplicantCommonRes), global::InfX.NetApplicantCommonRes.Parser, new[]{ "UpdateApplicant", "NewChats" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Message to load or refresh applicant list
  ///  Server will send a stream of DataApplicant messages (Id: LU_APPLI)
  ///  Id: L_APPLIS
  /// </summary>
  public sealed partial class NetLoadApplicantsReq : pb::IMessage<NetLoadApplicantsReq> {
    private static readonly pb::MessageParser<NetLoadApplicantsReq> _parser = new pb::MessageParser<NetLoadApplicantsReq>(() => new NetLoadApplicantsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetLoadApplicantsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetApplicantsProtobufReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetLoadApplicantsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetLoadApplicantsReq(NetLoadApplicantsReq other) : this() {
      offerId_ = other.offerId_;
      before_ = other.before_;
      after_ = other.after_;
      limit_ = other.limit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetLoadApplicantsReq Clone() {
      return new NetLoadApplicantsReq(this);
    }

    /// <summary>Field number for the "offerId" field.</summary>
    public const int OfferIdFieldNumber = 4;
    private int offerId_;
    /// <summary>
    ///  Offer for which to send applicants (ignored when requested by influencer)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OfferId {
      get { return offerId_; }
      set {
        offerId_ = value;
      }
    }

    /// <summary>Field number for the "before" field.</summary>
    public const int BeforeFieldNumber = 1;
    private int before_;
    /// <summary>
    ///  Applicants with id lower than this (older applicants) (ignore if 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Before {
      get { return before_; }
      set {
        before_ = value;
      }
    }

    /// <summary>Field number for the "after" field.</summary>
    public const int AfterFieldNumber = 2;
    private int after_;
    /// <summary>
    ///  Applicants with id higher than this (newer applicants) (ignore if 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int After {
      get { return after_; }
      set {
        after_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 3;
    private int limit_;
    /// <summary>
    ///  Limit (ignore if 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetLoadApplicantsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetLoadApplicantsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OfferId != other.OfferId) return false;
      if (Before != other.Before) return false;
      if (After != other.After) return false;
      if (Limit != other.Limit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OfferId != 0) hash ^= OfferId.GetHashCode();
      if (Before != 0) hash ^= Before.GetHashCode();
      if (After != 0) hash ^= After.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Before != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Before);
      }
      if (After != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(After);
      }
      if (Limit != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Limit);
      }
      if (OfferId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OfferId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OfferId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfferId);
      }
      if (Before != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Before);
      }
      if (After != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(After);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetLoadApplicantsReq other) {
      if (other == null) {
        return;
      }
      if (other.OfferId != 0) {
        OfferId = other.OfferId;
      }
      if (other.Before != 0) {
        Before = other.Before;
      }
      if (other.After != 0) {
        After = other.After;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Before = input.ReadInt32();
            break;
          }
          case 16: {
            After = input.ReadInt32();
            break;
          }
          case 24: {
            Limit = input.ReadInt32();
            break;
          }
          case 32: {
            OfferId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Message to load a specific applicant
  ///  Id: L_APPLIC
  ///  Response: DataApplicant (Id: LU_APPLI)
  /// </summary>
  public sealed partial class NetLoadApplicantReq : pb::IMessage<NetLoadApplicantReq> {
    private static readonly pb::MessageParser<NetLoadApplicantReq> _parser = new pb::MessageParser<NetLoadApplicantReq>(() => new NetLoadApplicantReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetLoadApplicantReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetApplicantsProtobufReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetLoadApplicantReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetLoadApplicantReq(NetLoadApplicantReq other) : this() {
      applicantId_ = other.applicantId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetLoadApplicantReq Clone() {
      return new NetLoadApplicantReq(this);
    }

    /// <summary>Field number for the "applicantId" field.</summary>
    public const int ApplicantIdFieldNumber = 1;
    private int applicantId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantId {
      get { return applicantId_; }
      set {
        applicantId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetLoadApplicantReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetLoadApplicantReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicantId != other.ApplicantId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicantId != 0) hash ^= ApplicantId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicantId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ApplicantId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicantId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicantId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetLoadApplicantReq other) {
      if (other == null) {
        return;
      }
      if (other.ApplicantId != 0) {
        ApplicantId = other.ApplicantId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicantId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Message to load or refresh applicant chat list
  ///  Server will send a stream of DataApplicantChat messages (Id: LU_A_CHA)
  ///  Id: L_APCHAT
  ///  Response: NetLoadApplicantsRes (Id: L_R_APCH)
  /// </summary>
  public sealed partial class NetLoadApplicantChatsReq : pb::IMessage<NetLoadApplicantChatsReq> {
    private static readonly pb::MessageParser<NetLoadApplicantChatsReq> _parser = new pb::MessageParser<NetLoadApplicantChatsReq>(() => new NetLoadApplicantChatsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetLoadApplicantChatsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetApplicantsProtobufReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetLoadApplicantChatsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetLoadApplicantChatsReq(NetLoadApplicantChatsReq other) : this() {
      applicantId_ = other.applicantId_;
      before_ = other.before_;
      after_ = other.after_;
      limit_ = other.limit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetLoadApplicantChatsReq Clone() {
      return new NetLoadApplicantChatsReq(this);
    }

    /// <summary>Field number for the "applicantId" field.</summary>
    public const int ApplicantIdFieldNumber = 5;
    private int applicantId_;
    /// <summary>
    ///  Applicant for which to send chats
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantId {
      get { return applicantId_; }
      set {
        applicantId_ = value;
      }
    }

    /// <summary>Field number for the "before" field.</summary>
    public const int BeforeFieldNumber = 1;
    private int before_;
    /// <summary>
    ///  Applicant chats with id lower than this (older applicant chats) (ignore if 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Before {
      get { return before_; }
      set {
        before_ = value;
      }
    }

    /// <summary>Field number for the "after" field.</summary>
    public const int AfterFieldNumber = 2;
    private int after_;
    /// <summary>
    ///  Applicant chats with id higher than this (newer applicant chats) (ignore if 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int After {
      get { return after_; }
      set {
        after_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 3;
    private int limit_;
    /// <summary>
    ///  Limit (ignore if 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetLoadApplicantChatsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetLoadApplicantChatsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicantId != other.ApplicantId) return false;
      if (Before != other.Before) return false;
      if (After != other.After) return false;
      if (Limit != other.Limit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicantId != 0) hash ^= ApplicantId.GetHashCode();
      if (Before != 0) hash ^= Before.GetHashCode();
      if (After != 0) hash ^= After.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Before != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Before);
      }
      if (After != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(After);
      }
      if (Limit != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Limit);
      }
      if (ApplicantId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ApplicantId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicantId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicantId);
      }
      if (Before != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Before);
      }
      if (After != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(After);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetLoadApplicantChatsReq other) {
      if (other == null) {
        return;
      }
      if (other.ApplicantId != 0) {
        ApplicantId = other.ApplicantId;
      }
      if (other.Before != 0) {
        Before = other.Before;
      }
      if (other.After != 0) {
        After = other.After;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Before = input.ReadInt32();
            break;
          }
          case 16: {
            After = input.ReadInt32();
            break;
          }
          case 24: {
            Limit = input.ReadInt32();
            break;
          }
          case 40: {
            ApplicantId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Send chat plain
  ///  Id: CH_PLAIN
  /// </summary>
  public sealed partial class NetChatPlain : pb::IMessage<NetChatPlain> {
    private static readonly pb::MessageParser<NetChatPlain> _parser = new pb::MessageParser<NetChatPlain>(() => new NetChatPlain());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetChatPlain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetApplicantsProtobufReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetChatPlain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetChatPlain(NetChatPlain other) : this() {
      applicantId_ = other.applicantId_;
      deviceGhostId_ = other.deviceGhostId_;
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetChatPlain Clone() {
      return new NetChatPlain(this);
    }

    /// <summary>Field number for the "applicantId" field.</summary>
    public const int ApplicantIdFieldNumber = 1;
    private int applicantId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantId {
      get { return applicantId_; }
      set {
        applicantId_ = value;
      }
    }

    /// <summary>Field number for the "deviceGhostId" field.</summary>
    public const int DeviceGhostIdFieldNumber = 8;
    private int deviceGhostId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeviceGhostId {
      get { return deviceGhostId_; }
      set {
        deviceGhostId_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 6;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetChatPlain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetChatPlain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicantId != other.ApplicantId) return false;
      if (DeviceGhostId != other.DeviceGhostId) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicantId != 0) hash ^= ApplicantId.GetHashCode();
      if (DeviceGhostId != 0) hash ^= DeviceGhostId.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicantId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ApplicantId);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Text);
      }
      if (DeviceGhostId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DeviceGhostId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicantId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicantId);
      }
      if (DeviceGhostId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviceGhostId);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetChatPlain other) {
      if (other == null) {
        return;
      }
      if (other.ApplicantId != 0) {
        ApplicantId = other.ApplicantId;
      }
      if (other.DeviceGhostId != 0) {
        DeviceGhostId = other.DeviceGhostId;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicantId = input.ReadInt32();
            break;
          }
          case 50: {
            Text = input.ReadString();
            break;
          }
          case 64: {
            DeviceGhostId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Send chat haggle (refuse if already accepted by both)
  ///  Id: CH_HAGGL
  /// </summary>
  public sealed partial class NetChatHaggle : pb::IMessage<NetChatHaggle> {
    private static readonly pb::MessageParser<NetChatHaggle> _parser = new pb::MessageParser<NetChatHaggle>(() => new NetChatHaggle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetChatHaggle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetApplicantsProtobufReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetChatHaggle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetChatHaggle(NetChatHaggle other) : this() {
      applicantId_ = other.applicantId_;
      deviceGhostId_ = other.deviceGhostId_;
      deliverables_ = other.deliverables_;
      reward_ = other.reward_;
      remarks_ = other.remarks_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetChatHaggle Clone() {
      return new NetChatHaggle(this);
    }

    /// <summary>Field number for the "applicantId" field.</summary>
    public const int ApplicantIdFieldNumber = 1;
    private int applicantId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantId {
      get { return applicantId_; }
      set {
        applicantId_ = value;
      }
    }

    /// <summary>Field number for the "deviceGhostId" field.</summary>
    public const int DeviceGhostIdFieldNumber = 8;
    private int deviceGhostId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeviceGhostId {
      get { return deviceGhostId_; }
      set {
        deviceGhostId_ = value;
      }
    }

    /// <summary>Field number for the "deliverables" field.</summary>
    public const int DeliverablesFieldNumber = 3;
    private string deliverables_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deliverables {
      get { return deliverables_; }
      set {
        deliverables_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 4;
    private string reward_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reward {
      get { return reward_; }
      set {
        reward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remarks" field.</summary>
    public const int RemarksFieldNumber = 2;
    private string remarks_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remarks {
      get { return remarks_; }
      set {
        remarks_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetChatHaggle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetChatHaggle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicantId != other.ApplicantId) return false;
      if (DeviceGhostId != other.DeviceGhostId) return false;
      if (Deliverables != other.Deliverables) return false;
      if (Reward != other.Reward) return false;
      if (Remarks != other.Remarks) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicantId != 0) hash ^= ApplicantId.GetHashCode();
      if (DeviceGhostId != 0) hash ^= DeviceGhostId.GetHashCode();
      if (Deliverables.Length != 0) hash ^= Deliverables.GetHashCode();
      if (Reward.Length != 0) hash ^= Reward.GetHashCode();
      if (Remarks.Length != 0) hash ^= Remarks.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicantId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ApplicantId);
      }
      if (Remarks.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Remarks);
      }
      if (Deliverables.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Deliverables);
      }
      if (Reward.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reward);
      }
      if (DeviceGhostId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DeviceGhostId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicantId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicantId);
      }
      if (DeviceGhostId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviceGhostId);
      }
      if (Deliverables.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Deliverables);
      }
      if (Reward.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reward);
      }
      if (Remarks.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remarks);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetChatHaggle other) {
      if (other == null) {
        return;
      }
      if (other.ApplicantId != 0) {
        ApplicantId = other.ApplicantId;
      }
      if (other.DeviceGhostId != 0) {
        DeviceGhostId = other.DeviceGhostId;
      }
      if (other.Deliverables.Length != 0) {
        Deliverables = other.Deliverables;
      }
      if (other.Reward.Length != 0) {
        Reward = other.Reward;
      }
      if (other.Remarks.Length != 0) {
        Remarks = other.Remarks;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicantId = input.ReadInt32();
            break;
          }
          case 18: {
            Remarks = input.ReadString();
            break;
          }
          case 26: {
            Deliverables = input.ReadString();
            break;
          }
          case 34: {
            Reward = input.ReadString();
            break;
          }
          case 64: {
            DeviceGhostId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Send chat image key
  ///  Id: CH_IMAGE
  /// </summary>
  public sealed partial class NetChatImageKey : pb::IMessage<NetChatImageKey> {
    private static readonly pb::MessageParser<NetChatImageKey> _parser = new pb::MessageParser<NetChatImageKey>(() => new NetChatImageKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetChatImageKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetApplicantsProtobufReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetChatImageKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetChatImageKey(NetChatImageKey other) : this() {
      applicantId_ = other.applicantId_;
      deviceGhostId_ = other.deviceGhostId_;
      imageKey_ = other.imageKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetChatImageKey Clone() {
      return new NetChatImageKey(this);
    }

    /// <summary>Field number for the "applicantId" field.</summary>
    public const int ApplicantIdFieldNumber = 1;
    private int applicantId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantId {
      get { return applicantId_; }
      set {
        applicantId_ = value;
      }
    }

    /// <summary>Field number for the "deviceGhostId" field.</summary>
    public const int DeviceGhostIdFieldNumber = 8;
    private int deviceGhostId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeviceGhostId {
      get { return deviceGhostId_; }
      set {
        deviceGhostId_ = value;
      }
    }

    /// <summary>Field number for the "imageKey" field.</summary>
    public const int ImageKeyFieldNumber = 5;
    private string imageKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageKey {
      get { return imageKey_; }
      set {
        imageKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetChatImageKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetChatImageKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicantId != other.ApplicantId) return false;
      if (DeviceGhostId != other.DeviceGhostId) return false;
      if (ImageKey != other.ImageKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicantId != 0) hash ^= ApplicantId.GetHashCode();
      if (DeviceGhostId != 0) hash ^= DeviceGhostId.GetHashCode();
      if (ImageKey.Length != 0) hash ^= ImageKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicantId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ApplicantId);
      }
      if (ImageKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ImageKey);
      }
      if (DeviceGhostId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DeviceGhostId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicantId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicantId);
      }
      if (DeviceGhostId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviceGhostId);
      }
      if (ImageKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetChatImageKey other) {
      if (other == null) {
        return;
      }
      if (other.ApplicantId != 0) {
        ApplicantId = other.ApplicantId;
      }
      if (other.DeviceGhostId != 0) {
        DeviceGhostId = other.DeviceGhostId;
      }
      if (other.ImageKey.Length != 0) {
        ImageKey = other.ImageKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicantId = input.ReadInt32();
            break;
          }
          case 42: {
            ImageKey = input.ReadString();
            break;
          }
          case 64: {
            DeviceGhostId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Want deal. Only successful if the haggleChatId is current
  ///  Id: AP_WADEA
  ///  Response: NetApplicantCommonRes (Id: AP_R_COM), applicant update + marker
  /// </summary>
  public sealed partial class NetApplicantWantDealReq : pb::IMessage<NetApplicantWantDealReq> {
    private static readonly pb::MessageParser<NetApplicantWantDealReq> _parser = new pb::MessageParser<NetApplicantWantDealReq>(() => new NetApplicantWantDealReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetApplicantWantDealReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetApplicantsProtobufReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetApplicantWantDealReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetApplicantWantDealReq(NetApplicantWantDealReq other) : this() {
      applicantId_ = other.applicantId_;
      haggleChatId_ = other.haggleChatId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetApplicantWantDealReq Clone() {
      return new NetApplicantWantDealReq(this);
    }

    /// <summary>Field number for the "applicantId" field.</summary>
    public const int ApplicantIdFieldNumber = 1;
    private int applicantId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantId {
      get { return applicantId_; }
      set {
        applicantId_ = value;
      }
    }

    /// <summary>Field number for the "haggleChatId" field.</summary>
    public const int HaggleChatIdFieldNumber = 2;
    private long haggleChatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HaggleChatId {
      get { return haggleChatId_; }
      set {
        haggleChatId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetApplicantWantDealReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetApplicantWantDealReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicantId != other.ApplicantId) return false;
      if (HaggleChatId != other.HaggleChatId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicantId != 0) hash ^= ApplicantId.GetHashCode();
      if (HaggleChatId != 0L) hash ^= HaggleChatId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicantId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ApplicantId);
      }
      if (HaggleChatId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(HaggleChatId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicantId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicantId);
      }
      if (HaggleChatId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HaggleChatId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetApplicantWantDealReq other) {
      if (other == null) {
        return;
      }
      if (other.ApplicantId != 0) {
        ApplicantId = other.ApplicantId;
      }
      if (other.HaggleChatId != 0L) {
        HaggleChatId = other.HaggleChatId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicantId = input.ReadInt32();
            break;
          }
          case 16: {
            HaggleChatId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Reject an application (closes the chat too)
  ///  Id: AP_REJEC
  ///  Response: NetApplicantCommonRes (Id: AP_R_COM), applicant update + marker
  /// </summary>
  public sealed partial class NetApplicantRejectReq : pb::IMessage<NetApplicantRejectReq> {
    private static readonly pb::MessageParser<NetApplicantRejectReq> _parser = new pb::MessageParser<NetApplicantRejectReq>(() => new NetApplicantRejectReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetApplicantRejectReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetApplicantsProtobufReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetApplicantRejectReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetApplicantRejectReq(NetApplicantRejectReq other) : this() {
      applicantId_ = other.applicantId_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetApplicantRejectReq Clone() {
      return new NetApplicantRejectReq(this);
    }

    /// <summary>Field number for the "applicantId" field.</summary>
    public const int ApplicantIdFieldNumber = 1;
    private int applicantId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantId {
      get { return applicantId_; }
      set {
        applicantId_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    /// <summary>
    ///  Reason part of marker but not shown right now
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetApplicantRejectReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetApplicantRejectReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicantId != other.ApplicantId) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicantId != 0) hash ^= ApplicantId.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicantId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ApplicantId);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicantId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicantId);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetApplicantRejectReq other) {
      if (other == null) {
        return;
      }
      if (other.ApplicantId != 0) {
        ApplicantId = other.ApplicantId;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicantId = input.ReadInt32();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Report an application
  ///  Id: AP_REPOR
  ///  Response: NetApplicantCommonRes (Id: AP_R_COM), null, null
  /// </summary>
  public sealed partial class NetApplicantReportReq : pb::IMessage<NetApplicantReportReq> {
    private static readonly pb::MessageParser<NetApplicantReportReq> _parser = new pb::MessageParser<NetApplicantReportReq>(() => new NetApplicantReportReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetApplicantReportReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetApplicantsProtobufReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetApplicantReportReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetApplicantReportReq(NetApplicantReportReq other) : this() {
      applicantId_ = other.applicantId_;
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetApplicantReportReq Clone() {
      return new NetApplicantReportReq(this);
    }

    /// <summary>Field number for the "applicantId" field.</summary>
    public const int ApplicantIdFieldNumber = 1;
    private int applicantId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantId {
      get { return applicantId_; }
      set {
        applicantId_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_ = "";
    /// <summary>
    ///  Sent to support. Sent by mail (sql transaction... :))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetApplicantReportReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetApplicantReportReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicantId != other.ApplicantId) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicantId != 0) hash ^= ApplicantId.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicantId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ApplicantId);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicantId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicantId);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetApplicantReportReq other) {
      if (other == null) {
        return;
      }
      if (other.ApplicantId != 0) {
        ApplicantId = other.ApplicantId;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicantId = input.ReadInt32();
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Mark as completed OR dispute a problem
  ///  Id: AP_COMPL
  ///  Response: NetApplicantCommonRes (Id: AP_R_COM), applicant update + marker
  /// </summary>
  public sealed partial class NetApplicantCompletionReq : pb::IMessage<NetApplicantCompletionReq> {
    private static readonly pb::MessageParser<NetApplicantCompletionReq> _parser = new pb::MessageParser<NetApplicantCompletionReq>(() => new NetApplicantCompletionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetApplicantCompletionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetApplicantsProtobufReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetApplicantCompletionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetApplicantCompletionReq(NetApplicantCompletionReq other) : this() {
      applicantId_ = other.applicantId_;
      delivered_ = other.delivered_;
      rewarded_ = other.rewarded_;
      rating_ = other.rating_;
      dispute_ = other.dispute_;
      disputeDescription_ = other.disputeDescription_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetApplicantCompletionReq Clone() {
      return new NetApplicantCompletionReq(this);
    }

    /// <summary>Field number for the "applicantId" field.</summary>
    public const int ApplicantIdFieldNumber = 1;
    private int applicantId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantId {
      get { return applicantId_; }
      set {
        applicantId_ = value;
      }
    }

    /// <summary>Field number for the "delivered" field.</summary>
    public const int DeliveredFieldNumber = 2;
    private bool delivered_;
    /// <summary>
    ///  Markings can only be changed under DEAL and DISPUTE stage, ignored otherwise
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Delivered {
      get { return delivered_; }
      set {
        delivered_ = value;
      }
    }

    /// <summary>Field number for the "rewarded" field.</summary>
    public const int RewardedFieldNumber = 3;
    private bool rewarded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rewarded {
      get { return rewarded_; }
      set {
        rewarded_ = value;
      }
    }

    /// <summary>Field number for the "rating" field.</summary>
    public const int RatingFieldNumber = 4;
    private int rating_;
    /// <summary>
    ///  Ignored in case of problem report. If both users rate, then offer moves to COMPLETE, even if in DISPUTE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rating {
      get { return rating_; }
      set {
        rating_ = value;
      }
    }

    /// <summary>Field number for the "dispute" field.</summary>
    public const int DisputeFieldNumber = 5;
    private bool dispute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Dispute {
      get { return dispute_; }
      set {
        dispute_ = value;
      }
    }

    /// <summary>Field number for the "disputeDescription" field.</summary>
    public const int DisputeDescriptionFieldNumber = 6;
    private string disputeDescription_ = "";
    /// <summary>
    ///  Problem description for support. Sent by mail (sql transaction... :))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisputeDescription {
      get { return disputeDescription_; }
      set {
        disputeDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetApplicantCompletionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetApplicantCompletionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicantId != other.ApplicantId) return false;
      if (Delivered != other.Delivered) return false;
      if (Rewarded != other.Rewarded) return false;
      if (Rating != other.Rating) return false;
      if (Dispute != other.Dispute) return false;
      if (DisputeDescription != other.DisputeDescription) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicantId != 0) hash ^= ApplicantId.GetHashCode();
      if (Delivered != false) hash ^= Delivered.GetHashCode();
      if (Rewarded != false) hash ^= Rewarded.GetHashCode();
      if (Rating != 0) hash ^= Rating.GetHashCode();
      if (Dispute != false) hash ^= Dispute.GetHashCode();
      if (DisputeDescription.Length != 0) hash ^= DisputeDescription.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicantId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ApplicantId);
      }
      if (Delivered != false) {
        output.WriteRawTag(16);
        output.WriteBool(Delivered);
      }
      if (Rewarded != false) {
        output.WriteRawTag(24);
        output.WriteBool(Rewarded);
      }
      if (Rating != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Rating);
      }
      if (Dispute != false) {
        output.WriteRawTag(40);
        output.WriteBool(Dispute);
      }
      if (DisputeDescription.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DisputeDescription);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicantId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicantId);
      }
      if (Delivered != false) {
        size += 1 + 1;
      }
      if (Rewarded != false) {
        size += 1 + 1;
      }
      if (Rating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rating);
      }
      if (Dispute != false) {
        size += 1 + 1;
      }
      if (DisputeDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisputeDescription);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetApplicantCompletionReq other) {
      if (other == null) {
        return;
      }
      if (other.ApplicantId != 0) {
        ApplicantId = other.ApplicantId;
      }
      if (other.Delivered != false) {
        Delivered = other.Delivered;
      }
      if (other.Rewarded != false) {
        Rewarded = other.Rewarded;
      }
      if (other.Rating != 0) {
        Rating = other.Rating;
      }
      if (other.Dispute != false) {
        Dispute = other.Dispute;
      }
      if (other.DisputeDescription.Length != 0) {
        DisputeDescription = other.DisputeDescription;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicantId = input.ReadInt32();
            break;
          }
          case 16: {
            Delivered = input.ReadBool();
            break;
          }
          case 24: {
            Rewarded = input.ReadBool();
            break;
          }
          case 32: {
            Rating = input.ReadInt32();
            break;
          }
          case 40: {
            Dispute = input.ReadBool();
            break;
          }
          case 50: {
            DisputeDescription = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Generic response for applicant actions.
  ///  Always returns the updated applicant info,
  ///  and optionally new chats generated from the action (ghost-less).
  ///  In case of an Exception, the client should mark the current applicant
  ///  and chat data as dirty, and reload it's state
  ///  Id: AP_R_COM
  /// </summary>
  public sealed partial class NetApplicantCommonRes : pb::IMessage<NetApplicantCommonRes> {
    private static readonly pb::MessageParser<NetApplicantCommonRes> _parser = new pb::MessageParser<NetApplicantCommonRes>(() => new NetApplicantCommonRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetApplicantCommonRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetApplicantsProtobufReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetApplicantCommonRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetApplicantCommonRes(NetApplicantCommonRes other) : this() {
      UpdateApplicant = other.updateApplicant_ != null ? other.UpdateApplicant.Clone() : null;
      newChats_ = other.newChats_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetApplicantCommonRes Clone() {
      return new NetApplicantCommonRes(this);
    }

    /// <summary>Field number for the "updateApplicant" field.</summary>
    public const int UpdateApplicantFieldNumber = 1;
    private global::InfX.DataApplicant updateApplicant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.DataApplicant UpdateApplicant {
      get { return updateApplicant_; }
      set {
        updateApplicant_ = value;
      }
    }

    /// <summary>Field number for the "newChats" field.</summary>
    public const int NewChatsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::InfX.DataApplicantChat> _repeated_newChats_codec
        = pb::FieldCodec.ForMessage(18, global::InfX.DataApplicantChat.Parser);
    private readonly pbc::RepeatedField<global::InfX.DataApplicantChat> newChats_ = new pbc::RepeatedField<global::InfX.DataApplicantChat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.DataApplicantChat> NewChats {
      get { return newChats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetApplicantCommonRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetApplicantCommonRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UpdateApplicant, other.UpdateApplicant)) return false;
      if(!newChats_.Equals(other.newChats_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (updateApplicant_ != null) hash ^= UpdateApplicant.GetHashCode();
      hash ^= newChats_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (updateApplicant_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UpdateApplicant);
      }
      newChats_.WriteTo(output, _repeated_newChats_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (updateApplicant_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateApplicant);
      }
      size += newChats_.CalculateSize(_repeated_newChats_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetApplicantCommonRes other) {
      if (other == null) {
        return;
      }
      if (other.updateApplicant_ != null) {
        if (updateApplicant_ == null) {
          updateApplicant_ = new global::InfX.DataApplicant();
        }
        UpdateApplicant.MergeFrom(other.UpdateApplicant);
      }
      newChats_.Add(other.newChats_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (updateApplicant_ == null) {
              updateApplicant_ = new global::InfX.DataApplicant();
            }
            input.ReadMessage(updateApplicant_);
            break;
          }
          case 18: {
            newChats_.AddEntriesFrom(input, _repeated_newChats_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
