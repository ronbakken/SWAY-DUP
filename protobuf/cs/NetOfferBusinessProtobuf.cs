// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net_offer_business_protobuf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace InfX {

  /// <summary>Holder for reflection information generated from net_offer_business_protobuf.proto</summary>
  public static partial class NetOfferBusinessProtobufReflection {

    #region Descriptor
    /// <summary>File descriptor for net_offer_business_protobuf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NetOfferBusinessProtobufReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFuZXRfb2ZmZXJfYnVzaW5lc3NfcHJvdG9idWYucHJvdG8SA2luZiKEAQoR",
            "TmV0Q3JlYXRlT2ZmZXJSZXESDQoFdGl0bGUYASABKAkSEQoJaW1hZ2VLZXlz",
            "GAIgAygJEhMKC2Rlc2NyaXB0aW9uGAMgASgJEhQKDGRlbGl2ZXJhYmxlcxgE",
            "IAEoCRIOCgZyZXdhcmQYBSABKAkSEgoKbG9jYXRpb25JZBgGIAEoBSJAChBO",
            "ZXRMb2FkT2ZmZXJzUmVxEg4KBmJlZm9yZRgBIAEoBRINCgVhZnRlchgCIAEo",
            "BRINCgVsaW1pdBgDIAEoBSIyChBOZXRMb2FkT2ZmZXJzUmVzEg4KBm9sZGVz",
            "dBgBIAEoBRIOCgZuZXdlc3QYAiABKAVCB6oCBEluZlhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetCreateOfferReq), global::InfX.NetCreateOfferReq.Parser, new[]{ "Title", "ImageKeys", "Description", "Deliverables", "Reward", "LocationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetLoadOffersReq), global::InfX.NetLoadOffersReq.Parser, new[]{ "Before", "After", "Limit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetLoadOffersRes), global::InfX.NetLoadOffersRes.Parser, new[]{ "Oldest", "Newest" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Message to create offer
  ///  Id: C_OFFERR
  ///  Response C_R_OFFE (DataBusinessOffer)
  /// </summary>
  public sealed partial class NetCreateOfferReq : pb::IMessage<NetCreateOfferReq> {
    private static readonly pb::MessageParser<NetCreateOfferReq> _parser = new pb::MessageParser<NetCreateOfferReq>(() => new NetCreateOfferReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetCreateOfferReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetOfferBusinessProtobufReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetCreateOfferReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetCreateOfferReq(NetCreateOfferReq other) : this() {
      title_ = other.title_;
      imageKeys_ = other.imageKeys_.Clone();
      description_ = other.description_;
      deliverables_ = other.deliverables_;
      reward_ = other.reward_;
      locationId_ = other.locationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetCreateOfferReq Clone() {
      return new NetCreateOfferReq(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    /// <summary>
    ///  Basics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imageKeys" field.</summary>
    public const int ImageKeysFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_imageKeys_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> imageKeys_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ImageKeys {
      get { return imageKeys_; }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deliverables" field.</summary>
    public const int DeliverablesFieldNumber = 4;
    private string deliverables_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deliverables {
      get { return deliverables_; }
      set {
        deliverables_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 5;
    private string reward_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reward {
      get { return reward_; }
      set {
        reward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locationId" field.</summary>
    public const int LocationIdFieldNumber = 6;
    private int locationId_;
    /// <summary>
    ///  0 being the user's default location -- dropdown selection from user locations if supported
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocationId {
      get { return locationId_; }
      set {
        locationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetCreateOfferReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetCreateOfferReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if(!imageKeys_.Equals(other.imageKeys_)) return false;
      if (Description != other.Description) return false;
      if (Deliverables != other.Deliverables) return false;
      if (Reward != other.Reward) return false;
      if (LocationId != other.LocationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      hash ^= imageKeys_.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Deliverables.Length != 0) hash ^= Deliverables.GetHashCode();
      if (Reward.Length != 0) hash ^= Reward.GetHashCode();
      if (LocationId != 0) hash ^= LocationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      imageKeys_.WriteTo(output, _repeated_imageKeys_codec);
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Deliverables.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Deliverables);
      }
      if (Reward.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Reward);
      }
      if (LocationId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LocationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      size += imageKeys_.CalculateSize(_repeated_imageKeys_codec);
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Deliverables.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Deliverables);
      }
      if (Reward.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reward);
      }
      if (LocationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetCreateOfferReq other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      imageKeys_.Add(other.imageKeys_);
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Deliverables.Length != 0) {
        Deliverables = other.Deliverables;
      }
      if (other.Reward.Length != 0) {
        Reward = other.Reward;
      }
      if (other.LocationId != 0) {
        LocationId = other.LocationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            imageKeys_.AddEntriesFrom(input, _repeated_imageKeys_codec);
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            Deliverables = input.ReadString();
            break;
          }
          case 42: {
            Reward = input.ReadString();
            break;
          }
          case 48: {
            LocationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Message to load or refresh offer list
  ///  Server will send a stream of NetLoadOffersStream messages (Id: DB_OFFER)
  ///  Id: L_OFFERS
  ///  Response: NetLoadOffersRes (Id: L_R_OFFE)
  /// </summary>
  public sealed partial class NetLoadOffersReq : pb::IMessage<NetLoadOffersReq> {
    private static readonly pb::MessageParser<NetLoadOffersReq> _parser = new pb::MessageParser<NetLoadOffersReq>(() => new NetLoadOffersReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetLoadOffersReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetOfferBusinessProtobufReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetLoadOffersReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetLoadOffersReq(NetLoadOffersReq other) : this() {
      before_ = other.before_;
      after_ = other.after_;
      limit_ = other.limit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetLoadOffersReq Clone() {
      return new NetLoadOffersReq(this);
    }

    /// <summary>Field number for the "before" field.</summary>
    public const int BeforeFieldNumber = 1;
    private int before_;
    /// <summary>
    ///  Offers with id lower than this (older offers) (ignore if 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Before {
      get { return before_; }
      set {
        before_ = value;
      }
    }

    /// <summary>Field number for the "after" field.</summary>
    public const int AfterFieldNumber = 2;
    private int after_;
    /// <summary>
    ///  Offers with id higher than this (newer offers) (ignore if 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int After {
      get { return after_; }
      set {
        after_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 3;
    private int limit_;
    /// <summary>
    ///  Limit (ignore if 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetLoadOffersReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetLoadOffersReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Before != other.Before) return false;
      if (After != other.After) return false;
      if (Limit != other.Limit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Before != 0) hash ^= Before.GetHashCode();
      if (After != 0) hash ^= After.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Before != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Before);
      }
      if (After != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(After);
      }
      if (Limit != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Limit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Before != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Before);
      }
      if (After != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(After);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetLoadOffersReq other) {
      if (other == null) {
        return;
      }
      if (other.Before != 0) {
        Before = other.Before;
      }
      if (other.After != 0) {
        After = other.After;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Before = input.ReadInt32();
            break;
          }
          case 16: {
            After = input.ReadInt32();
            break;
          }
          case 24: {
            Limit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response which is sent when all DB_OFFER messages have been sent
  ///  Used by the client to signal to the user that refresh is complete, if refresh was done manually (and to avoid multiple simultaneous loads)
  ///  Id: L_R_OFFE
  /// </summary>
  public sealed partial class NetLoadOffersRes : pb::IMessage<NetLoadOffersRes> {
    private static readonly pb::MessageParser<NetLoadOffersRes> _parser = new pb::MessageParser<NetLoadOffersRes>(() => new NetLoadOffersRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetLoadOffersRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetOfferBusinessProtobufReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetLoadOffersRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetLoadOffersRes(NetLoadOffersRes other) : this() {
      oldest_ = other.oldest_;
      newest_ = other.newest_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetLoadOffersRes Clone() {
      return new NetLoadOffersRes(this);
    }

    /// <summary>Field number for the "oldest" field.</summary>
    public const int OldestFieldNumber = 1;
    private int oldest_;
    /// <summary>
    ///  Oldest offer which was sent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Oldest {
      get { return oldest_; }
      set {
        oldest_ = value;
      }
    }

    /// <summary>Field number for the "newest" field.</summary>
    public const int NewestFieldNumber = 2;
    private int newest_;
    /// <summary>
    ///  Newest offer which was sent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Newest {
      get { return newest_; }
      set {
        newest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetLoadOffersRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetLoadOffersRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oldest != other.Oldest) return false;
      if (Newest != other.Newest) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Oldest != 0) hash ^= Oldest.GetHashCode();
      if (Newest != 0) hash ^= Newest.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Oldest != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Oldest);
      }
      if (Newest != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Newest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Oldest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oldest);
      }
      if (Newest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Newest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetLoadOffersRes other) {
      if (other == null) {
        return;
      }
      if (other.Oldest != 0) {
        Oldest = other.Oldest;
      }
      if (other.Newest != 0) {
        Newest = other.Newest;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Oldest = input.ReadInt32();
            break;
          }
          case 16: {
            Newest = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
