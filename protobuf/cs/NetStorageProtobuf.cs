// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net_storage_protobuf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace InfX {

  /// <summary>Holder for reflection information generated from net_storage_protobuf.proto</summary>
  public static partial class NetStorageProtobufReflection {

    #region Descriptor
    /// <summary>File descriptor for net_storage_protobuf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NetStorageProtobufReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpuZXRfc3RvcmFnZV9wcm90b2J1Zi5wcm90bxIDaW5mImgKEU5ldFVwbG9h",
            "ZEltYWdlUmVxEhAKCGZpbGVOYW1lGAEgASgJEhUKDWNvbnRlbnRMZW5ndGgY",
            "AiABKAUSEwoLY29udGVudFR5cGUYBCABKAkSFQoNY29udGVudFNoYTI1NhgD",
            "IAEoDCKNAQoRTmV0VXBsb2FkSW1hZ2VSZXMSFQoNcmVxdWVzdE1ldGhvZBgB",
            "IAEoCRISCgpyZXF1ZXN0VXJsGAIgASgJEhIKCmZpbGVFeGlzdHMYCSABKAgS",
            "EQoJdXBsb2FkS2V5GAogASgJEhAKCGNvdmVyVXJsGAsgASgJEhQKDHRodW1i",
            "bmFpbFVybBgMIAEoCUIHqgIESW5mWGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetUploadImageReq), global::InfX.NetUploadImageReq.Parser, new[]{ "FileName", "ContentLength", "ContentType", "ContentSha256" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetUploadImageRes), global::InfX.NetUploadImageRes.Parser, new[]{ "RequestMethod", "RequestUrl", "FileExists", "UploadKey", "CoverUrl", "ThumbnailUrl" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Client requests the server permission to upload an image
  ///  The server may delete the image later if it is never used
  ///  Name: UP_IMAGE
  ///  Response: NetResImageUpload
  /// </summary>
  public sealed partial class NetUploadImageReq : pb::IMessage<NetUploadImageReq> {
    private static readonly pb::MessageParser<NetUploadImageReq> _parser = new pb::MessageParser<NetUploadImageReq>(() => new NetUploadImageReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetUploadImageReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetStorageProtobufReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetUploadImageReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetUploadImageReq(NetUploadImageReq other) : this() {
      fileName_ = other.fileName_;
      contentLength_ = other.contentLength_;
      contentType_ = other.contentType_;
      contentSha256_ = other.contentSha256_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetUploadImageReq Clone() {
      return new NetUploadImageReq(this);
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 1;
    private string fileName_ = "";
    /// <summary>
    ///  File information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contentLength" field.</summary>
    public const int ContentLengthFieldNumber = 2;
    private int contentLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContentLength {
      get { return contentLength_; }
      set {
        contentLength_ = value;
      }
    }

    /// <summary>Field number for the "contentType" field.</summary>
    public const int ContentTypeFieldNumber = 4;
    private string contentType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentType {
      get { return contentType_; }
      set {
        contentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contentSha256" field.</summary>
    public const int ContentSha256FieldNumber = 3;
    private pb::ByteString contentSha256_ = pb::ByteString.Empty;
    /// <summary>
    ///  Hashed file contents
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContentSha256 {
      get { return contentSha256_; }
      set {
        contentSha256_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetUploadImageReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetUploadImageReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileName != other.FileName) return false;
      if (ContentLength != other.ContentLength) return false;
      if (ContentType != other.ContentType) return false;
      if (ContentSha256 != other.ContentSha256) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (ContentLength != 0) hash ^= ContentLength.GetHashCode();
      if (ContentType.Length != 0) hash ^= ContentType.GetHashCode();
      if (ContentSha256.Length != 0) hash ^= ContentSha256.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
      if (ContentLength != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ContentLength);
      }
      if (ContentSha256.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ContentSha256);
      }
      if (ContentType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ContentType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (ContentLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentLength);
      }
      if (ContentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentType);
      }
      if (ContentSha256.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContentSha256);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetUploadImageReq other) {
      if (other == null) {
        return;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.ContentLength != 0) {
        ContentLength = other.ContentLength;
      }
      if (other.ContentType.Length != 0) {
        ContentType = other.ContentType;
      }
      if (other.ContentSha256.Length != 0) {
        ContentSha256 = other.ContentSha256;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
          case 16: {
            ContentLength = input.ReadInt32();
            break;
          }
          case 26: {
            ContentSha256 = input.ReadBytes();
            break;
          }
          case 34: {
            ContentType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request parameters to be used by the client verbatim for uploading
  ///  Name: UP_R_IMG
  /// </summary>
  public sealed partial class NetUploadImageRes : pb::IMessage<NetUploadImageRes> {
    private static readonly pb::MessageParser<NetUploadImageRes> _parser = new pb::MessageParser<NetUploadImageRes>(() => new NetUploadImageRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetUploadImageRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.NetStorageProtobufReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetUploadImageRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetUploadImageRes(NetUploadImageRes other) : this() {
      requestMethod_ = other.requestMethod_;
      requestUrl_ = other.requestUrl_;
      fileExists_ = other.fileExists_;
      uploadKey_ = other.uploadKey_;
      coverUrl_ = other.coverUrl_;
      thumbnailUrl_ = other.thumbnailUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetUploadImageRes Clone() {
      return new NetUploadImageRes(this);
    }

    /// <summary>Field number for the "requestMethod" field.</summary>
    public const int RequestMethodFieldNumber = 1;
    private string requestMethod_ = "";
    /// <summary>
    ///  Request options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestMethod {
      get { return requestMethod_; }
      set {
        requestMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requestUrl" field.</summary>
    public const int RequestUrlFieldNumber = 2;
    private string requestUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestUrl {
      get { return requestUrl_; }
      set {
        requestUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fileExists" field.</summary>
    public const int FileExistsFieldNumber = 9;
    private bool fileExists_;
    /// <summary>
    ///  Result options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FileExists {
      get { return fileExists_; }
      set {
        fileExists_ = value;
      }
    }

    /// <summary>Field number for the "uploadKey" field.</summary>
    public const int UploadKeyFieldNumber = 10;
    private string uploadKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UploadKey {
      get { return uploadKey_; }
      set {
        uploadKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coverUrl" field.</summary>
    public const int CoverUrlFieldNumber = 11;
    private string coverUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoverUrl {
      get { return coverUrl_; }
      set {
        coverUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumbnailUrl" field.</summary>
    public const int ThumbnailUrlFieldNumber = 12;
    private string thumbnailUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ThumbnailUrl {
      get { return thumbnailUrl_; }
      set {
        thumbnailUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetUploadImageRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetUploadImageRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestMethod != other.RequestMethod) return false;
      if (RequestUrl != other.RequestUrl) return false;
      if (FileExists != other.FileExists) return false;
      if (UploadKey != other.UploadKey) return false;
      if (CoverUrl != other.CoverUrl) return false;
      if (ThumbnailUrl != other.ThumbnailUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestMethod.Length != 0) hash ^= RequestMethod.GetHashCode();
      if (RequestUrl.Length != 0) hash ^= RequestUrl.GetHashCode();
      if (FileExists != false) hash ^= FileExists.GetHashCode();
      if (UploadKey.Length != 0) hash ^= UploadKey.GetHashCode();
      if (CoverUrl.Length != 0) hash ^= CoverUrl.GetHashCode();
      if (ThumbnailUrl.Length != 0) hash ^= ThumbnailUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestMethod.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestMethod);
      }
      if (RequestUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RequestUrl);
      }
      if (FileExists != false) {
        output.WriteRawTag(72);
        output.WriteBool(FileExists);
      }
      if (UploadKey.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UploadKey);
      }
      if (CoverUrl.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CoverUrl);
      }
      if (ThumbnailUrl.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ThumbnailUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestMethod);
      }
      if (RequestUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestUrl);
      }
      if (FileExists != false) {
        size += 1 + 1;
      }
      if (UploadKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UploadKey);
      }
      if (CoverUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoverUrl);
      }
      if (ThumbnailUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ThumbnailUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetUploadImageRes other) {
      if (other == null) {
        return;
      }
      if (other.RequestMethod.Length != 0) {
        RequestMethod = other.RequestMethod;
      }
      if (other.RequestUrl.Length != 0) {
        RequestUrl = other.RequestUrl;
      }
      if (other.FileExists != false) {
        FileExists = other.FileExists;
      }
      if (other.UploadKey.Length != 0) {
        UploadKey = other.UploadKey;
      }
      if (other.CoverUrl.Length != 0) {
        CoverUrl = other.CoverUrl;
      }
      if (other.ThumbnailUrl.Length != 0) {
        ThumbnailUrl = other.ThumbnailUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RequestMethod = input.ReadString();
            break;
          }
          case 18: {
            RequestUrl = input.ReadString();
            break;
          }
          case 72: {
            FileExists = input.ReadBool();
            break;
          }
          case 82: {
            UploadKey = input.ReadString();
            break;
          }
          case 90: {
            CoverUrl = input.ReadString();
            break;
          }
          case 98: {
            ThumbnailUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
