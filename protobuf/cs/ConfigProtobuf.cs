// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_protobuf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace InfX {

  /// <summary>Holder for reflection information generated from config_protobuf.proto</summary>
  public static partial class ConfigProtobufReflection {

    #region Descriptor
    /// <summary>File descriptor for config_protobuf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigProtobufReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVjb25maWdfcHJvdG9idWYucHJvdG8SA2luZhoTZW51bV9wcm90b2J1Zi5w",
            "cm90byIlChNDb25maWdTdWJDYXRlZ29yaWVzEg4KBmxhYmVscxgBIAMoCSI5",
            "ChBDb25maWdDYXRlZ29yaWVzEiUKA3N1YhgBIAMoCzIYLmluZi5Db25maWdT",
            "dWJDYXRlZ29yaWVzIoYDChNDb25maWdPQXV0aFByb3ZpZGVyEg8KB3Zpc2li",
            "bGUYASABKAgSDwoHZW5hYmxlZBgCIAEoCBINCgVsYWJlbBgDIAEoCRIYChBm",
            "b250QXdlc29tZUJyYW5kGA4gASgFEiYKCW1lY2hhbmlzbRgPIAEoDjITLmlu",
            "Zi5PQXV0aE1lY2hhbmlzbRIMCgRob3N0GAQgASgJEhMKC2NhbGxiYWNrVXJs",
            "GAkgASgJEhcKD3JlcXVlc3RUb2tlblVybBgFIAEoCRIXCg9hdXRoZW50aWNh",
            "dGVVcmwYBiABKAkSFgoOYWNjZXNzVG9rZW5VcmwYECABKAkSEwoLY29uc3Vt",
            "ZXJLZXkYCiABKAkSFgoOY29uc3VtZXJTZWNyZXQYCyABKAkSDwoHYXV0aFVy",
            "bBgHIAEoCRIRCglhdXRoUXVlcnkYCCABKAkSEAoIY2xpZW50SWQYDCABKAkS",
            "FAoMY2xpZW50U2VjcmV0GBEgASgJEhYKDndoaXRlbGlzdEhvc3RzGBIgAygJ",
            "Ij0KFENvbmZpZ09BdXRoUHJvdmlkZXJzEiUKA2FsbBgBIAMoCzIYLmluZi5D",
            "b25maWdPQXV0aFByb3ZpZGVyIqYGCg5Db25maWdTZXJ2aWNlcxIOCgZkb21h",
            "aW4YGCABKAkSEAoIYXBpSG9zdHMYCCADKAkSEQoJY29uZmlnVXJsGAkgASgJ",
            "EhkKEXRlcm1zT2ZTZXJ2aWNlVXJsGAogASgJEhgKEHByaXZhY3lQb2xpY3lV",
            "cmwYCyABKAkSGwoTY29ubmVjdGlvbkZhaWxlZFVybBgdIAEoCRIRCgltYXBi",
            "b3hBcGkYASABKAkSHQoVbWFwYm94VXJsVGVtcGxhdGVEYXJrGAIgASgJEh4K",
            "Fm1hcGJveFVybFRlbXBsYXRlTGlnaHQYHiABKAkSEwoLbWFwYm94VG9rZW4Y",
            "AyABKAkSFAoMc3BhY2VzUmVnaW9uGAQgASgJEhEKCXNwYWNlc0tleRgFIAEo",
            "CRIUCgxzcGFjZXNTZWNyZXQYBiABKAkSFAoMc3BhY2VzQnVja2V0GAcgASgJ",
            "EhUKDWNsb3VkaW5hcnlVcmwYEyABKAkSHgoWY2xvdWRpbmFyeVRodW1ibmFp",
            "bFVybBgUIAEoCRIlCh1jbG91ZGluYXJ5Qmx1cnJlZFRodW1ibmFpbFVybBgf",
            "IAEoCRIaChJjbG91ZGluYXJ5Q292ZXJVcmwYFSABKAkSIQoZY2xvdWRpbmFy",
            "eUJsdXJyZWRDb3ZlclVybBggIAEoCRISCgppcHN0YWNrQXBpGA0gASgJEhIK",
            "Cmlwc3RhY2tLZXkYDCABKAkSEwoLbWFyaWFkYkhvc3QYDiABKAkSEwoLbWFy",
            "aWFkYlBvcnQYDyABKAUSEwoLbWFyaWFkYlVzZXIYECABKAkSFwoPbWFyaWFk",
            "YlBhc3N3b3JkGBEgASgJEhcKD21hcmlhZGJEYXRhYmFzZRgSIAEoCRIUCgxm",
            "cmVzaGRlc2tBcGkYFiABKAkSFAoMZnJlc2hkZXNrS2V5GBcgASgJEhkKEWZp",
            "cmViYXNlU2VydmVyS2V5GBkgASgJEhgKEGZpcmViYXNlU2VuZGVySWQYGiAB",
            "KAkSGQoRZmlyZWJhc2VMZWdhY3lBcGkYGyABKAkSHwoXZmlyZWJhc2VMZWdh",
            "Y3lTZXJ2ZXJLZXkYHCABKAkiuwEKCkNvbmZpZ0RhdGESFQoNY2xpZW50VmVy",
            "c2lvbhgBIAEoBRIRCgl0aW1lc3RhbXAYBSABKAMSKQoKY2F0ZWdvcmllcxgC",
            "IAEoCzIVLmluZi5Db25maWdDYXRlZ29yaWVzEjEKDm9hdXRoUHJvdmlkZXJz",
            "GAMgASgLMhkuaW5mLkNvbmZpZ09BdXRoUHJvdmlkZXJzEiUKCHNlcnZpY2Vz",
            "GAYgASgLMhMuaW5mLkNvbmZpZ1NlcnZpY2VzQgeqAgRJbmZYYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::InfX.EnumProtobufReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigSubCategories), global::InfX.ConfigSubCategories.Parser, new[]{ "Labels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigCategories), global::InfX.ConfigCategories.Parser, new[]{ "Sub" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigOAuthProvider), global::InfX.ConfigOAuthProvider.Parser, new[]{ "Visible", "Enabled", "Label", "FontAwesomeBrand", "Mechanism", "Host", "CallbackUrl", "RequestTokenUrl", "AuthenticateUrl", "AccessTokenUrl", "ConsumerKey", "ConsumerSecret", "AuthUrl", "AuthQuery", "ClientId", "ClientSecret", "WhitelistHosts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigOAuthProviders), global::InfX.ConfigOAuthProviders.Parser, new[]{ "All" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigServices), global::InfX.ConfigServices.Parser, new[]{ "Domain", "ApiHosts", "ConfigUrl", "TermsOfServiceUrl", "PrivacyPolicyUrl", "ConnectionFailedUrl", "MapboxApi", "MapboxUrlTemplateDark", "MapboxUrlTemplateLight", "MapboxToken", "SpacesRegion", "SpacesKey", "SpacesSecret", "SpacesBucket", "CloudinaryUrl", "CloudinaryThumbnailUrl", "CloudinaryBlurredThumbnailUrl", "CloudinaryCoverUrl", "CloudinaryBlurredCoverUrl", "IpstackApi", "IpstackKey", "MariadbHost", "MariadbPort", "MariadbUser", "MariadbPassword", "MariadbDatabase", "FreshdeskApi", "FreshdeskKey", "FirebaseServerKey", "FirebaseSenderId", "FirebaseLegacyApi", "FirebaseLegacyServerKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigData), global::InfX.ConfigData.Parser, new[]{ "ClientVersion", "Timestamp", "Categories", "OauthProviders", "Services" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ConfigSubCategories : pb::IMessage<ConfigSubCategories> {
    private static readonly pb::MessageParser<ConfigSubCategories> _parser = new pb::MessageParser<ConfigSubCategories>(() => new ConfigSubCategories());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigSubCategories> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.ConfigProtobufReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSubCategories() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSubCategories(ConfigSubCategories other) : this() {
      labels_ = other.labels_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSubCategories Clone() {
      return new ConfigSubCategories(this);
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_labels_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> labels_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Labels {
      get { return labels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigSubCategories);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigSubCategories other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!labels_.Equals(other.labels_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= labels_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      labels_.WriteTo(output, _repeated_labels_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += labels_.CalculateSize(_repeated_labels_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigSubCategories other) {
      if (other == null) {
        return;
      }
      labels_.Add(other.labels_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            labels_.AddEntriesFrom(input, _repeated_labels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigCategories : pb::IMessage<ConfigCategories> {
    private static readonly pb::MessageParser<ConfigCategories> _parser = new pb::MessageParser<ConfigCategories>(() => new ConfigCategories());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigCategories> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.ConfigProtobufReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigCategories() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigCategories(ConfigCategories other) : this() {
      sub_ = other.sub_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigCategories Clone() {
      return new ConfigCategories(this);
    }

    /// <summary>Field number for the "sub" field.</summary>
    public const int SubFieldNumber = 1;
    private static readonly pb::FieldCodec<global::InfX.ConfigSubCategories> _repeated_sub_codec
        = pb::FieldCodec.ForMessage(10, global::InfX.ConfigSubCategories.Parser);
    private readonly pbc::RepeatedField<global::InfX.ConfigSubCategories> sub_ = new pbc::RepeatedField<global::InfX.ConfigSubCategories>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.ConfigSubCategories> Sub {
      get { return sub_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigCategories);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigCategories other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sub_.Equals(other.sub_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sub_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sub_.WriteTo(output, _repeated_sub_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sub_.CalculateSize(_repeated_sub_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigCategories other) {
      if (other == null) {
        return;
      }
      sub_.Add(other.sub_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sub_.AddEntriesFrom(input, _repeated_sub_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigOAuthProvider : pb::IMessage<ConfigOAuthProvider> {
    private static readonly pb::MessageParser<ConfigOAuthProvider> _parser = new pb::MessageParser<ConfigOAuthProvider>(() => new ConfigOAuthProvider());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigOAuthProvider> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.ConfigProtobufReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProvider() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProvider(ConfigOAuthProvider other) : this() {
      visible_ = other.visible_;
      enabled_ = other.enabled_;
      label_ = other.label_;
      fontAwesomeBrand_ = other.fontAwesomeBrand_;
      mechanism_ = other.mechanism_;
      host_ = other.host_;
      callbackUrl_ = other.callbackUrl_;
      requestTokenUrl_ = other.requestTokenUrl_;
      authenticateUrl_ = other.authenticateUrl_;
      accessTokenUrl_ = other.accessTokenUrl_;
      consumerKey_ = other.consumerKey_;
      consumerSecret_ = other.consumerSecret_;
      authUrl_ = other.authUrl_;
      authQuery_ = other.authQuery_;
      clientId_ = other.clientId_;
      clientSecret_ = other.clientSecret_;
      whitelistHosts_ = other.whitelistHosts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProvider Clone() {
      return new ConfigOAuthProvider(this);
    }

    /// <summary>Field number for the "visible" field.</summary>
    public const int VisibleFieldNumber = 1;
    private bool visible_;
    /// <summary>
    /// / Whether the OAuth provider is visible in the UI
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Visible {
      get { return visible_; }
      set {
        visible_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 2;
    private bool enabled_;
    /// <summary>
    /// / Whether the OAuth provider can be used to authenticate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 3;
    private string label_ = "";
    /// <summary>
    /// / Visual name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fontAwesomeBrand" field.</summary>
    public const int FontAwesomeBrandFieldNumber = 14;
    private int fontAwesomeBrand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FontAwesomeBrand {
      get { return fontAwesomeBrand_; }
      set {
        fontAwesomeBrand_ = value;
      }
    }

    /// <summary>Field number for the "mechanism" field.</summary>
    public const int MechanismFieldNumber = 15;
    private global::InfX.OAuthMechanism mechanism_ = 0;
    /// <summary>
    /// / OAuth mechanism
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.OAuthMechanism Mechanism {
      get { return mechanism_; }
      set {
        mechanism_ = value;
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 4;
    private string host_ = "";
    /// <summary>
    /// / API endpoints of the OAuth provider
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "callbackUrl" field.</summary>
    public const int CallbackUrlFieldNumber = 9;
    private string callbackUrl_ = "";
    /// <summary>
    /// / Url that will be used to detect login success by the app
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallbackUrl {
      get { return callbackUrl_; }
      set {
        callbackUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requestTokenUrl" field.</summary>
    public const int RequestTokenUrlFieldNumber = 5;
    private string requestTokenUrl_ = "";
    /// <summary>
    /// / API endpoints for Twitter-like OAuth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestTokenUrl {
      get { return requestTokenUrl_; }
      set {
        requestTokenUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authenticateUrl" field.</summary>
    public const int AuthenticateUrlFieldNumber = 6;
    private string authenticateUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthenticateUrl {
      get { return authenticateUrl_; }
      set {
        authenticateUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accessTokenUrl" field.</summary>
    public const int AccessTokenUrlFieldNumber = 16;
    private string accessTokenUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessTokenUrl {
      get { return accessTokenUrl_; }
      set {
        accessTokenUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "consumerKey" field.</summary>
    public const int ConsumerKeyFieldNumber = 10;
    private string consumerKey_ = "";
    /// <summary>
    /// / Generated by the OAuth provider, Twitter-like
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConsumerKey {
      get { return consumerKey_; }
      set {
        consumerKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "consumerSecret" field.</summary>
    public const int ConsumerSecretFieldNumber = 11;
    private string consumerSecret_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConsumerSecret {
      get { return consumerSecret_; }
      set {
        consumerSecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authUrl" field.</summary>
    public const int AuthUrlFieldNumber = 7;
    private string authUrl_ = "";
    /// <summary>
    /// / API endpoints for Spotify-like OAuth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthUrl {
      get { return authUrl_; }
      set {
        authUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authQuery" field.</summary>
    public const int AuthQueryFieldNumber = 8;
    private string authQuery_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthQuery {
      get { return authQuery_; }
      set {
        authQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientId" field.</summary>
    public const int ClientIdFieldNumber = 12;
    private string clientId_ = "";
    /// <summary>
    /// / From OAuth provider, Spotify-like
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientSecret" field.</summary>
    public const int ClientSecretFieldNumber = 17;
    private string clientSecret_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientSecret {
      get { return clientSecret_; }
      set {
        clientSecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "whitelistHosts" field.</summary>
    public const int WhitelistHostsFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _repeated_whitelistHosts_codec
        = pb::FieldCodec.ForString(146);
    private readonly pbc::RepeatedField<string> whitelistHosts_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// / Whitelisted hosts during authentication
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WhitelistHosts {
      get { return whitelistHosts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigOAuthProvider);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigOAuthProvider other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Visible != other.Visible) return false;
      if (Enabled != other.Enabled) return false;
      if (Label != other.Label) return false;
      if (FontAwesomeBrand != other.FontAwesomeBrand) return false;
      if (Mechanism != other.Mechanism) return false;
      if (Host != other.Host) return false;
      if (CallbackUrl != other.CallbackUrl) return false;
      if (RequestTokenUrl != other.RequestTokenUrl) return false;
      if (AuthenticateUrl != other.AuthenticateUrl) return false;
      if (AccessTokenUrl != other.AccessTokenUrl) return false;
      if (ConsumerKey != other.ConsumerKey) return false;
      if (ConsumerSecret != other.ConsumerSecret) return false;
      if (AuthUrl != other.AuthUrl) return false;
      if (AuthQuery != other.AuthQuery) return false;
      if (ClientId != other.ClientId) return false;
      if (ClientSecret != other.ClientSecret) return false;
      if(!whitelistHosts_.Equals(other.whitelistHosts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Visible != false) hash ^= Visible.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (FontAwesomeBrand != 0) hash ^= FontAwesomeBrand.GetHashCode();
      if (Mechanism != 0) hash ^= Mechanism.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (CallbackUrl.Length != 0) hash ^= CallbackUrl.GetHashCode();
      if (RequestTokenUrl.Length != 0) hash ^= RequestTokenUrl.GetHashCode();
      if (AuthenticateUrl.Length != 0) hash ^= AuthenticateUrl.GetHashCode();
      if (AccessTokenUrl.Length != 0) hash ^= AccessTokenUrl.GetHashCode();
      if (ConsumerKey.Length != 0) hash ^= ConsumerKey.GetHashCode();
      if (ConsumerSecret.Length != 0) hash ^= ConsumerSecret.GetHashCode();
      if (AuthUrl.Length != 0) hash ^= AuthUrl.GetHashCode();
      if (AuthQuery.Length != 0) hash ^= AuthQuery.GetHashCode();
      if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
      if (ClientSecret.Length != 0) hash ^= ClientSecret.GetHashCode();
      hash ^= whitelistHosts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Visible != false) {
        output.WriteRawTag(8);
        output.WriteBool(Visible);
      }
      if (Enabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enabled);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Label);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Host);
      }
      if (RequestTokenUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RequestTokenUrl);
      }
      if (AuthenticateUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AuthenticateUrl);
      }
      if (AuthUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AuthUrl);
      }
      if (AuthQuery.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AuthQuery);
      }
      if (CallbackUrl.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CallbackUrl);
      }
      if (ConsumerKey.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ConsumerKey);
      }
      if (ConsumerSecret.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ConsumerSecret);
      }
      if (ClientId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ClientId);
      }
      if (FontAwesomeBrand != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(FontAwesomeBrand);
      }
      if (Mechanism != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Mechanism);
      }
      if (AccessTokenUrl.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(AccessTokenUrl);
      }
      if (ClientSecret.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ClientSecret);
      }
      whitelistHosts_.WriteTo(output, _repeated_whitelistHosts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Visible != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (FontAwesomeBrand != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FontAwesomeBrand);
      }
      if (Mechanism != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mechanism);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (CallbackUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallbackUrl);
      }
      if (RequestTokenUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestTokenUrl);
      }
      if (AuthenticateUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthenticateUrl);
      }
      if (AccessTokenUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessTokenUrl);
      }
      if (ConsumerKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConsumerKey);
      }
      if (ConsumerSecret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConsumerSecret);
      }
      if (AuthUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthUrl);
      }
      if (AuthQuery.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthQuery);
      }
      if (ClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      if (ClientSecret.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientSecret);
      }
      size += whitelistHosts_.CalculateSize(_repeated_whitelistHosts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigOAuthProvider other) {
      if (other == null) {
        return;
      }
      if (other.Visible != false) {
        Visible = other.Visible;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.FontAwesomeBrand != 0) {
        FontAwesomeBrand = other.FontAwesomeBrand;
      }
      if (other.Mechanism != 0) {
        Mechanism = other.Mechanism;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.CallbackUrl.Length != 0) {
        CallbackUrl = other.CallbackUrl;
      }
      if (other.RequestTokenUrl.Length != 0) {
        RequestTokenUrl = other.RequestTokenUrl;
      }
      if (other.AuthenticateUrl.Length != 0) {
        AuthenticateUrl = other.AuthenticateUrl;
      }
      if (other.AccessTokenUrl.Length != 0) {
        AccessTokenUrl = other.AccessTokenUrl;
      }
      if (other.ConsumerKey.Length != 0) {
        ConsumerKey = other.ConsumerKey;
      }
      if (other.ConsumerSecret.Length != 0) {
        ConsumerSecret = other.ConsumerSecret;
      }
      if (other.AuthUrl.Length != 0) {
        AuthUrl = other.AuthUrl;
      }
      if (other.AuthQuery.Length != 0) {
        AuthQuery = other.AuthQuery;
      }
      if (other.ClientId.Length != 0) {
        ClientId = other.ClientId;
      }
      if (other.ClientSecret.Length != 0) {
        ClientSecret = other.ClientSecret;
      }
      whitelistHosts_.Add(other.whitelistHosts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Visible = input.ReadBool();
            break;
          }
          case 16: {
            Enabled = input.ReadBool();
            break;
          }
          case 26: {
            Label = input.ReadString();
            break;
          }
          case 34: {
            Host = input.ReadString();
            break;
          }
          case 42: {
            RequestTokenUrl = input.ReadString();
            break;
          }
          case 50: {
            AuthenticateUrl = input.ReadString();
            break;
          }
          case 58: {
            AuthUrl = input.ReadString();
            break;
          }
          case 66: {
            AuthQuery = input.ReadString();
            break;
          }
          case 74: {
            CallbackUrl = input.ReadString();
            break;
          }
          case 82: {
            ConsumerKey = input.ReadString();
            break;
          }
          case 90: {
            ConsumerSecret = input.ReadString();
            break;
          }
          case 98: {
            ClientId = input.ReadString();
            break;
          }
          case 112: {
            FontAwesomeBrand = input.ReadInt32();
            break;
          }
          case 120: {
            mechanism_ = (global::InfX.OAuthMechanism) input.ReadEnum();
            break;
          }
          case 130: {
            AccessTokenUrl = input.ReadString();
            break;
          }
          case 138: {
            ClientSecret = input.ReadString();
            break;
          }
          case 146: {
            whitelistHosts_.AddEntriesFrom(input, _repeated_whitelistHosts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigOAuthProviders : pb::IMessage<ConfigOAuthProviders> {
    private static readonly pb::MessageParser<ConfigOAuthProviders> _parser = new pb::MessageParser<ConfigOAuthProviders>(() => new ConfigOAuthProviders());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigOAuthProviders> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.ConfigProtobufReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProviders() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProviders(ConfigOAuthProviders other) : this() {
      all_ = other.all_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProviders Clone() {
      return new ConfigOAuthProviders(this);
    }

    /// <summary>Field number for the "all" field.</summary>
    public const int AllFieldNumber = 1;
    private static readonly pb::FieldCodec<global::InfX.ConfigOAuthProvider> _repeated_all_codec
        = pb::FieldCodec.ForMessage(10, global::InfX.ConfigOAuthProvider.Parser);
    private readonly pbc::RepeatedField<global::InfX.ConfigOAuthProvider> all_ = new pbc::RepeatedField<global::InfX.ConfigOAuthProvider>();
    /// <summary>
    /// / List of all OAuthProviders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.ConfigOAuthProvider> All {
      get { return all_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigOAuthProviders);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigOAuthProviders other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!all_.Equals(other.all_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= all_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      all_.WriteTo(output, _repeated_all_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += all_.CalculateSize(_repeated_all_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigOAuthProviders other) {
      if (other == null) {
        return;
      }
      all_.Add(other.all_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            all_.AddEntriesFrom(input, _repeated_all_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigServices : pb::IMessage<ConfigServices> {
    private static readonly pb::MessageParser<ConfigServices> _parser = new pb::MessageParser<ConfigServices>(() => new ConfigServices());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigServices> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.ConfigProtobufReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigServices() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigServices(ConfigServices other) : this() {
      domain_ = other.domain_;
      apiHosts_ = other.apiHosts_.Clone();
      configUrl_ = other.configUrl_;
      termsOfServiceUrl_ = other.termsOfServiceUrl_;
      privacyPolicyUrl_ = other.privacyPolicyUrl_;
      connectionFailedUrl_ = other.connectionFailedUrl_;
      mapboxApi_ = other.mapboxApi_;
      mapboxUrlTemplateDark_ = other.mapboxUrlTemplateDark_;
      mapboxUrlTemplateLight_ = other.mapboxUrlTemplateLight_;
      mapboxToken_ = other.mapboxToken_;
      spacesRegion_ = other.spacesRegion_;
      spacesKey_ = other.spacesKey_;
      spacesSecret_ = other.spacesSecret_;
      spacesBucket_ = other.spacesBucket_;
      cloudinaryUrl_ = other.cloudinaryUrl_;
      cloudinaryThumbnailUrl_ = other.cloudinaryThumbnailUrl_;
      cloudinaryBlurredThumbnailUrl_ = other.cloudinaryBlurredThumbnailUrl_;
      cloudinaryCoverUrl_ = other.cloudinaryCoverUrl_;
      cloudinaryBlurredCoverUrl_ = other.cloudinaryBlurredCoverUrl_;
      ipstackApi_ = other.ipstackApi_;
      ipstackKey_ = other.ipstackKey_;
      mariadbHost_ = other.mariadbHost_;
      mariadbPort_ = other.mariadbPort_;
      mariadbUser_ = other.mariadbUser_;
      mariadbPassword_ = other.mariadbPassword_;
      mariadbDatabase_ = other.mariadbDatabase_;
      freshdeskApi_ = other.freshdeskApi_;
      freshdeskKey_ = other.freshdeskKey_;
      firebaseServerKey_ = other.firebaseServerKey_;
      firebaseSenderId_ = other.firebaseSenderId_;
      firebaseLegacyApi_ = other.firebaseLegacyApi_;
      firebaseLegacyServerKey_ = other.firebaseLegacyServerKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigServices Clone() {
      return new ConfigServices(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 24;
    private string domain_ = "";
    /// <summary>
    ///  INF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "apiHosts" field.</summary>
    public const int ApiHostsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_apiHosts_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> apiHosts_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ApiHosts {
      get { return apiHosts_; }
    }

    /// <summary>Field number for the "configUrl" field.</summary>
    public const int ConfigUrlFieldNumber = 9;
    private string configUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConfigUrl {
      get { return configUrl_; }
      set {
        configUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "termsOfServiceUrl" field.</summary>
    public const int TermsOfServiceUrlFieldNumber = 10;
    private string termsOfServiceUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TermsOfServiceUrl {
      get { return termsOfServiceUrl_; }
      set {
        termsOfServiceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "privacyPolicyUrl" field.</summary>
    public const int PrivacyPolicyUrlFieldNumber = 11;
    private string privacyPolicyUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivacyPolicyUrl {
      get { return privacyPolicyUrl_; }
      set {
        privacyPolicyUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connectionFailedUrl" field.</summary>
    public const int ConnectionFailedUrlFieldNumber = 29;
    private string connectionFailedUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectionFailedUrl {
      get { return connectionFailedUrl_; }
      set {
        connectionFailedUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mapboxApi" field.</summary>
    public const int MapboxApiFieldNumber = 1;
    private string mapboxApi_ = "";
    /// <summary>
    ///  MapBox
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapboxApi {
      get { return mapboxApi_; }
      set {
        mapboxApi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mapboxUrlTemplateDark" field.</summary>
    public const int MapboxUrlTemplateDarkFieldNumber = 2;
    private string mapboxUrlTemplateDark_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapboxUrlTemplateDark {
      get { return mapboxUrlTemplateDark_; }
      set {
        mapboxUrlTemplateDark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mapboxUrlTemplateLight" field.</summary>
    public const int MapboxUrlTemplateLightFieldNumber = 30;
    private string mapboxUrlTemplateLight_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapboxUrlTemplateLight {
      get { return mapboxUrlTemplateLight_; }
      set {
        mapboxUrlTemplateLight_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mapboxToken" field.</summary>
    public const int MapboxTokenFieldNumber = 3;
    private string mapboxToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapboxToken {
      get { return mapboxToken_; }
      set {
        mapboxToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spacesRegion" field.</summary>
    public const int SpacesRegionFieldNumber = 4;
    private string spacesRegion_ = "";
    /// <summary>
    ///  DigitalOcean Spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpacesRegion {
      get { return spacesRegion_; }
      set {
        spacesRegion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spacesKey" field.</summary>
    public const int SpacesKeyFieldNumber = 5;
    private string spacesKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpacesKey {
      get { return spacesKey_; }
      set {
        spacesKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spacesSecret" field.</summary>
    public const int SpacesSecretFieldNumber = 6;
    private string spacesSecret_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpacesSecret {
      get { return spacesSecret_; }
      set {
        spacesSecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spacesBucket" field.</summary>
    public const int SpacesBucketFieldNumber = 7;
    private string spacesBucket_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpacesBucket {
      get { return spacesBucket_; }
      set {
        spacesBucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cloudinaryUrl" field.</summary>
    public const int CloudinaryUrlFieldNumber = 19;
    private string cloudinaryUrl_ = "";
    /// <summary>
    ///  Cloudinary (Url Templates)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloudinaryUrl {
      get { return cloudinaryUrl_; }
      set {
        cloudinaryUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cloudinaryThumbnailUrl" field.</summary>
    public const int CloudinaryThumbnailUrlFieldNumber = 20;
    private string cloudinaryThumbnailUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloudinaryThumbnailUrl {
      get { return cloudinaryThumbnailUrl_; }
      set {
        cloudinaryThumbnailUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cloudinaryBlurredThumbnailUrl" field.</summary>
    public const int CloudinaryBlurredThumbnailUrlFieldNumber = 31;
    private string cloudinaryBlurredThumbnailUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloudinaryBlurredThumbnailUrl {
      get { return cloudinaryBlurredThumbnailUrl_; }
      set {
        cloudinaryBlurredThumbnailUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cloudinaryCoverUrl" field.</summary>
    public const int CloudinaryCoverUrlFieldNumber = 21;
    private string cloudinaryCoverUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloudinaryCoverUrl {
      get { return cloudinaryCoverUrl_; }
      set {
        cloudinaryCoverUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cloudinaryBlurredCoverUrl" field.</summary>
    public const int CloudinaryBlurredCoverUrlFieldNumber = 32;
    private string cloudinaryBlurredCoverUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloudinaryBlurredCoverUrl {
      get { return cloudinaryBlurredCoverUrl_; }
      set {
        cloudinaryBlurredCoverUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipstackApi" field.</summary>
    public const int IpstackApiFieldNumber = 13;
    private string ipstackApi_ = "";
    /// <summary>
    ///  IPStack (FreeGeoIP)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpstackApi {
      get { return ipstackApi_; }
      set {
        ipstackApi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipstackKey" field.</summary>
    public const int IpstackKeyFieldNumber = 12;
    private string ipstackKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpstackKey {
      get { return ipstackKey_; }
      set {
        ipstackKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mariadbHost" field.</summary>
    public const int MariadbHostFieldNumber = 14;
    private string mariadbHost_ = "";
    /// <summary>
    ///  MariaDB (MySQL)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MariadbHost {
      get { return mariadbHost_; }
      set {
        mariadbHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mariadbPort" field.</summary>
    public const int MariadbPortFieldNumber = 15;
    private int mariadbPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MariadbPort {
      get { return mariadbPort_; }
      set {
        mariadbPort_ = value;
      }
    }

    /// <summary>Field number for the "mariadbUser" field.</summary>
    public const int MariadbUserFieldNumber = 16;
    private string mariadbUser_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MariadbUser {
      get { return mariadbUser_; }
      set {
        mariadbUser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mariadbPassword" field.</summary>
    public const int MariadbPasswordFieldNumber = 17;
    private string mariadbPassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MariadbPassword {
      get { return mariadbPassword_; }
      set {
        mariadbPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mariadbDatabase" field.</summary>
    public const int MariadbDatabaseFieldNumber = 18;
    private string mariadbDatabase_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MariadbDatabase {
      get { return mariadbDatabase_; }
      set {
        mariadbDatabase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "freshdeskApi" field.</summary>
    public const int FreshdeskApiFieldNumber = 22;
    private string freshdeskApi_ = "";
    /// <summary>
    ///  Freshdesk (Support)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FreshdeskApi {
      get { return freshdeskApi_; }
      set {
        freshdeskApi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "freshdeskKey" field.</summary>
    public const int FreshdeskKeyFieldNumber = 23;
    private string freshdeskKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FreshdeskKey {
      get { return freshdeskKey_; }
      set {
        freshdeskKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firebaseServerKey" field.</summary>
    public const int FirebaseServerKeyFieldNumber = 25;
    private string firebaseServerKey_ = "";
    /// <summary>
    ///  Firebase (Cloud Messaging)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirebaseServerKey {
      get { return firebaseServerKey_; }
      set {
        firebaseServerKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firebaseSenderId" field.</summary>
    public const int FirebaseSenderIdFieldNumber = 26;
    private string firebaseSenderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirebaseSenderId {
      get { return firebaseSenderId_; }
      set {
        firebaseSenderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firebaseLegacyApi" field.</summary>
    public const int FirebaseLegacyApiFieldNumber = 27;
    private string firebaseLegacyApi_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirebaseLegacyApi {
      get { return firebaseLegacyApi_; }
      set {
        firebaseLegacyApi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firebaseLegacyServerKey" field.</summary>
    public const int FirebaseLegacyServerKeyFieldNumber = 28;
    private string firebaseLegacyServerKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirebaseLegacyServerKey {
      get { return firebaseLegacyServerKey_; }
      set {
        firebaseLegacyServerKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigServices);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigServices other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if(!apiHosts_.Equals(other.apiHosts_)) return false;
      if (ConfigUrl != other.ConfigUrl) return false;
      if (TermsOfServiceUrl != other.TermsOfServiceUrl) return false;
      if (PrivacyPolicyUrl != other.PrivacyPolicyUrl) return false;
      if (ConnectionFailedUrl != other.ConnectionFailedUrl) return false;
      if (MapboxApi != other.MapboxApi) return false;
      if (MapboxUrlTemplateDark != other.MapboxUrlTemplateDark) return false;
      if (MapboxUrlTemplateLight != other.MapboxUrlTemplateLight) return false;
      if (MapboxToken != other.MapboxToken) return false;
      if (SpacesRegion != other.SpacesRegion) return false;
      if (SpacesKey != other.SpacesKey) return false;
      if (SpacesSecret != other.SpacesSecret) return false;
      if (SpacesBucket != other.SpacesBucket) return false;
      if (CloudinaryUrl != other.CloudinaryUrl) return false;
      if (CloudinaryThumbnailUrl != other.CloudinaryThumbnailUrl) return false;
      if (CloudinaryBlurredThumbnailUrl != other.CloudinaryBlurredThumbnailUrl) return false;
      if (CloudinaryCoverUrl != other.CloudinaryCoverUrl) return false;
      if (CloudinaryBlurredCoverUrl != other.CloudinaryBlurredCoverUrl) return false;
      if (IpstackApi != other.IpstackApi) return false;
      if (IpstackKey != other.IpstackKey) return false;
      if (MariadbHost != other.MariadbHost) return false;
      if (MariadbPort != other.MariadbPort) return false;
      if (MariadbUser != other.MariadbUser) return false;
      if (MariadbPassword != other.MariadbPassword) return false;
      if (MariadbDatabase != other.MariadbDatabase) return false;
      if (FreshdeskApi != other.FreshdeskApi) return false;
      if (FreshdeskKey != other.FreshdeskKey) return false;
      if (FirebaseServerKey != other.FirebaseServerKey) return false;
      if (FirebaseSenderId != other.FirebaseSenderId) return false;
      if (FirebaseLegacyApi != other.FirebaseLegacyApi) return false;
      if (FirebaseLegacyServerKey != other.FirebaseLegacyServerKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      hash ^= apiHosts_.GetHashCode();
      if (ConfigUrl.Length != 0) hash ^= ConfigUrl.GetHashCode();
      if (TermsOfServiceUrl.Length != 0) hash ^= TermsOfServiceUrl.GetHashCode();
      if (PrivacyPolicyUrl.Length != 0) hash ^= PrivacyPolicyUrl.GetHashCode();
      if (ConnectionFailedUrl.Length != 0) hash ^= ConnectionFailedUrl.GetHashCode();
      if (MapboxApi.Length != 0) hash ^= MapboxApi.GetHashCode();
      if (MapboxUrlTemplateDark.Length != 0) hash ^= MapboxUrlTemplateDark.GetHashCode();
      if (MapboxUrlTemplateLight.Length != 0) hash ^= MapboxUrlTemplateLight.GetHashCode();
      if (MapboxToken.Length != 0) hash ^= MapboxToken.GetHashCode();
      if (SpacesRegion.Length != 0) hash ^= SpacesRegion.GetHashCode();
      if (SpacesKey.Length != 0) hash ^= SpacesKey.GetHashCode();
      if (SpacesSecret.Length != 0) hash ^= SpacesSecret.GetHashCode();
      if (SpacesBucket.Length != 0) hash ^= SpacesBucket.GetHashCode();
      if (CloudinaryUrl.Length != 0) hash ^= CloudinaryUrl.GetHashCode();
      if (CloudinaryThumbnailUrl.Length != 0) hash ^= CloudinaryThumbnailUrl.GetHashCode();
      if (CloudinaryBlurredThumbnailUrl.Length != 0) hash ^= CloudinaryBlurredThumbnailUrl.GetHashCode();
      if (CloudinaryCoverUrl.Length != 0) hash ^= CloudinaryCoverUrl.GetHashCode();
      if (CloudinaryBlurredCoverUrl.Length != 0) hash ^= CloudinaryBlurredCoverUrl.GetHashCode();
      if (IpstackApi.Length != 0) hash ^= IpstackApi.GetHashCode();
      if (IpstackKey.Length != 0) hash ^= IpstackKey.GetHashCode();
      if (MariadbHost.Length != 0) hash ^= MariadbHost.GetHashCode();
      if (MariadbPort != 0) hash ^= MariadbPort.GetHashCode();
      if (MariadbUser.Length != 0) hash ^= MariadbUser.GetHashCode();
      if (MariadbPassword.Length != 0) hash ^= MariadbPassword.GetHashCode();
      if (MariadbDatabase.Length != 0) hash ^= MariadbDatabase.GetHashCode();
      if (FreshdeskApi.Length != 0) hash ^= FreshdeskApi.GetHashCode();
      if (FreshdeskKey.Length != 0) hash ^= FreshdeskKey.GetHashCode();
      if (FirebaseServerKey.Length != 0) hash ^= FirebaseServerKey.GetHashCode();
      if (FirebaseSenderId.Length != 0) hash ^= FirebaseSenderId.GetHashCode();
      if (FirebaseLegacyApi.Length != 0) hash ^= FirebaseLegacyApi.GetHashCode();
      if (FirebaseLegacyServerKey.Length != 0) hash ^= FirebaseLegacyServerKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapboxApi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MapboxApi);
      }
      if (MapboxUrlTemplateDark.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MapboxUrlTemplateDark);
      }
      if (MapboxToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MapboxToken);
      }
      if (SpacesRegion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SpacesRegion);
      }
      if (SpacesKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SpacesKey);
      }
      if (SpacesSecret.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SpacesSecret);
      }
      if (SpacesBucket.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SpacesBucket);
      }
      apiHosts_.WriteTo(output, _repeated_apiHosts_codec);
      if (ConfigUrl.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ConfigUrl);
      }
      if (TermsOfServiceUrl.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TermsOfServiceUrl);
      }
      if (PrivacyPolicyUrl.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(PrivacyPolicyUrl);
      }
      if (IpstackKey.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(IpstackKey);
      }
      if (IpstackApi.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(IpstackApi);
      }
      if (MariadbHost.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(MariadbHost);
      }
      if (MariadbPort != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MariadbPort);
      }
      if (MariadbUser.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(MariadbUser);
      }
      if (MariadbPassword.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(MariadbPassword);
      }
      if (MariadbDatabase.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(MariadbDatabase);
      }
      if (CloudinaryUrl.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CloudinaryUrl);
      }
      if (CloudinaryThumbnailUrl.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CloudinaryThumbnailUrl);
      }
      if (CloudinaryCoverUrl.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CloudinaryCoverUrl);
      }
      if (FreshdeskApi.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(FreshdeskApi);
      }
      if (FreshdeskKey.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(FreshdeskKey);
      }
      if (Domain.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Domain);
      }
      if (FirebaseServerKey.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(FirebaseServerKey);
      }
      if (FirebaseSenderId.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(FirebaseSenderId);
      }
      if (FirebaseLegacyApi.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(FirebaseLegacyApi);
      }
      if (FirebaseLegacyServerKey.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(FirebaseLegacyServerKey);
      }
      if (ConnectionFailedUrl.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(ConnectionFailedUrl);
      }
      if (MapboxUrlTemplateLight.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(MapboxUrlTemplateLight);
      }
      if (CloudinaryBlurredThumbnailUrl.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(CloudinaryBlurredThumbnailUrl);
      }
      if (CloudinaryBlurredCoverUrl.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(CloudinaryBlurredCoverUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      size += apiHosts_.CalculateSize(_repeated_apiHosts_codec);
      if (ConfigUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigUrl);
      }
      if (TermsOfServiceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TermsOfServiceUrl);
      }
      if (PrivacyPolicyUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivacyPolicyUrl);
      }
      if (ConnectionFailedUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ConnectionFailedUrl);
      }
      if (MapboxApi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapboxApi);
      }
      if (MapboxUrlTemplateDark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapboxUrlTemplateDark);
      }
      if (MapboxUrlTemplateLight.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MapboxUrlTemplateLight);
      }
      if (MapboxToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapboxToken);
      }
      if (SpacesRegion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpacesRegion);
      }
      if (SpacesKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpacesKey);
      }
      if (SpacesSecret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpacesSecret);
      }
      if (SpacesBucket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpacesBucket);
      }
      if (CloudinaryUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CloudinaryUrl);
      }
      if (CloudinaryThumbnailUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CloudinaryThumbnailUrl);
      }
      if (CloudinaryBlurredThumbnailUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CloudinaryBlurredThumbnailUrl);
      }
      if (CloudinaryCoverUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CloudinaryCoverUrl);
      }
      if (CloudinaryBlurredCoverUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CloudinaryBlurredCoverUrl);
      }
      if (IpstackApi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpstackApi);
      }
      if (IpstackKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpstackKey);
      }
      if (MariadbHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MariadbHost);
      }
      if (MariadbPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MariadbPort);
      }
      if (MariadbUser.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MariadbUser);
      }
      if (MariadbPassword.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MariadbPassword);
      }
      if (MariadbDatabase.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MariadbDatabase);
      }
      if (FreshdeskApi.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FreshdeskApi);
      }
      if (FreshdeskKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FreshdeskKey);
      }
      if (FirebaseServerKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FirebaseServerKey);
      }
      if (FirebaseSenderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FirebaseSenderId);
      }
      if (FirebaseLegacyApi.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FirebaseLegacyApi);
      }
      if (FirebaseLegacyServerKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FirebaseLegacyServerKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigServices other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      apiHosts_.Add(other.apiHosts_);
      if (other.ConfigUrl.Length != 0) {
        ConfigUrl = other.ConfigUrl;
      }
      if (other.TermsOfServiceUrl.Length != 0) {
        TermsOfServiceUrl = other.TermsOfServiceUrl;
      }
      if (other.PrivacyPolicyUrl.Length != 0) {
        PrivacyPolicyUrl = other.PrivacyPolicyUrl;
      }
      if (other.ConnectionFailedUrl.Length != 0) {
        ConnectionFailedUrl = other.ConnectionFailedUrl;
      }
      if (other.MapboxApi.Length != 0) {
        MapboxApi = other.MapboxApi;
      }
      if (other.MapboxUrlTemplateDark.Length != 0) {
        MapboxUrlTemplateDark = other.MapboxUrlTemplateDark;
      }
      if (other.MapboxUrlTemplateLight.Length != 0) {
        MapboxUrlTemplateLight = other.MapboxUrlTemplateLight;
      }
      if (other.MapboxToken.Length != 0) {
        MapboxToken = other.MapboxToken;
      }
      if (other.SpacesRegion.Length != 0) {
        SpacesRegion = other.SpacesRegion;
      }
      if (other.SpacesKey.Length != 0) {
        SpacesKey = other.SpacesKey;
      }
      if (other.SpacesSecret.Length != 0) {
        SpacesSecret = other.SpacesSecret;
      }
      if (other.SpacesBucket.Length != 0) {
        SpacesBucket = other.SpacesBucket;
      }
      if (other.CloudinaryUrl.Length != 0) {
        CloudinaryUrl = other.CloudinaryUrl;
      }
      if (other.CloudinaryThumbnailUrl.Length != 0) {
        CloudinaryThumbnailUrl = other.CloudinaryThumbnailUrl;
      }
      if (other.CloudinaryBlurredThumbnailUrl.Length != 0) {
        CloudinaryBlurredThumbnailUrl = other.CloudinaryBlurredThumbnailUrl;
      }
      if (other.CloudinaryCoverUrl.Length != 0) {
        CloudinaryCoverUrl = other.CloudinaryCoverUrl;
      }
      if (other.CloudinaryBlurredCoverUrl.Length != 0) {
        CloudinaryBlurredCoverUrl = other.CloudinaryBlurredCoverUrl;
      }
      if (other.IpstackApi.Length != 0) {
        IpstackApi = other.IpstackApi;
      }
      if (other.IpstackKey.Length != 0) {
        IpstackKey = other.IpstackKey;
      }
      if (other.MariadbHost.Length != 0) {
        MariadbHost = other.MariadbHost;
      }
      if (other.MariadbPort != 0) {
        MariadbPort = other.MariadbPort;
      }
      if (other.MariadbUser.Length != 0) {
        MariadbUser = other.MariadbUser;
      }
      if (other.MariadbPassword.Length != 0) {
        MariadbPassword = other.MariadbPassword;
      }
      if (other.MariadbDatabase.Length != 0) {
        MariadbDatabase = other.MariadbDatabase;
      }
      if (other.FreshdeskApi.Length != 0) {
        FreshdeskApi = other.FreshdeskApi;
      }
      if (other.FreshdeskKey.Length != 0) {
        FreshdeskKey = other.FreshdeskKey;
      }
      if (other.FirebaseServerKey.Length != 0) {
        FirebaseServerKey = other.FirebaseServerKey;
      }
      if (other.FirebaseSenderId.Length != 0) {
        FirebaseSenderId = other.FirebaseSenderId;
      }
      if (other.FirebaseLegacyApi.Length != 0) {
        FirebaseLegacyApi = other.FirebaseLegacyApi;
      }
      if (other.FirebaseLegacyServerKey.Length != 0) {
        FirebaseLegacyServerKey = other.FirebaseLegacyServerKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MapboxApi = input.ReadString();
            break;
          }
          case 18: {
            MapboxUrlTemplateDark = input.ReadString();
            break;
          }
          case 26: {
            MapboxToken = input.ReadString();
            break;
          }
          case 34: {
            SpacesRegion = input.ReadString();
            break;
          }
          case 42: {
            SpacesKey = input.ReadString();
            break;
          }
          case 50: {
            SpacesSecret = input.ReadString();
            break;
          }
          case 58: {
            SpacesBucket = input.ReadString();
            break;
          }
          case 66: {
            apiHosts_.AddEntriesFrom(input, _repeated_apiHosts_codec);
            break;
          }
          case 74: {
            ConfigUrl = input.ReadString();
            break;
          }
          case 82: {
            TermsOfServiceUrl = input.ReadString();
            break;
          }
          case 90: {
            PrivacyPolicyUrl = input.ReadString();
            break;
          }
          case 98: {
            IpstackKey = input.ReadString();
            break;
          }
          case 106: {
            IpstackApi = input.ReadString();
            break;
          }
          case 114: {
            MariadbHost = input.ReadString();
            break;
          }
          case 120: {
            MariadbPort = input.ReadInt32();
            break;
          }
          case 130: {
            MariadbUser = input.ReadString();
            break;
          }
          case 138: {
            MariadbPassword = input.ReadString();
            break;
          }
          case 146: {
            MariadbDatabase = input.ReadString();
            break;
          }
          case 154: {
            CloudinaryUrl = input.ReadString();
            break;
          }
          case 162: {
            CloudinaryThumbnailUrl = input.ReadString();
            break;
          }
          case 170: {
            CloudinaryCoverUrl = input.ReadString();
            break;
          }
          case 178: {
            FreshdeskApi = input.ReadString();
            break;
          }
          case 186: {
            FreshdeskKey = input.ReadString();
            break;
          }
          case 194: {
            Domain = input.ReadString();
            break;
          }
          case 202: {
            FirebaseServerKey = input.ReadString();
            break;
          }
          case 210: {
            FirebaseSenderId = input.ReadString();
            break;
          }
          case 218: {
            FirebaseLegacyApi = input.ReadString();
            break;
          }
          case 226: {
            FirebaseLegacyServerKey = input.ReadString();
            break;
          }
          case 234: {
            ConnectionFailedUrl = input.ReadString();
            break;
          }
          case 242: {
            MapboxUrlTemplateLight = input.ReadString();
            break;
          }
          case 250: {
            CloudinaryBlurredThumbnailUrl = input.ReadString();
            break;
          }
          case 258: {
            CloudinaryBlurredCoverUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigData : pb::IMessage<ConfigData> {
    private static readonly pb::MessageParser<ConfigData> _parser = new pb::MessageParser<ConfigData>(() => new ConfigData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.ConfigProtobufReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigData(ConfigData other) : this() {
      clientVersion_ = other.clientVersion_;
      timestamp_ = other.timestamp_;
      Categories = other.categories_ != null ? other.Categories.Clone() : null;
      OauthProviders = other.oauthProviders_ != null ? other.OauthProviders.Clone() : null;
      Services = other.services_ != null ? other.Services.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigData Clone() {
      return new ConfigData(this);
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 1;
    private int clientVersion_;
    /// <summary>
    /// / If this goes up in a config, the client must be updated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private long timestamp_;
    /// <summary>
    /// / Timestamp when the config was built. Unix epoch UTC milliseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 2;
    private global::InfX.ConfigCategories categories_;
    /// <summary>
    /// / Configuration data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.ConfigCategories Categories {
      get { return categories_; }
      set {
        categories_ = value;
      }
    }

    /// <summary>Field number for the "oauthProviders" field.</summary>
    public const int OauthProvidersFieldNumber = 3;
    private global::InfX.ConfigOAuthProviders oauthProviders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.ConfigOAuthProviders OauthProviders {
      get { return oauthProviders_; }
      set {
        oauthProviders_ = value;
      }
    }

    /// <summary>Field number for the "services" field.</summary>
    public const int ServicesFieldNumber = 6;
    private global::InfX.ConfigServices services_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.ConfigServices Services {
      get { return services_; }
      set {
        services_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientVersion != other.ClientVersion) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Categories, other.Categories)) return false;
      if (!object.Equals(OauthProviders, other.OauthProviders)) return false;
      if (!object.Equals(Services, other.Services)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientVersion != 0) hash ^= ClientVersion.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (categories_ != null) hash ^= Categories.GetHashCode();
      if (oauthProviders_ != null) hash ^= OauthProviders.GetHashCode();
      if (services_ != null) hash ^= Services.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ClientVersion);
      }
      if (categories_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Categories);
      }
      if (oauthProviders_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OauthProviders);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Timestamp);
      }
      if (services_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Services);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientVersion);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (categories_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Categories);
      }
      if (oauthProviders_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OauthProviders);
      }
      if (services_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Services);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigData other) {
      if (other == null) {
        return;
      }
      if (other.ClientVersion != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.categories_ != null) {
        if (categories_ == null) {
          categories_ = new global::InfX.ConfigCategories();
        }
        Categories.MergeFrom(other.Categories);
      }
      if (other.oauthProviders_ != null) {
        if (oauthProviders_ == null) {
          oauthProviders_ = new global::InfX.ConfigOAuthProviders();
        }
        OauthProviders.MergeFrom(other.OauthProviders);
      }
      if (other.services_ != null) {
        if (services_ == null) {
          services_ = new global::InfX.ConfigServices();
        }
        Services.MergeFrom(other.Services);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClientVersion = input.ReadInt32();
            break;
          }
          case 18: {
            if (categories_ == null) {
              categories_ = new global::InfX.ConfigCategories();
            }
            input.ReadMessage(categories_);
            break;
          }
          case 26: {
            if (oauthProviders_ == null) {
              oauthProviders_ = new global::InfX.ConfigOAuthProviders();
            }
            input.ReadMessage(oauthProviders_);
            break;
          }
          case 40: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 50: {
            if (services_ == null) {
              services_ = new global::InfX.ConfigServices();
            }
            input.ReadMessage(services_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
