// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace InfX {

  /// <summary>Holder for reflection information generated from inf.proto</summary>
  public static partial class InfReflection {

    #region Descriptor
    /// <summary>File descriptor for inf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglpbmYucHJvdG8iJQoTQ29uZmlnU3ViQ2F0ZWdvcmllcxIOCgZsYWJlbHMY",
            "ASADKAkiNQoQQ29uZmlnQ2F0ZWdvcmllcxIhCgNzdWIYASADKAsyFC5Db25m",
            "aWdTdWJDYXRlZ29yaWVzIo4CChNDb25maWdPQXV0aFByb3ZpZGVyEg8KB3Zp",
            "c2libGUYASABKAgSDwoHZW5hYmxlZBgCIAEoCBINCgVsYWJlbBgDIAEoCRIM",
            "CgRob3N0GAQgASgJEhcKD3JlcXVlc3RUb2tlblVybBgFIAEoCRIXCg9hdXRo",
            "ZW50aWNhdGVVcmwYBiABKAkSDwoHYXV0aFVybBgHIAEoCRIRCglhdXRoUXVl",
            "cnkYCCABKAkSEwoLY2FsbGJhY2tVcmwYCSABKAkSEwoLY29uc3VtZXJLZXkY",
            "CiABKAkSFgoOY29uc3VtZXJTZWNyZXQYCyABKAkSEAoIY2xpZW50SWQYDCAB",
            "KAkSDgoGbmF0aXZlGA0gASgJIkYKFENvbmZpZ09BdXRoUHJvdmlkZXJzEiEK",
            "A2FsbBgBIAMoCzIULkNvbmZpZ09BdXRoUHJvdmlkZXISCwoDa2V5GAIgASgJ",
            "Im8KBkNvbmZpZxIPCgd2ZXJzaW9uGAEgASgFEiUKCmNhdGVnb3JpZXMYAiAB",
            "KAsyES5Db25maWdDYXRlZ29yaWVzEi0KDm9hdXRoUHJvdmlkZXJzGAMgASgL",
            "MhUuQ29uZmlnT0F1dGhQcm92aWRlcnMiJwoKQ2F0ZWdvcnlJZBIMCgRtYWlu",
            "GAEgASgFEgsKA3N1YhgCIAEoBSIpCg1DYXRlZ29yeUlkU2V0EhgKA2lkcxgB",
            "IAMoCzILLkNhdGVnb3J5SWRCB6oCBEluZlhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigSubCategories), global::InfX.ConfigSubCategories.Parser, new[]{ "Labels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigCategories), global::InfX.ConfigCategories.Parser, new[]{ "Sub" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigOAuthProvider), global::InfX.ConfigOAuthProvider.Parser, new[]{ "Visible", "Enabled", "Label", "Host", "RequestTokenUrl", "AuthenticateUrl", "AuthUrl", "AuthQuery", "CallbackUrl", "ConsumerKey", "ConsumerSecret", "ClientId", "Native" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigOAuthProviders), global::InfX.ConfigOAuthProviders.Parser, new[]{ "All", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.Config), global::InfX.Config.Parser, new[]{ "Version", "Categories", "OauthProviders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.CategoryId), global::InfX.CategoryId.Parser, new[]{ "Main", "Sub" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.CategoryIdSet), global::InfX.CategoryIdSet.Parser, new[]{ "Ids" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ConfigSubCategories : pb::IMessage<ConfigSubCategories> {
    private static readonly pb::MessageParser<ConfigSubCategories> _parser = new pb::MessageParser<ConfigSubCategories>(() => new ConfigSubCategories());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigSubCategories> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSubCategories() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSubCategories(ConfigSubCategories other) : this() {
      labels_ = other.labels_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSubCategories Clone() {
      return new ConfigSubCategories(this);
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_labels_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> labels_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Labels {
      get { return labels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigSubCategories);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigSubCategories other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!labels_.Equals(other.labels_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= labels_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      labels_.WriteTo(output, _repeated_labels_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += labels_.CalculateSize(_repeated_labels_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigSubCategories other) {
      if (other == null) {
        return;
      }
      labels_.Add(other.labels_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            labels_.AddEntriesFrom(input, _repeated_labels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigCategories : pb::IMessage<ConfigCategories> {
    private static readonly pb::MessageParser<ConfigCategories> _parser = new pb::MessageParser<ConfigCategories>(() => new ConfigCategories());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigCategories> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigCategories() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigCategories(ConfigCategories other) : this() {
      sub_ = other.sub_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigCategories Clone() {
      return new ConfigCategories(this);
    }

    /// <summary>Field number for the "sub" field.</summary>
    public const int SubFieldNumber = 1;
    private static readonly pb::FieldCodec<global::InfX.ConfigSubCategories> _repeated_sub_codec
        = pb::FieldCodec.ForMessage(10, global::InfX.ConfigSubCategories.Parser);
    private readonly pbc::RepeatedField<global::InfX.ConfigSubCategories> sub_ = new pbc::RepeatedField<global::InfX.ConfigSubCategories>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.ConfigSubCategories> Sub {
      get { return sub_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigCategories);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigCategories other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sub_.Equals(other.sub_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sub_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sub_.WriteTo(output, _repeated_sub_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sub_.CalculateSize(_repeated_sub_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigCategories other) {
      if (other == null) {
        return;
      }
      sub_.Add(other.sub_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sub_.AddEntriesFrom(input, _repeated_sub_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigOAuthProvider : pb::IMessage<ConfigOAuthProvider> {
    private static readonly pb::MessageParser<ConfigOAuthProvider> _parser = new pb::MessageParser<ConfigOAuthProvider>(() => new ConfigOAuthProvider());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigOAuthProvider> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProvider() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProvider(ConfigOAuthProvider other) : this() {
      visible_ = other.visible_;
      enabled_ = other.enabled_;
      label_ = other.label_;
      host_ = other.host_;
      requestTokenUrl_ = other.requestTokenUrl_;
      authenticateUrl_ = other.authenticateUrl_;
      authUrl_ = other.authUrl_;
      authQuery_ = other.authQuery_;
      callbackUrl_ = other.callbackUrl_;
      consumerKey_ = other.consumerKey_;
      consumerSecret_ = other.consumerSecret_;
      clientId_ = other.clientId_;
      native_ = other.native_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProvider Clone() {
      return new ConfigOAuthProvider(this);
    }

    /// <summary>Field number for the "visible" field.</summary>
    public const int VisibleFieldNumber = 1;
    private bool visible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Visible {
      get { return visible_; }
      set {
        visible_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 2;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 3;
    private string label_ = "";
    /// <summary>
    /// / Visual name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 4;
    private string host_ = "";
    /// <summary>
    /// / API endpoints of the OAuth provider
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requestTokenUrl" field.</summary>
    public const int RequestTokenUrlFieldNumber = 5;
    private string requestTokenUrl_ = "";
    /// <summary>
    /// / API endpoints for Twitter-like OAuth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestTokenUrl {
      get { return requestTokenUrl_; }
      set {
        requestTokenUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authenticateUrl" field.</summary>
    public const int AuthenticateUrlFieldNumber = 6;
    private string authenticateUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthenticateUrl {
      get { return authenticateUrl_; }
      set {
        authenticateUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authUrl" field.</summary>
    public const int AuthUrlFieldNumber = 7;
    private string authUrl_ = "";
    /// <summary>
    /// / API endpoints for Spotify-like OAuth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthUrl {
      get { return authUrl_; }
      set {
        authUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authQuery" field.</summary>
    public const int AuthQueryFieldNumber = 8;
    private string authQuery_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthQuery {
      get { return authQuery_; }
      set {
        authQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "callbackUrl" field.</summary>
    public const int CallbackUrlFieldNumber = 9;
    private string callbackUrl_ = "";
    /// <summary>
    /// / Url that will be used to detect login success by the app
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallbackUrl {
      get { return callbackUrl_; }
      set {
        callbackUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "consumerKey" field.</summary>
    public const int ConsumerKeyFieldNumber = 10;
    private string consumerKey_ = "";
    /// <summary>
    /// / Generated by the OAuth provider, not really secret, Twitter-like
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConsumerKey {
      get { return consumerKey_; }
      set {
        consumerKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "consumerSecret" field.</summary>
    public const int ConsumerSecretFieldNumber = 11;
    private string consumerSecret_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConsumerSecret {
      get { return consumerSecret_; }
      set {
        consumerSecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientId" field.</summary>
    public const int ClientIdFieldNumber = 12;
    private string clientId_ = "";
    /// <summary>
    /// / From OAuth provider, Spotify-like, may not include clientSecret
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "native" field.</summary>
    public const int NativeFieldNumber = 13;
    private string native_ = "";
    /// <summary>
    /// / Request settings
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Native {
      get { return native_; }
      set {
        native_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigOAuthProvider);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigOAuthProvider other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Visible != other.Visible) return false;
      if (Enabled != other.Enabled) return false;
      if (Label != other.Label) return false;
      if (Host != other.Host) return false;
      if (RequestTokenUrl != other.RequestTokenUrl) return false;
      if (AuthenticateUrl != other.AuthenticateUrl) return false;
      if (AuthUrl != other.AuthUrl) return false;
      if (AuthQuery != other.AuthQuery) return false;
      if (CallbackUrl != other.CallbackUrl) return false;
      if (ConsumerKey != other.ConsumerKey) return false;
      if (ConsumerSecret != other.ConsumerSecret) return false;
      if (ClientId != other.ClientId) return false;
      if (Native != other.Native) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Visible != false) hash ^= Visible.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (RequestTokenUrl.Length != 0) hash ^= RequestTokenUrl.GetHashCode();
      if (AuthenticateUrl.Length != 0) hash ^= AuthenticateUrl.GetHashCode();
      if (AuthUrl.Length != 0) hash ^= AuthUrl.GetHashCode();
      if (AuthQuery.Length != 0) hash ^= AuthQuery.GetHashCode();
      if (CallbackUrl.Length != 0) hash ^= CallbackUrl.GetHashCode();
      if (ConsumerKey.Length != 0) hash ^= ConsumerKey.GetHashCode();
      if (ConsumerSecret.Length != 0) hash ^= ConsumerSecret.GetHashCode();
      if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
      if (Native.Length != 0) hash ^= Native.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Visible != false) {
        output.WriteRawTag(8);
        output.WriteBool(Visible);
      }
      if (Enabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enabled);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Label);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Host);
      }
      if (RequestTokenUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RequestTokenUrl);
      }
      if (AuthenticateUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AuthenticateUrl);
      }
      if (AuthUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AuthUrl);
      }
      if (AuthQuery.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AuthQuery);
      }
      if (CallbackUrl.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CallbackUrl);
      }
      if (ConsumerKey.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ConsumerKey);
      }
      if (ConsumerSecret.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ConsumerSecret);
      }
      if (ClientId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ClientId);
      }
      if (Native.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Native);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Visible != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (RequestTokenUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestTokenUrl);
      }
      if (AuthenticateUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthenticateUrl);
      }
      if (AuthUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthUrl);
      }
      if (AuthQuery.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthQuery);
      }
      if (CallbackUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallbackUrl);
      }
      if (ConsumerKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConsumerKey);
      }
      if (ConsumerSecret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConsumerSecret);
      }
      if (ClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      if (Native.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Native);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigOAuthProvider other) {
      if (other == null) {
        return;
      }
      if (other.Visible != false) {
        Visible = other.Visible;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.RequestTokenUrl.Length != 0) {
        RequestTokenUrl = other.RequestTokenUrl;
      }
      if (other.AuthenticateUrl.Length != 0) {
        AuthenticateUrl = other.AuthenticateUrl;
      }
      if (other.AuthUrl.Length != 0) {
        AuthUrl = other.AuthUrl;
      }
      if (other.AuthQuery.Length != 0) {
        AuthQuery = other.AuthQuery;
      }
      if (other.CallbackUrl.Length != 0) {
        CallbackUrl = other.CallbackUrl;
      }
      if (other.ConsumerKey.Length != 0) {
        ConsumerKey = other.ConsumerKey;
      }
      if (other.ConsumerSecret.Length != 0) {
        ConsumerSecret = other.ConsumerSecret;
      }
      if (other.ClientId.Length != 0) {
        ClientId = other.ClientId;
      }
      if (other.Native.Length != 0) {
        Native = other.Native;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Visible = input.ReadBool();
            break;
          }
          case 16: {
            Enabled = input.ReadBool();
            break;
          }
          case 26: {
            Label = input.ReadString();
            break;
          }
          case 34: {
            Host = input.ReadString();
            break;
          }
          case 42: {
            RequestTokenUrl = input.ReadString();
            break;
          }
          case 50: {
            AuthenticateUrl = input.ReadString();
            break;
          }
          case 58: {
            AuthUrl = input.ReadString();
            break;
          }
          case 66: {
            AuthQuery = input.ReadString();
            break;
          }
          case 74: {
            CallbackUrl = input.ReadString();
            break;
          }
          case 82: {
            ConsumerKey = input.ReadString();
            break;
          }
          case 90: {
            ConsumerSecret = input.ReadString();
            break;
          }
          case 98: {
            ClientId = input.ReadString();
            break;
          }
          case 106: {
            Native = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigOAuthProviders : pb::IMessage<ConfigOAuthProviders> {
    private static readonly pb::MessageParser<ConfigOAuthProviders> _parser = new pb::MessageParser<ConfigOAuthProviders>(() => new ConfigOAuthProviders());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigOAuthProviders> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProviders() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProviders(ConfigOAuthProviders other) : this() {
      all_ = other.all_.Clone();
      key_ = other.key_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProviders Clone() {
      return new ConfigOAuthProviders(this);
    }

    /// <summary>Field number for the "all" field.</summary>
    public const int AllFieldNumber = 1;
    private static readonly pb::FieldCodec<global::InfX.ConfigOAuthProvider> _repeated_all_codec
        = pb::FieldCodec.ForMessage(10, global::InfX.ConfigOAuthProvider.Parser);
    private readonly pbc::RepeatedField<global::InfX.ConfigOAuthProvider> all_ = new pbc::RepeatedField<global::InfX.ConfigOAuthProvider>();
    /// <summary>
    /// / List of all OAuthProviders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.ConfigOAuthProvider> All {
      get { return all_; }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// / This AES-256 key decrypts the OAuth keys
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigOAuthProviders);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigOAuthProviders other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!all_.Equals(other.all_)) return false;
      if (Key != other.Key) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= all_.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      all_.WriteTo(output, _repeated_all_codec);
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += all_.CalculateSize(_repeated_all_codec);
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigOAuthProviders other) {
      if (other == null) {
        return;
      }
      all_.Add(other.all_);
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            all_.AddEntriesFrom(input, _repeated_all_codec);
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      version_ = other.version_;
      Categories = other.categories_ != null ? other.Categories.Clone() : null;
      OauthProviders = other.oauthProviders_ != null ? other.OauthProviders.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 2;
    private global::InfX.ConfigCategories categories_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.ConfigCategories Categories {
      get { return categories_; }
      set {
        categories_ = value;
      }
    }

    /// <summary>Field number for the "oauthProviders" field.</summary>
    public const int OauthProvidersFieldNumber = 3;
    private global::InfX.ConfigOAuthProviders oauthProviders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.ConfigOAuthProviders OauthProviders {
      get { return oauthProviders_; }
      set {
        oauthProviders_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Categories, other.Categories)) return false;
      if (!object.Equals(OauthProviders, other.OauthProviders)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (categories_ != null) hash ^= Categories.GetHashCode();
      if (oauthProviders_ != null) hash ^= OauthProviders.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (categories_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Categories);
      }
      if (oauthProviders_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OauthProviders);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (categories_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Categories);
      }
      if (oauthProviders_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OauthProviders);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.categories_ != null) {
        if (categories_ == null) {
          categories_ = new global::InfX.ConfigCategories();
        }
        Categories.MergeFrom(other.Categories);
      }
      if (other.oauthProviders_ != null) {
        if (oauthProviders_ == null) {
          oauthProviders_ = new global::InfX.ConfigOAuthProviders();
        }
        OauthProviders.MergeFrom(other.OauthProviders);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 18: {
            if (categories_ == null) {
              categories_ = new global::InfX.ConfigCategories();
            }
            input.ReadMessage(categories_);
            break;
          }
          case 26: {
            if (oauthProviders_ == null) {
              oauthProviders_ = new global::InfX.ConfigOAuthProviders();
            }
            input.ReadMessage(oauthProviders_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CategoryId : pb::IMessage<CategoryId> {
    private static readonly pb::MessageParser<CategoryId> _parser = new pb::MessageParser<CategoryId>(() => new CategoryId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CategoryId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryId(CategoryId other) : this() {
      main_ = other.main_;
      sub_ = other.sub_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryId Clone() {
      return new CategoryId(this);
    }

    /// <summary>Field number for the "main" field.</summary>
    public const int MainFieldNumber = 1;
    private int main_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Main {
      get { return main_; }
      set {
        main_ = value;
      }
    }

    /// <summary>Field number for the "sub" field.</summary>
    public const int SubFieldNumber = 2;
    private int sub_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sub {
      get { return sub_; }
      set {
        sub_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CategoryId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CategoryId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Main != other.Main) return false;
      if (Sub != other.Sub) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Main != 0) hash ^= Main.GetHashCode();
      if (Sub != 0) hash ^= Sub.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Main != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Main);
      }
      if (Sub != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sub);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Main != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Main);
      }
      if (Sub != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sub);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CategoryId other) {
      if (other == null) {
        return;
      }
      if (other.Main != 0) {
        Main = other.Main;
      }
      if (other.Sub != 0) {
        Sub = other.Sub;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Main = input.ReadInt32();
            break;
          }
          case 16: {
            Sub = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CategoryIdSet : pb::IMessage<CategoryIdSet> {
    private static readonly pb::MessageParser<CategoryIdSet> _parser = new pb::MessageParser<CategoryIdSet>(() => new CategoryIdSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CategoryIdSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryIdSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryIdSet(CategoryIdSet other) : this() {
      ids_ = other.ids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryIdSet Clone() {
      return new CategoryIdSet(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::InfX.CategoryId> _repeated_ids_codec
        = pb::FieldCodec.ForMessage(10, global::InfX.CategoryId.Parser);
    private readonly pbc::RepeatedField<global::InfX.CategoryId> ids_ = new pbc::RepeatedField<global::InfX.CategoryId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.CategoryId> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CategoryIdSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CategoryIdSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CategoryIdSet other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
