// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace InfX {

  /// <summary>Holder for reflection information generated from inf.proto</summary>
  public static partial class InfReflection {

    #region Descriptor
    /// <summary>File descriptor for inf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglpbmYucHJvdG8SA2luZiIlChNDb25maWdTdWJDYXRlZ29yaWVzEg4KBmxh",
            "YmVscxgBIAMoCSI5ChBDb25maWdDYXRlZ29yaWVzEiUKA3N1YhgBIAMoCzIY",
            "LmluZi5Db25maWdTdWJDYXRlZ29yaWVzIoYDChNDb25maWdPQXV0aFByb3Zp",
            "ZGVyEg8KB3Zpc2libGUYASABKAgSDwoHZW5hYmxlZBgCIAEoCBINCgVsYWJl",
            "bBgDIAEoCRIYChBmb250QXdlc29tZUJyYW5kGA4gASgFEiYKCW1lY2hhbmlz",
            "bRgPIAEoDjITLmluZi5PQXV0aE1lY2hhbmlzbRIMCgRob3N0GAQgASgJEhMK",
            "C2NhbGxiYWNrVXJsGAkgASgJEhcKD3JlcXVlc3RUb2tlblVybBgFIAEoCRIX",
            "Cg9hdXRoZW50aWNhdGVVcmwYBiABKAkSFgoOYWNjZXNzVG9rZW5VcmwYECAB",
            "KAkSEwoLY29uc3VtZXJLZXkYCiABKAkSFgoOY29uc3VtZXJTZWNyZXQYCyAB",
            "KAkSDwoHYXV0aFVybBgHIAEoCRIRCglhdXRoUXVlcnkYCCABKAkSEAoIY2xp",
            "ZW50SWQYDCABKAkSFAoMY2xpZW50U2VjcmV0GBEgASgJEhYKDndoaXRlbGlz",
            "dEhvc3RzGBIgAygJIj0KFENvbmZpZ09BdXRoUHJvdmlkZXJzEiUKA2FsbBgB",
            "IAMoCzIYLmluZi5Db25maWdPQXV0aFByb3ZpZGVyIu4DCg5Db25maWdTZXJ2",
            "aWNlcxIQCghhcGlIb3N0cxgIIAMoCRIRCgljb25maWdVcmwYCSABKAkSGQoR",
            "dGVybXNPZlNlcnZpY2VVcmwYCiABKAkSGAoQcHJpdmFjeVBvbGljeVVybBgL",
            "IAEoCRIRCgltYXBib3hBcGkYASABKAkSGQoRbWFwYm94VXJsVGVtcGxhdGUY",
            "AiABKAkSEwoLbWFwYm94VG9rZW4YAyABKAkSFAoMc3BhY2VzUmVnaW9uGAQg",
            "ASgJEhEKCXNwYWNlc0tleRgFIAEoCRIUCgxzcGFjZXNTZWNyZXQYBiABKAkS",
            "FAoMc3BhY2VzQnVja2V0GAcgASgJEhUKDWNsb3VkaW5hcnlVcmwYEyABKAkS",
            "HgoWY2xvdWRpbmFyeVRodW1ibmFpbFVybBgUIAEoCRIaChJjbG91ZGluYXJ5",
            "Q292ZXJVcmwYFSABKAkSEgoKaXBzdGFja0FwaRgNIAEoCRISCgppcHN0YWNr",
            "S2V5GAwgASgJEhMKC21hcmlhZGJIb3N0GA4gASgJEhMKC21hcmlhZGJQb3J0",
            "GA8gASgFEhMKC21hcmlhZGJVc2VyGBAgASgJEhcKD21hcmlhZGJQYXNzd29y",
            "ZBgRIAEoCRIXCg9tYXJpYWRiRGF0YWJhc2UYEiABKAkiuwEKCkNvbmZpZ0Rh",
            "dGESFQoNY2xpZW50VmVyc2lvbhgBIAEoBRIRCgl0aW1lc3RhbXAYBSABKAMS",
            "KQoKY2F0ZWdvcmllcxgCIAEoCzIVLmluZi5Db25maWdDYXRlZ29yaWVzEjEK",
            "Dm9hdXRoUHJvdmlkZXJzGAMgASgLMhkuaW5mLkNvbmZpZ09BdXRoUHJvdmlk",
            "ZXJzEiUKCHNlcnZpY2VzGAYgASgLMhMuaW5mLkNvbmZpZ1NlcnZpY2VzIicK",
            "CkNhdGVnb3J5SWQSDAoEbWFpbhgBIAEoBRILCgNzdWIYAiABKAUitAIKD0Rh",
            "dGFTb2NpYWxNZWRpYRIRCgljb25uZWN0ZWQYASABKAgSDwoHZXhwaXJlZBgP",
            "IAEoCBISCgpzY3JlZW5OYW1lGAQgASgJEhMKC2Rpc3BsYXlOYW1lGAUgASgJ",
            "EhEKCWF2YXRhclVybBgOIAEoCRISCgpwcm9maWxlVXJsGA0gASgJEhMKC2Rl",
            "c2NyaXB0aW9uGAYgASgJEhAKCGxvY2F0aW9uGAcgASgJEgsKA3VybBgIIAEo",
            "CRINCgVlbWFpbBgMIAEoCRIUCgxmcmllbmRzQ291bnQYCSABKAUSFgoOZm9s",
            "bG93ZXJzQ291bnQYAiABKAUSFgoOZm9sbG93aW5nQ291bnQYAyABKAUSEgoK",
            "cG9zdHNDb3VudBgKIAEoBRIQCgh2ZXJpZmllZBgLIAEoCCJgChREYXRhT0F1",
            "dGhDcmVkZW50aWFscxIOCgZ1c2VySWQYBCABKAkSDQoFdG9rZW4YASABKAkS",
            "EwoLdG9rZW5TZWNyZXQYAiABKAkSFAoMdG9rZW5FeHBpcmVzGAMgASgFIrkD",
            "ChFEYXRhQnVzaW5lc3NPZmZlchIPCgdvZmZlcklkGAEgASgDEhEKCWFjY291",
            "bnRJZBgCIAEoBRISCgpsb2NhdGlvbklkGAMgASgFEg0KBXRpdGxlGAQgASgJ",
            "EhMKC2Rlc2NyaXB0aW9uGAUgASgJEhEKCWF2YXRhclVybBgGIAEoCRIUCgxk",
            "ZWxpdmVyYWJsZXMYByABKAkSDgoGcmV3YXJkGAggASgJEhAKCGxvY2F0aW9u",
            "GAkgASgJEhEKCWNvdmVyVXJscxgKIAMoCRIjCgpjYXRlZ29yaWVzGAsgAygL",
            "Mg8uaW5mLkNhdGVnb3J5SWQSJgoFc3RhdGUYDCABKA4yFy5pbmYuQnVzaW5l",
            "c3NPZmZlclN0YXRlEjIKC3N0YXRlUmVhc29uGA0gASgOMh0uaW5mLkJ1c2lu",
            "ZXNzT2ZmZXJTdGF0ZVJlYXNvbhIVCg1hcHBsaWNhbnRzTmV3GA4gASgFEhoK",
            "EmFwcGxpY2FudHNBY2NlcHRlZBgPIAEoBRIbChNhcHBsaWNhbnRzQ29tcGxl",
            "dGVkGBAgASgFEhkKEWFwcGxpY2FudHNSZWZ1c2VkGBEgASgFIsgBCgxEYXRh",
            "TG9jYXRpb24SEgoKbG9jYXRpb25JZBgBIAEoBRIMCgRuYW1lGAIgASgJEhEK",
            "CWF2YXRhclVybBgGIAEoCRITCgthcHByb3hpbWF0ZRgHIAEoCRIOCgZkZXRh",
            "aWwYCCABKAkSEAoIcG9zdGNvZGUYCSABKAkSEgoKcmVnaW9uQ29kZRgKIAEo",
            "CRITCgtjb3VudHJ5Q29kZRgLIAEoCRIQCghsYXRpdHVkZRgEIAEoARIRCgls",
            "b25naXR1ZGUYBSABKAEiSAoNRGF0YUFwcGxpY2FudBITCgthcHBsaWNhbnRJ",
            "ZBgBIAEoAxIPCgdvZmZlcklkGAIgASgDEhEKCWFjY291bnRJZBgDIAEoBSJi",
            "CghEYXRhQ2hhdBITCgthcHBsaWNhbnRJZBgBIAEoAxISCgpzZXF1ZW5jZUlk",
            "GAIgASgDEg0KBWtleUlkGAMgASgDEhAKCG91dGdvaW5nGAQgASgIEgwKBHRl",
            "eHQYBSABKAkihwIKEERhdGFBY2NvdW50U3RhdGUSEAoIZGV2aWNlSWQYASAB",
            "KAUSEQoJYWNjb3VudElkGAIgASgFEiUKC2FjY291bnRUeXBlGAMgASgOMhAu",
            "aW5mLkFjY291bnRUeXBlEjMKEmdsb2JhbEFjY291bnRTdGF0ZRgEIAEoDjIX",
            "LmluZi5HbG9iYWxBY2NvdW50U3RhdGUSPwoYZ2xvYmFsQWNjb3VudFN0YXRl",
            "UmVhc29uGAUgASgOMh0uaW5mLkdsb2JhbEFjY291bnRTdGF0ZVJlYXNvbhIx",
            "ChFub3RpZmljYXRpb25GbGFncxgGIAEoDjIWLmluZi5Ob3RpZmljYXRpb25G",
            "bGFncyJlChJEYXRhQWNjb3VudFN1bW1hcnkSDAoEbmFtZRgBIAEoCRITCgtk",
            "ZXNjcmlwdGlvbhgCIAEoCRIQCghsb2NhdGlvbhgDIAEoCRIaChJhdmF0YXJU",
            "aHVtYm5haWxVcmwYBCABKAkirQEKEURhdGFBY2NvdW50RGV0YWlsEiMKCmNh",
            "dGVnb3JpZXMYAiADKAsyDy5pbmYuQ2F0ZWdvcnlJZBIpCgtzb2NpYWxNZWRp",
            "YRgDIAMoCzIULmluZi5EYXRhU29jaWFsTWVkaWESFgoOYXZhdGFyQ292ZXJV",
            "cmwYByABKAkSCwoDdXJsGAYgASgJEhAKCGxhdGl0dWRlGAQgASgBEhEKCWxv",
            "bmdpdHVkZRgFIAEoASKFAQoLRGF0YUFjY291bnQSJAoFc3RhdGUYASABKAsy",
            "FS5pbmYuRGF0YUFjY291bnRTdGF0ZRIoCgdzdW1tYXJ5GAIgASgLMhcuaW5m",
            "LkRhdGFBY2NvdW50U3VtbWFyeRImCgZkZXRhaWwYAyABKAsyFi5pbmYuRGF0",
            "YUFjY291bnREZXRhaWwiXAoWTmV0RGV2aWNlQXV0aENyZWF0ZVJlcRIOCgZh",
            "ZXNLZXkYASABKAwSFgoOY29tbW9uRGV2aWNlSWQYBCABKAwSDAoEbmFtZRgC",
            "IAEoCRIMCgRpbmZvGAMgASgJIi0KGU5ldERldmljZUF1dGhDaGFsbGVuZ2VS",
            "ZXESEAoIZGV2aWNlSWQYASABKAUiMQocTmV0RGV2aWNlQXV0aENoYWxsZW5n",
            "ZVJlc1JlcRIRCgljaGFsbGVuZ2UYASABKAwiMQocTmV0RGV2aWNlQXV0aFNp",
            "Z25hdHVyZVJlc1JlcRIRCglzaWduYXR1cmUYASABKAwiNAoSTmV0RGV2aWNl",
            "QXV0aFN0YXRlEh4KBGRhdGEYCCABKAsyEC5pbmYuRGF0YUFjY291bnQiOgoR",
            "TmV0U2V0QWNjb3VudFR5cGUSJQoLYWNjb3VudFR5cGUYASABKA4yEC5pbmYu",
            "QWNjb3VudFR5cGUiJwoOTmV0T0F1dGhVcmxSZXESFQoNb2F1dGhQcm92aWRl",
            "chgBIAEoBSI2Cg5OZXRPQXV0aFVybFJlcxIPCgdhdXRoVXJsGAEgASgJEhMK",
            "C2NhbGxiYWNrVXJsGAIgASgJIkIKEk5ldE9BdXRoQ29ubmVjdFJlcRIVCg1v",
            "YXV0aFByb3ZpZGVyGAEgASgFEhUKDWNhbGxiYWNrUXVlcnkYAiABKAkiPwoS",
            "TmV0T0F1dGhDb25uZWN0UmVzEikKC3NvY2lhbE1lZGlhGAEgASgLMhQuaW5m",
            "LkRhdGFTb2NpYWxNZWRpYSI6ChNOZXRBY2NvdW50Q3JlYXRlUmVxEhAKCGxh",
            "dGl0dWRlGAIgASgBEhEKCWxvbmdpdHVkZRgDIAEoASJoChFOZXRVcGxvYWRJ",
            "bWFnZVJlcRIQCghmaWxlTmFtZRgBIAEoCRIVCg1jb250ZW50TGVuZ3RoGAIg",
            "ASgFEhMKC2NvbnRlbnRUeXBlGAQgASgJEhUKDWNvbnRlbnRTaGEyNTYYAyAB",
            "KAwijQEKEU5ldFVwbG9hZEltYWdlUmVzEhUKDXJlcXVlc3RNZXRob2QYASAB",
            "KAkSEgoKcmVxdWVzdFVybBgCIAEoCRISCgpmaWxlRXhpc3RzGAkgASgIEhEK",
            "CXVwbG9hZEtleRgKIAEoCRIQCghjb3ZlclVybBgLIAEoCRIUCgx0aHVtYm5h",
            "aWxVcmwYDCABKAkiOgoRTmV0UmVxQ3JlYXRlT2ZmZXISJQoFb2ZmZXIYASAB",
            "KAsyFi5pbmYuRGF0YUJ1c2luZXNzT2ZmZXIiHwoRTmV0UmVzQ3JlYXRlT2Zm",
            "ZXISCgoCaWQYASABKAMqPgoOT0F1dGhNZWNoYW5pc20SDAoIT0FNX05PTkUQ",
            "ABIOCgpPQU1fT0FVVEgxEAESDgoKT0FNX09BVVRIMhACKkMKEE9BdXRoUHJv",
            "dmlkZXJJZHMSDAoIT0FQX05PTkUQABIPCgtPQVBfVFdJVFRFUhABEhAKDE9B",
            "UF9GQUNFQk9PSxACKlEKC0FjY291bnRUeXBlEg4KCkFUX1VOS05PV04QABIR",
            "Cg1BVF9JTkZMVUVOQ0VSEAESDwoLQVRfQlVTSU5FU1MQAhIOCgpBVF9TVVBQ",
            "T1JUEAMqngEKEkdsb2JhbEFjY291bnRTdGF0ZRISCg5HQVNfSU5JVElBTEla",
            "RRAAEg8KC0dBU19CTE9DS0VEEAESEQoNR0FTX1JFQURfT05MWRACEhIKDkdB",
            "U19SRUFEX1dSSVRFEAMSDQoJR0FTX0RFQlVHEAQSDwoLR0FTX1NVUFBPUlQQ",
            "BRIPCgtHQVNfTUFOQUdFUhAGEgsKB0dBU19HT0QQByq1AQoYR2xvYmFsQWNj",
            "b3VudFN0YXRlUmVhc29uEhQKEEdBU1JfTkVXX0FDQ09VTlQQABIXChNHQVNS",
            "X0FDQ09VTlRfQkFOTkVEEAESFgoSR0FTUl9DUkVBVEVfREVOSUVEEAISEQoN",
            "R0FTUl9BUFBST1ZFRBADEhYKEkdBU1JfREVNT19BUFBST1ZFRBAEEhAKDEdB",
            "U1JfUEVORElORxAFEhUKEUdBU1JfUkVRVUlSRV9JTkZPEAYqbgoRTm90aWZp",
            "Y2F0aW9uRmxhZ3MSFAoQTkZfQUNDT1VOVF9TVEFURRAAEhgKFE5GX01BS0Vf",
            "QU5fT0ZGRVJfRkFCEAESFgoSTkZfVU5SRUFEX01FU1NBR0VTEAISEQoNTkZf",
            "Q1NfUkVRVUVTVBADKlEKEkJ1c2luZXNzT2ZmZXJTdGF0ZRINCglCT1NfRFJB",
            "RlQQABIMCghCT1NfT1BFThABEg4KCkJPU19BQ1RJVkUQAhIOCgpCT1NfQ0xP",
            "U0VEEAMqcAoYQnVzaW5lc3NPZmZlclN0YXRlUmVhc29uEhIKDkJPU1JfTkVX",
            "X09GRkVSEAASFAoQQk9TUl9VU0VSX0NMT1NFRBABEhYKEkJPU1JfVE9TX1ZJ",
            "T0xBVElPThACEhIKDkJPU1JfQ09NUExFVEVEEANCB6oCBEluZlhiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::InfX.OAuthMechanism), typeof(global::InfX.OAuthProviderIds), typeof(global::InfX.AccountType), typeof(global::InfX.GlobalAccountState), typeof(global::InfX.GlobalAccountStateReason), typeof(global::InfX.NotificationFlags), typeof(global::InfX.BusinessOfferState), typeof(global::InfX.BusinessOfferStateReason), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigSubCategories), global::InfX.ConfigSubCategories.Parser, new[]{ "Labels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigCategories), global::InfX.ConfigCategories.Parser, new[]{ "Sub" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigOAuthProvider), global::InfX.ConfigOAuthProvider.Parser, new[]{ "Visible", "Enabled", "Label", "FontAwesomeBrand", "Mechanism", "Host", "CallbackUrl", "RequestTokenUrl", "AuthenticateUrl", "AccessTokenUrl", "ConsumerKey", "ConsumerSecret", "AuthUrl", "AuthQuery", "ClientId", "ClientSecret", "WhitelistHosts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigOAuthProviders), global::InfX.ConfigOAuthProviders.Parser, new[]{ "All" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigServices), global::InfX.ConfigServices.Parser, new[]{ "ApiHosts", "ConfigUrl", "TermsOfServiceUrl", "PrivacyPolicyUrl", "MapboxApi", "MapboxUrlTemplate", "MapboxToken", "SpacesRegion", "SpacesKey", "SpacesSecret", "SpacesBucket", "CloudinaryUrl", "CloudinaryThumbnailUrl", "CloudinaryCoverUrl", "IpstackApi", "IpstackKey", "MariadbHost", "MariadbPort", "MariadbUser", "MariadbPassword", "MariadbDatabase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigData), global::InfX.ConfigData.Parser, new[]{ "ClientVersion", "Timestamp", "Categories", "OauthProviders", "Services" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.CategoryId), global::InfX.CategoryId.Parser, new[]{ "Main", "Sub" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataSocialMedia), global::InfX.DataSocialMedia.Parser, new[]{ "Connected", "Expired", "ScreenName", "DisplayName", "AvatarUrl", "ProfileUrl", "Description", "Location", "Url", "Email", "FriendsCount", "FollowersCount", "FollowingCount", "PostsCount", "Verified" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataOAuthCredentials), global::InfX.DataOAuthCredentials.Parser, new[]{ "UserId", "Token", "TokenSecret", "TokenExpires" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataBusinessOffer), global::InfX.DataBusinessOffer.Parser, new[]{ "OfferId", "AccountId", "LocationId", "Title", "Description", "AvatarUrl", "Deliverables", "Reward", "Location", "CoverUrls", "Categories", "State", "StateReason", "ApplicantsNew", "ApplicantsAccepted", "ApplicantsCompleted", "ApplicantsRefused" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataLocation), global::InfX.DataLocation.Parser, new[]{ "LocationId", "Name", "AvatarUrl", "Approximate", "Detail", "Postcode", "RegionCode", "CountryCode", "Latitude", "Longitude" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataApplicant), global::InfX.DataApplicant.Parser, new[]{ "ApplicantId", "OfferId", "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataChat), global::InfX.DataChat.Parser, new[]{ "ApplicantId", "SequenceId", "KeyId", "Outgoing", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataAccountState), global::InfX.DataAccountState.Parser, new[]{ "DeviceId", "AccountId", "AccountType", "GlobalAccountState", "GlobalAccountStateReason", "NotificationFlags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataAccountSummary), global::InfX.DataAccountSummary.Parser, new[]{ "Name", "Description", "Location", "AvatarThumbnailUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataAccountDetail), global::InfX.DataAccountDetail.Parser, new[]{ "Categories", "SocialMedia", "AvatarCoverUrl", "Url", "Latitude", "Longitude" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataAccount), global::InfX.DataAccount.Parser, new[]{ "State", "Summary", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetDeviceAuthCreateReq), global::InfX.NetDeviceAuthCreateReq.Parser, new[]{ "AesKey", "CommonDeviceId", "Name", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetDeviceAuthChallengeReq), global::InfX.NetDeviceAuthChallengeReq.Parser, new[]{ "DeviceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetDeviceAuthChallengeResReq), global::InfX.NetDeviceAuthChallengeResReq.Parser, new[]{ "Challenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetDeviceAuthSignatureResReq), global::InfX.NetDeviceAuthSignatureResReq.Parser, new[]{ "Signature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetDeviceAuthState), global::InfX.NetDeviceAuthState.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetSetAccountType), global::InfX.NetSetAccountType.Parser, new[]{ "AccountType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetOAuthUrlReq), global::InfX.NetOAuthUrlReq.Parser, new[]{ "OauthProvider" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetOAuthUrlRes), global::InfX.NetOAuthUrlRes.Parser, new[]{ "AuthUrl", "CallbackUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetOAuthConnectReq), global::InfX.NetOAuthConnectReq.Parser, new[]{ "OauthProvider", "CallbackQuery" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetOAuthConnectRes), global::InfX.NetOAuthConnectRes.Parser, new[]{ "SocialMedia" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetAccountCreateReq), global::InfX.NetAccountCreateReq.Parser, new[]{ "Latitude", "Longitude" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetUploadImageReq), global::InfX.NetUploadImageReq.Parser, new[]{ "FileName", "ContentLength", "ContentType", "ContentSha256" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetUploadImageRes), global::InfX.NetUploadImageRes.Parser, new[]{ "RequestMethod", "RequestUrl", "FileExists", "UploadKey", "CoverUrl", "ThumbnailUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetReqCreateOffer), global::InfX.NetReqCreateOffer.Parser, new[]{ "Offer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetResCreateOffer), global::InfX.NetResCreateOffer.Parser, new[]{ "Id" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum OAuthMechanism {
    [pbr::OriginalName("OAM_NONE")] OamNone = 0,
    /// <summary>
    /// / OAuth1, Twitter-like
    /// </summary>
    [pbr::OriginalName("OAM_OAUTH1")] OamOauth1 = 1,
    /// <summary>
    /// / OAuth2, Spotify-like
    /// </summary>
    [pbr::OriginalName("OAM_OAUTH2")] OamOauth2 = 2,
  }

  /// <summary>
  ///  Only use server-side for hardcoding!
  /// </summary>
  public enum OAuthProviderIds {
    [pbr::OriginalName("OAP_NONE")] OapNone = 0,
    [pbr::OriginalName("OAP_TWITTER")] OapTwitter = 1,
    [pbr::OriginalName("OAP_FACEBOOK")] OapFacebook = 2,
  }

  public enum AccountType {
    [pbr::OriginalName("AT_UNKNOWN")] AtUnknown = 0,
    [pbr::OriginalName("AT_INFLUENCER")] AtInfluencer = 1,
    [pbr::OriginalName("AT_BUSINESS")] AtBusiness = 2,
    [pbr::OriginalName("AT_SUPPORT")] AtSupport = 3,
  }

  /// <summary>
  /// / Global account state. Higher value means more access. 
  /// / Should always check using a >= compare, except for GAS_INITIALIZE case
  /// </summary>
  public enum GlobalAccountState {
    [pbr::OriginalName("GAS_INITIALIZE")] GasInitialize = 0,
    [pbr::OriginalName("GAS_BLOCKED")] GasBlocked = 1,
    [pbr::OriginalName("GAS_READ_ONLY")] GasReadOnly = 2,
    [pbr::OriginalName("GAS_READ_WRITE")] GasReadWrite = 3,
    [pbr::OriginalName("GAS_DEBUG")] GasDebug = 4,
    [pbr::OriginalName("GAS_SUPPORT")] GasSupport = 5,
    [pbr::OriginalName("GAS_MANAGER")] GasManager = 6,
    [pbr::OriginalName("GAS_GOD")] GasGod = 7,
  }

  /// <summary>
  /// / Global account state reason. These are for user message only. Not functional.
  /// </summary>
  public enum GlobalAccountStateReason {
    /// <summary>
    ///  User is a new account
    /// </summary>
    [pbr::OriginalName("GASR_NEW_ACCOUNT")] GasrNewAccount = 0,
    /// <summary>
    ///  User is disallowed from the service
    /// </summary>
    [pbr::OriginalName("GASR_ACCOUNT_BANNED")] GasrAccountBanned = 1,
    /// <summary>
    ///  User account creation request was denied. Contact support
    /// </summary>
    [pbr::OriginalName("GASR_CREATE_DENIED")] GasrCreateDenied = 2,
    /// <summary>
    ///  User account was approved
    /// </summary>
    [pbr::OriginalName("GASR_APPROVED")] GasrApproved = 3,
    /// <summary>
    ///  User account was automatically approved for demonstration purpose
    /// </summary>
    [pbr::OriginalName("GASR_DEMO_APPROVED")] GasrDemoApproved = 4,
    /// <summary>
    ///  User account approval is pending
    /// </summary>
    [pbr::OriginalName("GASR_PENDING")] GasrPending = 5,
    /// <summary>
    ///  More information is required from the user to approve their account
    /// </summary>
    [pbr::OriginalName("GASR_REQUIRE_INFO")] GasrRequireInfo = 6,
  }

  /// <summary>
  /// / NotificationFlags are set at login and may be sent through GCM as well
  /// </summary>
  public enum NotificationFlags {
    /// <summary>
    /// / Set whenever GAS changed (wipe after dismissed)
    /// </summary>
    [pbr::OriginalName("NF_ACCOUNT_STATE")] NfAccountState = 0,
    /// <summary>
    /// / Set for new users to learn, pops help message to FAB (wipe on dismissed)
    /// </summary>
    [pbr::OriginalName("NF_MAKE_AN_OFFER_FAB")] NfMakeAnOfferFab = 1,
    /// <summary>
    /// / There are new unread messages from other users (wipe when opening message tab)
    /// </summary>
    [pbr::OriginalName("NF_UNREAD_MESSAGES")] NfUnreadMessages = 2,
    /// <summary>
    /// / Customer support requesting attention (may interpret as duplicate of  NF_ACCOUNT_STATUS if GASR_REQUIRE_INFO)
    /// </summary>
    [pbr::OriginalName("NF_CS_REQUEST")] NfCsRequest = 3,
  }

  public enum BusinessOfferState {
    [pbr::OriginalName("BOS_DRAFT")] BosDraft = 0,
    /// <summary>
    ///  Open and awaiting new applicants
    /// </summary>
    [pbr::OriginalName("BOS_OPEN")] BosOpen = 1,
    /// <summary>
    ///  Active but no longer accepting applicants
    /// </summary>
    [pbr::OriginalName("BOS_ACTIVE")] BosActive = 2,
    [pbr::OriginalName("BOS_CLOSED")] BosClosed = 3,
  }

  public enum BusinessOfferStateReason {
    [pbr::OriginalName("BOSR_NEW_OFFER")] BosrNewOffer = 0,
    /// <summary>
    ///  You have closed this offer.
    /// </summary>
    [pbr::OriginalName("BOSR_USER_CLOSED")] BosrUserClosed = 1,
    /// <summary>
    ///  This offer violates the Terms of Service
    /// </summary>
    [pbr::OriginalName("BOSR_TOS_VIOLATION")] BosrTosViolation = 2,
    /// <summary>
    ///  This offer has been completed by all applicants
    /// </summary>
    [pbr::OriginalName("BOSR_COMPLETED")] BosrCompleted = 3,
  }

  #endregion

  #region Messages
  public sealed partial class ConfigSubCategories : pb::IMessage<ConfigSubCategories> {
    private static readonly pb::MessageParser<ConfigSubCategories> _parser = new pb::MessageParser<ConfigSubCategories>(() => new ConfigSubCategories());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigSubCategories> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSubCategories() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSubCategories(ConfigSubCategories other) : this() {
      labels_ = other.labels_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSubCategories Clone() {
      return new ConfigSubCategories(this);
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_labels_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> labels_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Labels {
      get { return labels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigSubCategories);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigSubCategories other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!labels_.Equals(other.labels_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= labels_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      labels_.WriteTo(output, _repeated_labels_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += labels_.CalculateSize(_repeated_labels_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigSubCategories other) {
      if (other == null) {
        return;
      }
      labels_.Add(other.labels_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            labels_.AddEntriesFrom(input, _repeated_labels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigCategories : pb::IMessage<ConfigCategories> {
    private static readonly pb::MessageParser<ConfigCategories> _parser = new pb::MessageParser<ConfigCategories>(() => new ConfigCategories());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigCategories> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigCategories() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigCategories(ConfigCategories other) : this() {
      sub_ = other.sub_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigCategories Clone() {
      return new ConfigCategories(this);
    }

    /// <summary>Field number for the "sub" field.</summary>
    public const int SubFieldNumber = 1;
    private static readonly pb::FieldCodec<global::InfX.ConfigSubCategories> _repeated_sub_codec
        = pb::FieldCodec.ForMessage(10, global::InfX.ConfigSubCategories.Parser);
    private readonly pbc::RepeatedField<global::InfX.ConfigSubCategories> sub_ = new pbc::RepeatedField<global::InfX.ConfigSubCategories>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.ConfigSubCategories> Sub {
      get { return sub_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigCategories);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigCategories other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sub_.Equals(other.sub_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sub_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sub_.WriteTo(output, _repeated_sub_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sub_.CalculateSize(_repeated_sub_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigCategories other) {
      if (other == null) {
        return;
      }
      sub_.Add(other.sub_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sub_.AddEntriesFrom(input, _repeated_sub_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigOAuthProvider : pb::IMessage<ConfigOAuthProvider> {
    private static readonly pb::MessageParser<ConfigOAuthProvider> _parser = new pb::MessageParser<ConfigOAuthProvider>(() => new ConfigOAuthProvider());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigOAuthProvider> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProvider() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProvider(ConfigOAuthProvider other) : this() {
      visible_ = other.visible_;
      enabled_ = other.enabled_;
      label_ = other.label_;
      fontAwesomeBrand_ = other.fontAwesomeBrand_;
      mechanism_ = other.mechanism_;
      host_ = other.host_;
      callbackUrl_ = other.callbackUrl_;
      requestTokenUrl_ = other.requestTokenUrl_;
      authenticateUrl_ = other.authenticateUrl_;
      accessTokenUrl_ = other.accessTokenUrl_;
      consumerKey_ = other.consumerKey_;
      consumerSecret_ = other.consumerSecret_;
      authUrl_ = other.authUrl_;
      authQuery_ = other.authQuery_;
      clientId_ = other.clientId_;
      clientSecret_ = other.clientSecret_;
      whitelistHosts_ = other.whitelistHosts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProvider Clone() {
      return new ConfigOAuthProvider(this);
    }

    /// <summary>Field number for the "visible" field.</summary>
    public const int VisibleFieldNumber = 1;
    private bool visible_;
    /// <summary>
    /// / Whether the OAuth provider is visible in the UI
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Visible {
      get { return visible_; }
      set {
        visible_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 2;
    private bool enabled_;
    /// <summary>
    /// / Whether the OAuth provider can be used to authenticate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 3;
    private string label_ = "";
    /// <summary>
    /// / Visual name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fontAwesomeBrand" field.</summary>
    public const int FontAwesomeBrandFieldNumber = 14;
    private int fontAwesomeBrand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FontAwesomeBrand {
      get { return fontAwesomeBrand_; }
      set {
        fontAwesomeBrand_ = value;
      }
    }

    /// <summary>Field number for the "mechanism" field.</summary>
    public const int MechanismFieldNumber = 15;
    private global::InfX.OAuthMechanism mechanism_ = 0;
    /// <summary>
    /// / OAuth mechanism
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.OAuthMechanism Mechanism {
      get { return mechanism_; }
      set {
        mechanism_ = value;
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 4;
    private string host_ = "";
    /// <summary>
    /// / API endpoints of the OAuth provider
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "callbackUrl" field.</summary>
    public const int CallbackUrlFieldNumber = 9;
    private string callbackUrl_ = "";
    /// <summary>
    /// / Url that will be used to detect login success by the app
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallbackUrl {
      get { return callbackUrl_; }
      set {
        callbackUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requestTokenUrl" field.</summary>
    public const int RequestTokenUrlFieldNumber = 5;
    private string requestTokenUrl_ = "";
    /// <summary>
    /// / API endpoints for Twitter-like OAuth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestTokenUrl {
      get { return requestTokenUrl_; }
      set {
        requestTokenUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authenticateUrl" field.</summary>
    public const int AuthenticateUrlFieldNumber = 6;
    private string authenticateUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthenticateUrl {
      get { return authenticateUrl_; }
      set {
        authenticateUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accessTokenUrl" field.</summary>
    public const int AccessTokenUrlFieldNumber = 16;
    private string accessTokenUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessTokenUrl {
      get { return accessTokenUrl_; }
      set {
        accessTokenUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "consumerKey" field.</summary>
    public const int ConsumerKeyFieldNumber = 10;
    private string consumerKey_ = "";
    /// <summary>
    /// / Generated by the OAuth provider, Twitter-like
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConsumerKey {
      get { return consumerKey_; }
      set {
        consumerKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "consumerSecret" field.</summary>
    public const int ConsumerSecretFieldNumber = 11;
    private string consumerSecret_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConsumerSecret {
      get { return consumerSecret_; }
      set {
        consumerSecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authUrl" field.</summary>
    public const int AuthUrlFieldNumber = 7;
    private string authUrl_ = "";
    /// <summary>
    /// / API endpoints for Spotify-like OAuth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthUrl {
      get { return authUrl_; }
      set {
        authUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authQuery" field.</summary>
    public const int AuthQueryFieldNumber = 8;
    private string authQuery_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthQuery {
      get { return authQuery_; }
      set {
        authQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientId" field.</summary>
    public const int ClientIdFieldNumber = 12;
    private string clientId_ = "";
    /// <summary>
    /// / From OAuth provider, Spotify-like
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientSecret" field.</summary>
    public const int ClientSecretFieldNumber = 17;
    private string clientSecret_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientSecret {
      get { return clientSecret_; }
      set {
        clientSecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "whitelistHosts" field.</summary>
    public const int WhitelistHostsFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _repeated_whitelistHosts_codec
        = pb::FieldCodec.ForString(146);
    private readonly pbc::RepeatedField<string> whitelistHosts_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// / Whitelisted hosts during authentication
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WhitelistHosts {
      get { return whitelistHosts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigOAuthProvider);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigOAuthProvider other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Visible != other.Visible) return false;
      if (Enabled != other.Enabled) return false;
      if (Label != other.Label) return false;
      if (FontAwesomeBrand != other.FontAwesomeBrand) return false;
      if (Mechanism != other.Mechanism) return false;
      if (Host != other.Host) return false;
      if (CallbackUrl != other.CallbackUrl) return false;
      if (RequestTokenUrl != other.RequestTokenUrl) return false;
      if (AuthenticateUrl != other.AuthenticateUrl) return false;
      if (AccessTokenUrl != other.AccessTokenUrl) return false;
      if (ConsumerKey != other.ConsumerKey) return false;
      if (ConsumerSecret != other.ConsumerSecret) return false;
      if (AuthUrl != other.AuthUrl) return false;
      if (AuthQuery != other.AuthQuery) return false;
      if (ClientId != other.ClientId) return false;
      if (ClientSecret != other.ClientSecret) return false;
      if(!whitelistHosts_.Equals(other.whitelistHosts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Visible != false) hash ^= Visible.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (FontAwesomeBrand != 0) hash ^= FontAwesomeBrand.GetHashCode();
      if (Mechanism != 0) hash ^= Mechanism.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (CallbackUrl.Length != 0) hash ^= CallbackUrl.GetHashCode();
      if (RequestTokenUrl.Length != 0) hash ^= RequestTokenUrl.GetHashCode();
      if (AuthenticateUrl.Length != 0) hash ^= AuthenticateUrl.GetHashCode();
      if (AccessTokenUrl.Length != 0) hash ^= AccessTokenUrl.GetHashCode();
      if (ConsumerKey.Length != 0) hash ^= ConsumerKey.GetHashCode();
      if (ConsumerSecret.Length != 0) hash ^= ConsumerSecret.GetHashCode();
      if (AuthUrl.Length != 0) hash ^= AuthUrl.GetHashCode();
      if (AuthQuery.Length != 0) hash ^= AuthQuery.GetHashCode();
      if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
      if (ClientSecret.Length != 0) hash ^= ClientSecret.GetHashCode();
      hash ^= whitelistHosts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Visible != false) {
        output.WriteRawTag(8);
        output.WriteBool(Visible);
      }
      if (Enabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enabled);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Label);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Host);
      }
      if (RequestTokenUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RequestTokenUrl);
      }
      if (AuthenticateUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AuthenticateUrl);
      }
      if (AuthUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AuthUrl);
      }
      if (AuthQuery.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AuthQuery);
      }
      if (CallbackUrl.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CallbackUrl);
      }
      if (ConsumerKey.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ConsumerKey);
      }
      if (ConsumerSecret.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ConsumerSecret);
      }
      if (ClientId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ClientId);
      }
      if (FontAwesomeBrand != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(FontAwesomeBrand);
      }
      if (Mechanism != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Mechanism);
      }
      if (AccessTokenUrl.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(AccessTokenUrl);
      }
      if (ClientSecret.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ClientSecret);
      }
      whitelistHosts_.WriteTo(output, _repeated_whitelistHosts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Visible != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (FontAwesomeBrand != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FontAwesomeBrand);
      }
      if (Mechanism != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mechanism);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (CallbackUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallbackUrl);
      }
      if (RequestTokenUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestTokenUrl);
      }
      if (AuthenticateUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthenticateUrl);
      }
      if (AccessTokenUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AccessTokenUrl);
      }
      if (ConsumerKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConsumerKey);
      }
      if (ConsumerSecret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConsumerSecret);
      }
      if (AuthUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthUrl);
      }
      if (AuthQuery.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthQuery);
      }
      if (ClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      if (ClientSecret.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientSecret);
      }
      size += whitelistHosts_.CalculateSize(_repeated_whitelistHosts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigOAuthProvider other) {
      if (other == null) {
        return;
      }
      if (other.Visible != false) {
        Visible = other.Visible;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.FontAwesomeBrand != 0) {
        FontAwesomeBrand = other.FontAwesomeBrand;
      }
      if (other.Mechanism != 0) {
        Mechanism = other.Mechanism;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.CallbackUrl.Length != 0) {
        CallbackUrl = other.CallbackUrl;
      }
      if (other.RequestTokenUrl.Length != 0) {
        RequestTokenUrl = other.RequestTokenUrl;
      }
      if (other.AuthenticateUrl.Length != 0) {
        AuthenticateUrl = other.AuthenticateUrl;
      }
      if (other.AccessTokenUrl.Length != 0) {
        AccessTokenUrl = other.AccessTokenUrl;
      }
      if (other.ConsumerKey.Length != 0) {
        ConsumerKey = other.ConsumerKey;
      }
      if (other.ConsumerSecret.Length != 0) {
        ConsumerSecret = other.ConsumerSecret;
      }
      if (other.AuthUrl.Length != 0) {
        AuthUrl = other.AuthUrl;
      }
      if (other.AuthQuery.Length != 0) {
        AuthQuery = other.AuthQuery;
      }
      if (other.ClientId.Length != 0) {
        ClientId = other.ClientId;
      }
      if (other.ClientSecret.Length != 0) {
        ClientSecret = other.ClientSecret;
      }
      whitelistHosts_.Add(other.whitelistHosts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Visible = input.ReadBool();
            break;
          }
          case 16: {
            Enabled = input.ReadBool();
            break;
          }
          case 26: {
            Label = input.ReadString();
            break;
          }
          case 34: {
            Host = input.ReadString();
            break;
          }
          case 42: {
            RequestTokenUrl = input.ReadString();
            break;
          }
          case 50: {
            AuthenticateUrl = input.ReadString();
            break;
          }
          case 58: {
            AuthUrl = input.ReadString();
            break;
          }
          case 66: {
            AuthQuery = input.ReadString();
            break;
          }
          case 74: {
            CallbackUrl = input.ReadString();
            break;
          }
          case 82: {
            ConsumerKey = input.ReadString();
            break;
          }
          case 90: {
            ConsumerSecret = input.ReadString();
            break;
          }
          case 98: {
            ClientId = input.ReadString();
            break;
          }
          case 112: {
            FontAwesomeBrand = input.ReadInt32();
            break;
          }
          case 120: {
            mechanism_ = (global::InfX.OAuthMechanism) input.ReadEnum();
            break;
          }
          case 130: {
            AccessTokenUrl = input.ReadString();
            break;
          }
          case 138: {
            ClientSecret = input.ReadString();
            break;
          }
          case 146: {
            whitelistHosts_.AddEntriesFrom(input, _repeated_whitelistHosts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigOAuthProviders : pb::IMessage<ConfigOAuthProviders> {
    private static readonly pb::MessageParser<ConfigOAuthProviders> _parser = new pb::MessageParser<ConfigOAuthProviders>(() => new ConfigOAuthProviders());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigOAuthProviders> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProviders() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProviders(ConfigOAuthProviders other) : this() {
      all_ = other.all_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProviders Clone() {
      return new ConfigOAuthProviders(this);
    }

    /// <summary>Field number for the "all" field.</summary>
    public const int AllFieldNumber = 1;
    private static readonly pb::FieldCodec<global::InfX.ConfigOAuthProvider> _repeated_all_codec
        = pb::FieldCodec.ForMessage(10, global::InfX.ConfigOAuthProvider.Parser);
    private readonly pbc::RepeatedField<global::InfX.ConfigOAuthProvider> all_ = new pbc::RepeatedField<global::InfX.ConfigOAuthProvider>();
    /// <summary>
    /// / List of all OAuthProviders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.ConfigOAuthProvider> All {
      get { return all_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigOAuthProviders);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigOAuthProviders other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!all_.Equals(other.all_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= all_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      all_.WriteTo(output, _repeated_all_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += all_.CalculateSize(_repeated_all_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigOAuthProviders other) {
      if (other == null) {
        return;
      }
      all_.Add(other.all_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            all_.AddEntriesFrom(input, _repeated_all_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigServices : pb::IMessage<ConfigServices> {
    private static readonly pb::MessageParser<ConfigServices> _parser = new pb::MessageParser<ConfigServices>(() => new ConfigServices());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigServices> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigServices() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigServices(ConfigServices other) : this() {
      apiHosts_ = other.apiHosts_.Clone();
      configUrl_ = other.configUrl_;
      termsOfServiceUrl_ = other.termsOfServiceUrl_;
      privacyPolicyUrl_ = other.privacyPolicyUrl_;
      mapboxApi_ = other.mapboxApi_;
      mapboxUrlTemplate_ = other.mapboxUrlTemplate_;
      mapboxToken_ = other.mapboxToken_;
      spacesRegion_ = other.spacesRegion_;
      spacesKey_ = other.spacesKey_;
      spacesSecret_ = other.spacesSecret_;
      spacesBucket_ = other.spacesBucket_;
      cloudinaryUrl_ = other.cloudinaryUrl_;
      cloudinaryThumbnailUrl_ = other.cloudinaryThumbnailUrl_;
      cloudinaryCoverUrl_ = other.cloudinaryCoverUrl_;
      ipstackApi_ = other.ipstackApi_;
      ipstackKey_ = other.ipstackKey_;
      mariadbHost_ = other.mariadbHost_;
      mariadbPort_ = other.mariadbPort_;
      mariadbUser_ = other.mariadbUser_;
      mariadbPassword_ = other.mariadbPassword_;
      mariadbDatabase_ = other.mariadbDatabase_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigServices Clone() {
      return new ConfigServices(this);
    }

    /// <summary>Field number for the "apiHosts" field.</summary>
    public const int ApiHostsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_apiHosts_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> apiHosts_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  INF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ApiHosts {
      get { return apiHosts_; }
    }

    /// <summary>Field number for the "configUrl" field.</summary>
    public const int ConfigUrlFieldNumber = 9;
    private string configUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConfigUrl {
      get { return configUrl_; }
      set {
        configUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "termsOfServiceUrl" field.</summary>
    public const int TermsOfServiceUrlFieldNumber = 10;
    private string termsOfServiceUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TermsOfServiceUrl {
      get { return termsOfServiceUrl_; }
      set {
        termsOfServiceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "privacyPolicyUrl" field.</summary>
    public const int PrivacyPolicyUrlFieldNumber = 11;
    private string privacyPolicyUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivacyPolicyUrl {
      get { return privacyPolicyUrl_; }
      set {
        privacyPolicyUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mapboxApi" field.</summary>
    public const int MapboxApiFieldNumber = 1;
    private string mapboxApi_ = "";
    /// <summary>
    ///  MapBox
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapboxApi {
      get { return mapboxApi_; }
      set {
        mapboxApi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mapboxUrlTemplate" field.</summary>
    public const int MapboxUrlTemplateFieldNumber = 2;
    private string mapboxUrlTemplate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapboxUrlTemplate {
      get { return mapboxUrlTemplate_; }
      set {
        mapboxUrlTemplate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mapboxToken" field.</summary>
    public const int MapboxTokenFieldNumber = 3;
    private string mapboxToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapboxToken {
      get { return mapboxToken_; }
      set {
        mapboxToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spacesRegion" field.</summary>
    public const int SpacesRegionFieldNumber = 4;
    private string spacesRegion_ = "";
    /// <summary>
    ///  DigitalOcean Spaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpacesRegion {
      get { return spacesRegion_; }
      set {
        spacesRegion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spacesKey" field.</summary>
    public const int SpacesKeyFieldNumber = 5;
    private string spacesKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpacesKey {
      get { return spacesKey_; }
      set {
        spacesKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spacesSecret" field.</summary>
    public const int SpacesSecretFieldNumber = 6;
    private string spacesSecret_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpacesSecret {
      get { return spacesSecret_; }
      set {
        spacesSecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spacesBucket" field.</summary>
    public const int SpacesBucketFieldNumber = 7;
    private string spacesBucket_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpacesBucket {
      get { return spacesBucket_; }
      set {
        spacesBucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cloudinaryUrl" field.</summary>
    public const int CloudinaryUrlFieldNumber = 19;
    private string cloudinaryUrl_ = "";
    /// <summary>
    ///  Cloudinary (Url Templates)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloudinaryUrl {
      get { return cloudinaryUrl_; }
      set {
        cloudinaryUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cloudinaryThumbnailUrl" field.</summary>
    public const int CloudinaryThumbnailUrlFieldNumber = 20;
    private string cloudinaryThumbnailUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloudinaryThumbnailUrl {
      get { return cloudinaryThumbnailUrl_; }
      set {
        cloudinaryThumbnailUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cloudinaryCoverUrl" field.</summary>
    public const int CloudinaryCoverUrlFieldNumber = 21;
    private string cloudinaryCoverUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloudinaryCoverUrl {
      get { return cloudinaryCoverUrl_; }
      set {
        cloudinaryCoverUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipstackApi" field.</summary>
    public const int IpstackApiFieldNumber = 13;
    private string ipstackApi_ = "";
    /// <summary>
    ///  IPStack (FreeGeoIP)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpstackApi {
      get { return ipstackApi_; }
      set {
        ipstackApi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipstackKey" field.</summary>
    public const int IpstackKeyFieldNumber = 12;
    private string ipstackKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpstackKey {
      get { return ipstackKey_; }
      set {
        ipstackKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mariadbHost" field.</summary>
    public const int MariadbHostFieldNumber = 14;
    private string mariadbHost_ = "";
    /// <summary>
    ///  MariaDB (MySQL)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MariadbHost {
      get { return mariadbHost_; }
      set {
        mariadbHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mariadbPort" field.</summary>
    public const int MariadbPortFieldNumber = 15;
    private int mariadbPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MariadbPort {
      get { return mariadbPort_; }
      set {
        mariadbPort_ = value;
      }
    }

    /// <summary>Field number for the "mariadbUser" field.</summary>
    public const int MariadbUserFieldNumber = 16;
    private string mariadbUser_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MariadbUser {
      get { return mariadbUser_; }
      set {
        mariadbUser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mariadbPassword" field.</summary>
    public const int MariadbPasswordFieldNumber = 17;
    private string mariadbPassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MariadbPassword {
      get { return mariadbPassword_; }
      set {
        mariadbPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mariadbDatabase" field.</summary>
    public const int MariadbDatabaseFieldNumber = 18;
    private string mariadbDatabase_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MariadbDatabase {
      get { return mariadbDatabase_; }
      set {
        mariadbDatabase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigServices);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigServices other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!apiHosts_.Equals(other.apiHosts_)) return false;
      if (ConfigUrl != other.ConfigUrl) return false;
      if (TermsOfServiceUrl != other.TermsOfServiceUrl) return false;
      if (PrivacyPolicyUrl != other.PrivacyPolicyUrl) return false;
      if (MapboxApi != other.MapboxApi) return false;
      if (MapboxUrlTemplate != other.MapboxUrlTemplate) return false;
      if (MapboxToken != other.MapboxToken) return false;
      if (SpacesRegion != other.SpacesRegion) return false;
      if (SpacesKey != other.SpacesKey) return false;
      if (SpacesSecret != other.SpacesSecret) return false;
      if (SpacesBucket != other.SpacesBucket) return false;
      if (CloudinaryUrl != other.CloudinaryUrl) return false;
      if (CloudinaryThumbnailUrl != other.CloudinaryThumbnailUrl) return false;
      if (CloudinaryCoverUrl != other.CloudinaryCoverUrl) return false;
      if (IpstackApi != other.IpstackApi) return false;
      if (IpstackKey != other.IpstackKey) return false;
      if (MariadbHost != other.MariadbHost) return false;
      if (MariadbPort != other.MariadbPort) return false;
      if (MariadbUser != other.MariadbUser) return false;
      if (MariadbPassword != other.MariadbPassword) return false;
      if (MariadbDatabase != other.MariadbDatabase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= apiHosts_.GetHashCode();
      if (ConfigUrl.Length != 0) hash ^= ConfigUrl.GetHashCode();
      if (TermsOfServiceUrl.Length != 0) hash ^= TermsOfServiceUrl.GetHashCode();
      if (PrivacyPolicyUrl.Length != 0) hash ^= PrivacyPolicyUrl.GetHashCode();
      if (MapboxApi.Length != 0) hash ^= MapboxApi.GetHashCode();
      if (MapboxUrlTemplate.Length != 0) hash ^= MapboxUrlTemplate.GetHashCode();
      if (MapboxToken.Length != 0) hash ^= MapboxToken.GetHashCode();
      if (SpacesRegion.Length != 0) hash ^= SpacesRegion.GetHashCode();
      if (SpacesKey.Length != 0) hash ^= SpacesKey.GetHashCode();
      if (SpacesSecret.Length != 0) hash ^= SpacesSecret.GetHashCode();
      if (SpacesBucket.Length != 0) hash ^= SpacesBucket.GetHashCode();
      if (CloudinaryUrl.Length != 0) hash ^= CloudinaryUrl.GetHashCode();
      if (CloudinaryThumbnailUrl.Length != 0) hash ^= CloudinaryThumbnailUrl.GetHashCode();
      if (CloudinaryCoverUrl.Length != 0) hash ^= CloudinaryCoverUrl.GetHashCode();
      if (IpstackApi.Length != 0) hash ^= IpstackApi.GetHashCode();
      if (IpstackKey.Length != 0) hash ^= IpstackKey.GetHashCode();
      if (MariadbHost.Length != 0) hash ^= MariadbHost.GetHashCode();
      if (MariadbPort != 0) hash ^= MariadbPort.GetHashCode();
      if (MariadbUser.Length != 0) hash ^= MariadbUser.GetHashCode();
      if (MariadbPassword.Length != 0) hash ^= MariadbPassword.GetHashCode();
      if (MariadbDatabase.Length != 0) hash ^= MariadbDatabase.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapboxApi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MapboxApi);
      }
      if (MapboxUrlTemplate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MapboxUrlTemplate);
      }
      if (MapboxToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MapboxToken);
      }
      if (SpacesRegion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SpacesRegion);
      }
      if (SpacesKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SpacesKey);
      }
      if (SpacesSecret.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SpacesSecret);
      }
      if (SpacesBucket.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SpacesBucket);
      }
      apiHosts_.WriteTo(output, _repeated_apiHosts_codec);
      if (ConfigUrl.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ConfigUrl);
      }
      if (TermsOfServiceUrl.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TermsOfServiceUrl);
      }
      if (PrivacyPolicyUrl.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(PrivacyPolicyUrl);
      }
      if (IpstackKey.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(IpstackKey);
      }
      if (IpstackApi.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(IpstackApi);
      }
      if (MariadbHost.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(MariadbHost);
      }
      if (MariadbPort != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MariadbPort);
      }
      if (MariadbUser.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(MariadbUser);
      }
      if (MariadbPassword.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(MariadbPassword);
      }
      if (MariadbDatabase.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(MariadbDatabase);
      }
      if (CloudinaryUrl.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CloudinaryUrl);
      }
      if (CloudinaryThumbnailUrl.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CloudinaryThumbnailUrl);
      }
      if (CloudinaryCoverUrl.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CloudinaryCoverUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += apiHosts_.CalculateSize(_repeated_apiHosts_codec);
      if (ConfigUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigUrl);
      }
      if (TermsOfServiceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TermsOfServiceUrl);
      }
      if (PrivacyPolicyUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivacyPolicyUrl);
      }
      if (MapboxApi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapboxApi);
      }
      if (MapboxUrlTemplate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapboxUrlTemplate);
      }
      if (MapboxToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapboxToken);
      }
      if (SpacesRegion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpacesRegion);
      }
      if (SpacesKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpacesKey);
      }
      if (SpacesSecret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpacesSecret);
      }
      if (SpacesBucket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpacesBucket);
      }
      if (CloudinaryUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CloudinaryUrl);
      }
      if (CloudinaryThumbnailUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CloudinaryThumbnailUrl);
      }
      if (CloudinaryCoverUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CloudinaryCoverUrl);
      }
      if (IpstackApi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpstackApi);
      }
      if (IpstackKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpstackKey);
      }
      if (MariadbHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MariadbHost);
      }
      if (MariadbPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MariadbPort);
      }
      if (MariadbUser.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MariadbUser);
      }
      if (MariadbPassword.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MariadbPassword);
      }
      if (MariadbDatabase.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MariadbDatabase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigServices other) {
      if (other == null) {
        return;
      }
      apiHosts_.Add(other.apiHosts_);
      if (other.ConfigUrl.Length != 0) {
        ConfigUrl = other.ConfigUrl;
      }
      if (other.TermsOfServiceUrl.Length != 0) {
        TermsOfServiceUrl = other.TermsOfServiceUrl;
      }
      if (other.PrivacyPolicyUrl.Length != 0) {
        PrivacyPolicyUrl = other.PrivacyPolicyUrl;
      }
      if (other.MapboxApi.Length != 0) {
        MapboxApi = other.MapboxApi;
      }
      if (other.MapboxUrlTemplate.Length != 0) {
        MapboxUrlTemplate = other.MapboxUrlTemplate;
      }
      if (other.MapboxToken.Length != 0) {
        MapboxToken = other.MapboxToken;
      }
      if (other.SpacesRegion.Length != 0) {
        SpacesRegion = other.SpacesRegion;
      }
      if (other.SpacesKey.Length != 0) {
        SpacesKey = other.SpacesKey;
      }
      if (other.SpacesSecret.Length != 0) {
        SpacesSecret = other.SpacesSecret;
      }
      if (other.SpacesBucket.Length != 0) {
        SpacesBucket = other.SpacesBucket;
      }
      if (other.CloudinaryUrl.Length != 0) {
        CloudinaryUrl = other.CloudinaryUrl;
      }
      if (other.CloudinaryThumbnailUrl.Length != 0) {
        CloudinaryThumbnailUrl = other.CloudinaryThumbnailUrl;
      }
      if (other.CloudinaryCoverUrl.Length != 0) {
        CloudinaryCoverUrl = other.CloudinaryCoverUrl;
      }
      if (other.IpstackApi.Length != 0) {
        IpstackApi = other.IpstackApi;
      }
      if (other.IpstackKey.Length != 0) {
        IpstackKey = other.IpstackKey;
      }
      if (other.MariadbHost.Length != 0) {
        MariadbHost = other.MariadbHost;
      }
      if (other.MariadbPort != 0) {
        MariadbPort = other.MariadbPort;
      }
      if (other.MariadbUser.Length != 0) {
        MariadbUser = other.MariadbUser;
      }
      if (other.MariadbPassword.Length != 0) {
        MariadbPassword = other.MariadbPassword;
      }
      if (other.MariadbDatabase.Length != 0) {
        MariadbDatabase = other.MariadbDatabase;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MapboxApi = input.ReadString();
            break;
          }
          case 18: {
            MapboxUrlTemplate = input.ReadString();
            break;
          }
          case 26: {
            MapboxToken = input.ReadString();
            break;
          }
          case 34: {
            SpacesRegion = input.ReadString();
            break;
          }
          case 42: {
            SpacesKey = input.ReadString();
            break;
          }
          case 50: {
            SpacesSecret = input.ReadString();
            break;
          }
          case 58: {
            SpacesBucket = input.ReadString();
            break;
          }
          case 66: {
            apiHosts_.AddEntriesFrom(input, _repeated_apiHosts_codec);
            break;
          }
          case 74: {
            ConfigUrl = input.ReadString();
            break;
          }
          case 82: {
            TermsOfServiceUrl = input.ReadString();
            break;
          }
          case 90: {
            PrivacyPolicyUrl = input.ReadString();
            break;
          }
          case 98: {
            IpstackKey = input.ReadString();
            break;
          }
          case 106: {
            IpstackApi = input.ReadString();
            break;
          }
          case 114: {
            MariadbHost = input.ReadString();
            break;
          }
          case 120: {
            MariadbPort = input.ReadInt32();
            break;
          }
          case 130: {
            MariadbUser = input.ReadString();
            break;
          }
          case 138: {
            MariadbPassword = input.ReadString();
            break;
          }
          case 146: {
            MariadbDatabase = input.ReadString();
            break;
          }
          case 154: {
            CloudinaryUrl = input.ReadString();
            break;
          }
          case 162: {
            CloudinaryThumbnailUrl = input.ReadString();
            break;
          }
          case 170: {
            CloudinaryCoverUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigData : pb::IMessage<ConfigData> {
    private static readonly pb::MessageParser<ConfigData> _parser = new pb::MessageParser<ConfigData>(() => new ConfigData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigData(ConfigData other) : this() {
      clientVersion_ = other.clientVersion_;
      timestamp_ = other.timestamp_;
      Categories = other.categories_ != null ? other.Categories.Clone() : null;
      OauthProviders = other.oauthProviders_ != null ? other.OauthProviders.Clone() : null;
      Services = other.services_ != null ? other.Services.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigData Clone() {
      return new ConfigData(this);
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 1;
    private int clientVersion_;
    /// <summary>
    /// / If this goes up in a config, the client must be updated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private long timestamp_;
    /// <summary>
    /// / Timestamp when the config was built. Unix epoch UTC milliseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 2;
    private global::InfX.ConfigCategories categories_;
    /// <summary>
    /// / Configuration data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.ConfigCategories Categories {
      get { return categories_; }
      set {
        categories_ = value;
      }
    }

    /// <summary>Field number for the "oauthProviders" field.</summary>
    public const int OauthProvidersFieldNumber = 3;
    private global::InfX.ConfigOAuthProviders oauthProviders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.ConfigOAuthProviders OauthProviders {
      get { return oauthProviders_; }
      set {
        oauthProviders_ = value;
      }
    }

    /// <summary>Field number for the "services" field.</summary>
    public const int ServicesFieldNumber = 6;
    private global::InfX.ConfigServices services_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.ConfigServices Services {
      get { return services_; }
      set {
        services_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientVersion != other.ClientVersion) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Categories, other.Categories)) return false;
      if (!object.Equals(OauthProviders, other.OauthProviders)) return false;
      if (!object.Equals(Services, other.Services)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientVersion != 0) hash ^= ClientVersion.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (categories_ != null) hash ^= Categories.GetHashCode();
      if (oauthProviders_ != null) hash ^= OauthProviders.GetHashCode();
      if (services_ != null) hash ^= Services.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ClientVersion);
      }
      if (categories_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Categories);
      }
      if (oauthProviders_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OauthProviders);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Timestamp);
      }
      if (services_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Services);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientVersion);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (categories_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Categories);
      }
      if (oauthProviders_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OauthProviders);
      }
      if (services_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Services);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigData other) {
      if (other == null) {
        return;
      }
      if (other.ClientVersion != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.categories_ != null) {
        if (categories_ == null) {
          categories_ = new global::InfX.ConfigCategories();
        }
        Categories.MergeFrom(other.Categories);
      }
      if (other.oauthProviders_ != null) {
        if (oauthProviders_ == null) {
          oauthProviders_ = new global::InfX.ConfigOAuthProviders();
        }
        OauthProviders.MergeFrom(other.OauthProviders);
      }
      if (other.services_ != null) {
        if (services_ == null) {
          services_ = new global::InfX.ConfigServices();
        }
        Services.MergeFrom(other.Services);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClientVersion = input.ReadInt32();
            break;
          }
          case 18: {
            if (categories_ == null) {
              categories_ = new global::InfX.ConfigCategories();
            }
            input.ReadMessage(categories_);
            break;
          }
          case 26: {
            if (oauthProviders_ == null) {
              oauthProviders_ = new global::InfX.ConfigOAuthProviders();
            }
            input.ReadMessage(oauthProviders_);
            break;
          }
          case 40: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 50: {
            if (services_ == null) {
              services_ = new global::InfX.ConfigServices();
            }
            input.ReadMessage(services_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CategoryId : pb::IMessage<CategoryId> {
    private static readonly pb::MessageParser<CategoryId> _parser = new pb::MessageParser<CategoryId>(() => new CategoryId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CategoryId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryId(CategoryId other) : this() {
      main_ = other.main_;
      sub_ = other.sub_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryId Clone() {
      return new CategoryId(this);
    }

    /// <summary>Field number for the "main" field.</summary>
    public const int MainFieldNumber = 1;
    private int main_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Main {
      get { return main_; }
      set {
        main_ = value;
      }
    }

    /// <summary>Field number for the "sub" field.</summary>
    public const int SubFieldNumber = 2;
    private int sub_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sub {
      get { return sub_; }
      set {
        sub_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CategoryId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CategoryId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Main != other.Main) return false;
      if (Sub != other.Sub) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Main != 0) hash ^= Main.GetHashCode();
      if (Sub != 0) hash ^= Sub.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Main != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Main);
      }
      if (Sub != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sub);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Main != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Main);
      }
      if (Sub != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sub);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CategoryId other) {
      if (other == null) {
        return;
      }
      if (other.Main != 0) {
        Main = other.Main;
      }
      if (other.Sub != 0) {
        Sub = other.Sub;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Main = input.ReadInt32();
            break;
          }
          case 16: {
            Sub = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  This message may not contain 'repeated' due to usage of 'mergeFromMessage'
  /// </summary>
  public sealed partial class DataSocialMedia : pb::IMessage<DataSocialMedia> {
    private static readonly pb::MessageParser<DataSocialMedia> _parser = new pb::MessageParser<DataSocialMedia>(() => new DataSocialMedia());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataSocialMedia> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSocialMedia() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSocialMedia(DataSocialMedia other) : this() {
      connected_ = other.connected_;
      expired_ = other.expired_;
      screenName_ = other.screenName_;
      displayName_ = other.displayName_;
      avatarUrl_ = other.avatarUrl_;
      profileUrl_ = other.profileUrl_;
      description_ = other.description_;
      location_ = other.location_;
      url_ = other.url_;
      email_ = other.email_;
      friendsCount_ = other.friendsCount_;
      followersCount_ = other.followersCount_;
      followingCount_ = other.followingCount_;
      postsCount_ = other.postsCount_;
      verified_ = other.verified_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSocialMedia Clone() {
      return new DataSocialMedia(this);
    }

    /// <summary>Field number for the "connected" field.</summary>
    public const int ConnectedFieldNumber = 1;
    private bool connected_;
    /// <summary>
    /// / Social media is connected to the account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Connected {
      get { return connected_; }
      set {
        connected_ = value;
      }
    }

    /// <summary>Field number for the "expired" field.</summary>
    public const int ExpiredFieldNumber = 15;
    private bool expired_;
    /// <summary>
    /// / Token for connection is expired, data outdated and user must re-connect by OAuth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Expired {
      get { return expired_; }
      set {
        expired_ = value;
      }
    }

    /// <summary>Field number for the "screenName" field.</summary>
    public const int ScreenNameFieldNumber = 4;
    private string screenName_ = "";
    /// <summary>
    /// / Screen name, eg. Twitter account name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScreenName {
      get { return screenName_; }
      set {
        screenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "displayName" field.</summary>
    public const int DisplayNameFieldNumber = 5;
    private string displayName_ = "";
    /// <summary>
    /// / Display name, eg. Facebook full name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatarUrl" field.</summary>
    public const int AvatarUrlFieldNumber = 14;
    private string avatarUrl_ = "";
    /// <summary>
    /// / Url to the actual social media profile
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "profileUrl" field.</summary>
    public const int ProfileUrlFieldNumber = 13;
    private string profileUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProfileUrl {
      get { return profileUrl_; }
      set {
        profileUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 7;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 8;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 12;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "friendsCount" field.</summary>
    public const int FriendsCountFieldNumber = 9;
    private int friendsCount_;
    /// <summary>
    ///  Use the largest of either friendsCount or followersCount for boasting. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FriendsCount {
      get { return friendsCount_; }
      set {
        friendsCount_ = value;
      }
    }

    /// <summary>Field number for the "followersCount" field.</summary>
    public const int FollowersCountFieldNumber = 2;
    private int followersCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FollowersCount {
      get { return followersCount_; }
      set {
        followersCount_ = value;
      }
    }

    /// <summary>Field number for the "followingCount" field.</summary>
    public const int FollowingCountFieldNumber = 3;
    private int followingCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FollowingCount {
      get { return followingCount_; }
      set {
        followingCount_ = value;
      }
    }

    /// <summary>Field number for the "postsCount" field.</summary>
    public const int PostsCountFieldNumber = 10;
    private int postsCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PostsCount {
      get { return postsCount_; }
      set {
        postsCount_ = value;
      }
    }

    /// <summary>Field number for the "verified" field.</summary>
    public const int VerifiedFieldNumber = 11;
    private bool verified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Verified {
      get { return verified_; }
      set {
        verified_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataSocialMedia);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataSocialMedia other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Connected != other.Connected) return false;
      if (Expired != other.Expired) return false;
      if (ScreenName != other.ScreenName) return false;
      if (DisplayName != other.DisplayName) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (ProfileUrl != other.ProfileUrl) return false;
      if (Description != other.Description) return false;
      if (Location != other.Location) return false;
      if (Url != other.Url) return false;
      if (Email != other.Email) return false;
      if (FriendsCount != other.FriendsCount) return false;
      if (FollowersCount != other.FollowersCount) return false;
      if (FollowingCount != other.FollowingCount) return false;
      if (PostsCount != other.PostsCount) return false;
      if (Verified != other.Verified) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Connected != false) hash ^= Connected.GetHashCode();
      if (Expired != false) hash ^= Expired.GetHashCode();
      if (ScreenName.Length != 0) hash ^= ScreenName.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (ProfileUrl.Length != 0) hash ^= ProfileUrl.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (FriendsCount != 0) hash ^= FriendsCount.GetHashCode();
      if (FollowersCount != 0) hash ^= FollowersCount.GetHashCode();
      if (FollowingCount != 0) hash ^= FollowingCount.GetHashCode();
      if (PostsCount != 0) hash ^= PostsCount.GetHashCode();
      if (Verified != false) hash ^= Verified.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Connected != false) {
        output.WriteRawTag(8);
        output.WriteBool(Connected);
      }
      if (FollowersCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FollowersCount);
      }
      if (FollowingCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FollowingCount);
      }
      if (ScreenName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ScreenName);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DisplayName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Location);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Url);
      }
      if (FriendsCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FriendsCount);
      }
      if (PostsCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PostsCount);
      }
      if (Verified != false) {
        output.WriteRawTag(88);
        output.WriteBool(Verified);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Email);
      }
      if (ProfileUrl.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ProfileUrl);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(AvatarUrl);
      }
      if (Expired != false) {
        output.WriteRawTag(120);
        output.WriteBool(Expired);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Connected != false) {
        size += 1 + 1;
      }
      if (Expired != false) {
        size += 1 + 1;
      }
      if (ScreenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScreenName);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (ProfileUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProfileUrl);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (FriendsCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendsCount);
      }
      if (FollowersCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FollowersCount);
      }
      if (FollowingCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FollowingCount);
      }
      if (PostsCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PostsCount);
      }
      if (Verified != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataSocialMedia other) {
      if (other == null) {
        return;
      }
      if (other.Connected != false) {
        Connected = other.Connected;
      }
      if (other.Expired != false) {
        Expired = other.Expired;
      }
      if (other.ScreenName.Length != 0) {
        ScreenName = other.ScreenName;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.ProfileUrl.Length != 0) {
        ProfileUrl = other.ProfileUrl;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.FriendsCount != 0) {
        FriendsCount = other.FriendsCount;
      }
      if (other.FollowersCount != 0) {
        FollowersCount = other.FollowersCount;
      }
      if (other.FollowingCount != 0) {
        FollowingCount = other.FollowingCount;
      }
      if (other.PostsCount != 0) {
        PostsCount = other.PostsCount;
      }
      if (other.Verified != false) {
        Verified = other.Verified;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Connected = input.ReadBool();
            break;
          }
          case 16: {
            FollowersCount = input.ReadInt32();
            break;
          }
          case 24: {
            FollowingCount = input.ReadInt32();
            break;
          }
          case 34: {
            ScreenName = input.ReadString();
            break;
          }
          case 42: {
            DisplayName = input.ReadString();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 58: {
            Location = input.ReadString();
            break;
          }
          case 66: {
            Url = input.ReadString();
            break;
          }
          case 72: {
            FriendsCount = input.ReadInt32();
            break;
          }
          case 80: {
            PostsCount = input.ReadInt32();
            break;
          }
          case 88: {
            Verified = input.ReadBool();
            break;
          }
          case 98: {
            Email = input.ReadString();
            break;
          }
          case 106: {
            ProfileUrl = input.ReadString();
            break;
          }
          case 114: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 120: {
            Expired = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Server info, never shared with client 
  /// </summary>
  public sealed partial class DataOAuthCredentials : pb::IMessage<DataOAuthCredentials> {
    private static readonly pb::MessageParser<DataOAuthCredentials> _parser = new pb::MessageParser<DataOAuthCredentials>(() => new DataOAuthCredentials());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataOAuthCredentials> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOAuthCredentials() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOAuthCredentials(DataOAuthCredentials other) : this() {
      userId_ = other.userId_;
      token_ = other.token_;
      tokenSecret_ = other.tokenSecret_;
      tokenExpires_ = other.tokenExpires_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOAuthCredentials Clone() {
      return new DataOAuthCredentials(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 4;
    private string userId_ = "";
    /// <summary>
    /// / User id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    /// / Token for OAuth1 and OAuth2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tokenSecret" field.</summary>
    public const int TokenSecretFieldNumber = 2;
    private string tokenSecret_ = "";
    /// <summary>
    /// / Secret token for OAuth1. May be empty string for OAuth2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSecret {
      get { return tokenSecret_; }
      set {
        tokenSecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tokenExpires" field.</summary>
    public const int TokenExpiresFieldNumber = 3;
    private int tokenExpires_;
    /// <summary>
    /// / Expiration timestamp in seconds. No expiration if 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TokenExpires {
      get { return tokenExpires_; }
      set {
        tokenExpires_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataOAuthCredentials);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataOAuthCredentials other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Token != other.Token) return false;
      if (TokenSecret != other.TokenSecret) return false;
      if (TokenExpires != other.TokenExpires) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (TokenSecret.Length != 0) hash ^= TokenSecret.GetHashCode();
      if (TokenExpires != 0) hash ^= TokenExpires.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (TokenSecret.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenSecret);
      }
      if (TokenExpires != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TokenExpires);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (TokenSecret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSecret);
      }
      if (TokenExpires != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TokenExpires);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataOAuthCredentials other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.TokenSecret.Length != 0) {
        TokenSecret = other.TokenSecret;
      }
      if (other.TokenExpires != 0) {
        TokenExpires = other.TokenExpires;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            TokenSecret = input.ReadString();
            break;
          }
          case 24: {
            TokenExpires = input.ReadInt32();
            break;
          }
          case 34: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataBusinessOffer : pb::IMessage<DataBusinessOffer> {
    private static readonly pb::MessageParser<DataBusinessOffer> _parser = new pb::MessageParser<DataBusinessOffer>(() => new DataBusinessOffer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataBusinessOffer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBusinessOffer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBusinessOffer(DataBusinessOffer other) : this() {
      offerId_ = other.offerId_;
      accountId_ = other.accountId_;
      locationId_ = other.locationId_;
      title_ = other.title_;
      description_ = other.description_;
      avatarUrl_ = other.avatarUrl_;
      deliverables_ = other.deliverables_;
      reward_ = other.reward_;
      location_ = other.location_;
      coverUrls_ = other.coverUrls_.Clone();
      categories_ = other.categories_.Clone();
      state_ = other.state_;
      stateReason_ = other.stateReason_;
      applicantsNew_ = other.applicantsNew_;
      applicantsAccepted_ = other.applicantsAccepted_;
      applicantsCompleted_ = other.applicantsCompleted_;
      applicantsRefused_ = other.applicantsRefused_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBusinessOffer Clone() {
      return new DataBusinessOffer(this);
    }

    /// <summary>Field number for the "offerId" field.</summary>
    public const int OfferIdFieldNumber = 1;
    private long offerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OfferId {
      get { return offerId_; }
      set {
        offerId_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private int accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "locationId" field.</summary>
    public const int LocationIdFieldNumber = 3;
    private int locationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocationId {
      get { return locationId_; }
      set {
        locationId_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 4;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatarUrl" field.</summary>
    public const int AvatarUrlFieldNumber = 6;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deliverables" field.</summary>
    public const int DeliverablesFieldNumber = 7;
    private string deliverables_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deliverables {
      get { return deliverables_; }
      set {
        deliverables_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 8;
    private string reward_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reward {
      get { return reward_; }
      set {
        reward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 9;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coverUrls" field.</summary>
    public const int CoverUrlsFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_coverUrls_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> coverUrls_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CoverUrls {
      get { return coverUrls_; }
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 11;
    private static readonly pb::FieldCodec<global::InfX.CategoryId> _repeated_categories_codec
        = pb::FieldCodec.ForMessage(90, global::InfX.CategoryId.Parser);
    private readonly pbc::RepeatedField<global::InfX.CategoryId> categories_ = new pbc::RepeatedField<global::InfX.CategoryId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.CategoryId> Categories {
      get { return categories_; }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 12;
    private global::InfX.BusinessOfferState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.BusinessOfferState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "stateReason" field.</summary>
    public const int StateReasonFieldNumber = 13;
    private global::InfX.BusinessOfferStateReason stateReason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.BusinessOfferStateReason StateReason {
      get { return stateReason_; }
      set {
        stateReason_ = value;
      }
    }

    /// <summary>Field number for the "applicantsNew" field.</summary>
    public const int ApplicantsNewFieldNumber = 14;
    private int applicantsNew_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantsNew {
      get { return applicantsNew_; }
      set {
        applicantsNew_ = value;
      }
    }

    /// <summary>Field number for the "applicantsAccepted" field.</summary>
    public const int ApplicantsAcceptedFieldNumber = 15;
    private int applicantsAccepted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantsAccepted {
      get { return applicantsAccepted_; }
      set {
        applicantsAccepted_ = value;
      }
    }

    /// <summary>Field number for the "applicantsCompleted" field.</summary>
    public const int ApplicantsCompletedFieldNumber = 16;
    private int applicantsCompleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantsCompleted {
      get { return applicantsCompleted_; }
      set {
        applicantsCompleted_ = value;
      }
    }

    /// <summary>Field number for the "applicantsRefused" field.</summary>
    public const int ApplicantsRefusedFieldNumber = 17;
    private int applicantsRefused_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicantsRefused {
      get { return applicantsRefused_; }
      set {
        applicantsRefused_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataBusinessOffer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataBusinessOffer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OfferId != other.OfferId) return false;
      if (AccountId != other.AccountId) return false;
      if (LocationId != other.LocationId) return false;
      if (Title != other.Title) return false;
      if (Description != other.Description) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (Deliverables != other.Deliverables) return false;
      if (Reward != other.Reward) return false;
      if (Location != other.Location) return false;
      if(!coverUrls_.Equals(other.coverUrls_)) return false;
      if(!categories_.Equals(other.categories_)) return false;
      if (State != other.State) return false;
      if (StateReason != other.StateReason) return false;
      if (ApplicantsNew != other.ApplicantsNew) return false;
      if (ApplicantsAccepted != other.ApplicantsAccepted) return false;
      if (ApplicantsCompleted != other.ApplicantsCompleted) return false;
      if (ApplicantsRefused != other.ApplicantsRefused) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OfferId != 0L) hash ^= OfferId.GetHashCode();
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      if (LocationId != 0) hash ^= LocationId.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (Deliverables.Length != 0) hash ^= Deliverables.GetHashCode();
      if (Reward.Length != 0) hash ^= Reward.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      hash ^= coverUrls_.GetHashCode();
      hash ^= categories_.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (StateReason != 0) hash ^= StateReason.GetHashCode();
      if (ApplicantsNew != 0) hash ^= ApplicantsNew.GetHashCode();
      if (ApplicantsAccepted != 0) hash ^= ApplicantsAccepted.GetHashCode();
      if (ApplicantsCompleted != 0) hash ^= ApplicantsCompleted.GetHashCode();
      if (ApplicantsRefused != 0) hash ^= ApplicantsRefused.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OfferId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OfferId);
      }
      if (AccountId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AccountId);
      }
      if (LocationId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LocationId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Title);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AvatarUrl);
      }
      if (Deliverables.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Deliverables);
      }
      if (Reward.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Reward);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Location);
      }
      coverUrls_.WriteTo(output, _repeated_coverUrls_codec);
      categories_.WriteTo(output, _repeated_categories_codec);
      if (State != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) State);
      }
      if (StateReason != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) StateReason);
      }
      if (ApplicantsNew != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ApplicantsNew);
      }
      if (ApplicantsAccepted != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ApplicantsAccepted);
      }
      if (ApplicantsCompleted != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ApplicantsCompleted);
      }
      if (ApplicantsRefused != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ApplicantsRefused);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OfferId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OfferId);
      }
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      if (LocationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocationId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (Deliverables.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Deliverables);
      }
      if (Reward.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reward);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      size += coverUrls_.CalculateSize(_repeated_coverUrls_codec);
      size += categories_.CalculateSize(_repeated_categories_codec);
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (StateReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StateReason);
      }
      if (ApplicantsNew != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicantsNew);
      }
      if (ApplicantsAccepted != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicantsAccepted);
      }
      if (ApplicantsCompleted != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ApplicantsCompleted);
      }
      if (ApplicantsRefused != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ApplicantsRefused);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataBusinessOffer other) {
      if (other == null) {
        return;
      }
      if (other.OfferId != 0L) {
        OfferId = other.OfferId;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      if (other.LocationId != 0) {
        LocationId = other.LocationId;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.Deliverables.Length != 0) {
        Deliverables = other.Deliverables;
      }
      if (other.Reward.Length != 0) {
        Reward = other.Reward;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      coverUrls_.Add(other.coverUrls_);
      categories_.Add(other.categories_);
      if (other.State != 0) {
        State = other.State;
      }
      if (other.StateReason != 0) {
        StateReason = other.StateReason;
      }
      if (other.ApplicantsNew != 0) {
        ApplicantsNew = other.ApplicantsNew;
      }
      if (other.ApplicantsAccepted != 0) {
        ApplicantsAccepted = other.ApplicantsAccepted;
      }
      if (other.ApplicantsCompleted != 0) {
        ApplicantsCompleted = other.ApplicantsCompleted;
      }
      if (other.ApplicantsRefused != 0) {
        ApplicantsRefused = other.ApplicantsRefused;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OfferId = input.ReadInt64();
            break;
          }
          case 16: {
            AccountId = input.ReadInt32();
            break;
          }
          case 24: {
            LocationId = input.ReadInt32();
            break;
          }
          case 34: {
            Title = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 58: {
            Deliverables = input.ReadString();
            break;
          }
          case 66: {
            Reward = input.ReadString();
            break;
          }
          case 74: {
            Location = input.ReadString();
            break;
          }
          case 82: {
            coverUrls_.AddEntriesFrom(input, _repeated_coverUrls_codec);
            break;
          }
          case 90: {
            categories_.AddEntriesFrom(input, _repeated_categories_codec);
            break;
          }
          case 96: {
            state_ = (global::InfX.BusinessOfferState) input.ReadEnum();
            break;
          }
          case 104: {
            stateReason_ = (global::InfX.BusinessOfferStateReason) input.ReadEnum();
            break;
          }
          case 112: {
            ApplicantsNew = input.ReadInt32();
            break;
          }
          case 120: {
            ApplicantsAccepted = input.ReadInt32();
            break;
          }
          case 128: {
            ApplicantsCompleted = input.ReadInt32();
            break;
          }
          case 136: {
            ApplicantsRefused = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataLocation : pb::IMessage<DataLocation> {
    private static readonly pb::MessageParser<DataLocation> _parser = new pb::MessageParser<DataLocation>(() => new DataLocation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLocation(DataLocation other) : this() {
      locationId_ = other.locationId_;
      name_ = other.name_;
      avatarUrl_ = other.avatarUrl_;
      approximate_ = other.approximate_;
      detail_ = other.detail_;
      postcode_ = other.postcode_;
      regionCode_ = other.regionCode_;
      countryCode_ = other.countryCode_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLocation Clone() {
      return new DataLocation(this);
    }

    /// <summary>Field number for the "locationId" field.</summary>
    public const int LocationIdFieldNumber = 1;
    private int locationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocationId {
      get { return locationId_; }
      set {
        locationId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatarUrl" field.</summary>
    public const int AvatarUrlFieldNumber = 6;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "approximate" field.</summary>
    public const int ApproximateFieldNumber = 7;
    private string approximate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Approximate {
      get { return approximate_; }
      set {
        approximate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 8;
    private string detail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "postcode" field.</summary>
    public const int PostcodeFieldNumber = 9;
    private string postcode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Postcode {
      get { return postcode_; }
      set {
        postcode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "regionCode" field.</summary>
    public const int RegionCodeFieldNumber = 10;
    private string regionCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegionCode {
      get { return regionCode_; }
      set {
        regionCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "countryCode" field.</summary>
    public const int CountryCodeFieldNumber = 11;
    private string countryCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 4;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 5;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocationId != other.LocationId) return false;
      if (Name != other.Name) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (Approximate != other.Approximate) return false;
      if (Detail != other.Detail) return false;
      if (Postcode != other.Postcode) return false;
      if (RegionCode != other.RegionCode) return false;
      if (CountryCode != other.CountryCode) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocationId != 0) hash ^= LocationId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (Approximate.Length != 0) hash ^= Approximate.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      if (Postcode.Length != 0) hash ^= Postcode.GetHashCode();
      if (RegionCode.Length != 0) hash ^= RegionCode.GetHashCode();
      if (CountryCode.Length != 0) hash ^= CountryCode.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LocationId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LocationId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Longitude);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AvatarUrl);
      }
      if (Approximate.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Approximate);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Detail);
      }
      if (Postcode.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Postcode);
      }
      if (RegionCode.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RegionCode);
      }
      if (CountryCode.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CountryCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocationId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (Approximate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Approximate);
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      if (Postcode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Postcode);
      }
      if (RegionCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegionCode);
      }
      if (CountryCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataLocation other) {
      if (other == null) {
        return;
      }
      if (other.LocationId != 0) {
        LocationId = other.LocationId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.Approximate.Length != 0) {
        Approximate = other.Approximate;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
      if (other.Postcode.Length != 0) {
        Postcode = other.Postcode;
      }
      if (other.RegionCode.Length != 0) {
        RegionCode = other.RegionCode;
      }
      if (other.CountryCode.Length != 0) {
        CountryCode = other.CountryCode;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LocationId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 33: {
            Latitude = input.ReadDouble();
            break;
          }
          case 41: {
            Longitude = input.ReadDouble();
            break;
          }
          case 50: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 58: {
            Approximate = input.ReadString();
            break;
          }
          case 66: {
            Detail = input.ReadString();
            break;
          }
          case 74: {
            Postcode = input.ReadString();
            break;
          }
          case 82: {
            RegionCode = input.ReadString();
            break;
          }
          case 90: {
            CountryCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataApplicant : pb::IMessage<DataApplicant> {
    private static readonly pb::MessageParser<DataApplicant> _parser = new pb::MessageParser<DataApplicant>(() => new DataApplicant());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataApplicant> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataApplicant() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataApplicant(DataApplicant other) : this() {
      applicantId_ = other.applicantId_;
      offerId_ = other.offerId_;
      accountId_ = other.accountId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataApplicant Clone() {
      return new DataApplicant(this);
    }

    /// <summary>Field number for the "applicantId" field.</summary>
    public const int ApplicantIdFieldNumber = 1;
    private long applicantId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ApplicantId {
      get { return applicantId_; }
      set {
        applicantId_ = value;
      }
    }

    /// <summary>Field number for the "offerId" field.</summary>
    public const int OfferIdFieldNumber = 2;
    private long offerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OfferId {
      get { return offerId_; }
      set {
        offerId_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 3;
    private int accountId_;
    /// <summary>
    ///  bool influencer accepted/delivered/...
    ///  bool business accepted/received service/...
    ///  datetime schedule etc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataApplicant);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataApplicant other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicantId != other.ApplicantId) return false;
      if (OfferId != other.OfferId) return false;
      if (AccountId != other.AccountId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicantId != 0L) hash ^= ApplicantId.GetHashCode();
      if (OfferId != 0L) hash ^= OfferId.GetHashCode();
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicantId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ApplicantId);
      }
      if (OfferId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OfferId);
      }
      if (AccountId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicantId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApplicantId);
      }
      if (OfferId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OfferId);
      }
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataApplicant other) {
      if (other == null) {
        return;
      }
      if (other.ApplicantId != 0L) {
        ApplicantId = other.ApplicantId;
      }
      if (other.OfferId != 0L) {
        OfferId = other.OfferId;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicantId = input.ReadInt64();
            break;
          }
          case 16: {
            OfferId = input.ReadInt64();
            break;
          }
          case 24: {
            AccountId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataChat : pb::IMessage<DataChat> {
    private static readonly pb::MessageParser<DataChat> _parser = new pb::MessageParser<DataChat>(() => new DataChat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataChat(DataChat other) : this() {
      applicantId_ = other.applicantId_;
      sequenceId_ = other.sequenceId_;
      keyId_ = other.keyId_;
      outgoing_ = other.outgoing_;
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataChat Clone() {
      return new DataChat(this);
    }

    /// <summary>Field number for the "applicantId" field.</summary>
    public const int ApplicantIdFieldNumber = 1;
    private long applicantId_;
    /// <summary>
    ///  One chat per applicant
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ApplicantId {
      get { return applicantId_; }
      set {
        applicantId_ = value;
      }
    }

    /// <summary>Field number for the "sequenceId" field.</summary>
    public const int SequenceIdFieldNumber = 2;
    private long sequenceId_;
    /// <summary>
    ///  Sequential identifier in the chat stream
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SequenceId {
      get { return sequenceId_; }
      set {
        sequenceId_ = value;
      }
    }

    /// <summary>Field number for the "keyId" field.</summary>
    public const int KeyIdFieldNumber = 3;
    private long keyId_;
    /// <summary>
    ///  Deduplication client-side (ghost entry)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long KeyId {
      get { return keyId_; }
      set {
        keyId_ = value;
      }
    }

    /// <summary>Field number for the "outgoing" field.</summary>
    public const int OutgoingFieldNumber = 4;
    private bool outgoing_;
    /// <summary>
    ///  Outgoing or incoming message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Outgoing {
      get { return outgoing_; }
      set {
        outgoing_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 5;
    private string text_ = "";
    /// <summary>
    ///  The written text
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicantId != other.ApplicantId) return false;
      if (SequenceId != other.SequenceId) return false;
      if (KeyId != other.KeyId) return false;
      if (Outgoing != other.Outgoing) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicantId != 0L) hash ^= ApplicantId.GetHashCode();
      if (SequenceId != 0L) hash ^= SequenceId.GetHashCode();
      if (KeyId != 0L) hash ^= KeyId.GetHashCode();
      if (Outgoing != false) hash ^= Outgoing.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicantId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ApplicantId);
      }
      if (SequenceId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SequenceId);
      }
      if (KeyId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(KeyId);
      }
      if (Outgoing != false) {
        output.WriteRawTag(32);
        output.WriteBool(Outgoing);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicantId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApplicantId);
      }
      if (SequenceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SequenceId);
      }
      if (KeyId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(KeyId);
      }
      if (Outgoing != false) {
        size += 1 + 1;
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataChat other) {
      if (other == null) {
        return;
      }
      if (other.ApplicantId != 0L) {
        ApplicantId = other.ApplicantId;
      }
      if (other.SequenceId != 0L) {
        SequenceId = other.SequenceId;
      }
      if (other.KeyId != 0L) {
        KeyId = other.KeyId;
      }
      if (other.Outgoing != false) {
        Outgoing = other.Outgoing;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicantId = input.ReadInt64();
            break;
          }
          case 16: {
            SequenceId = input.ReadInt64();
            break;
          }
          case 24: {
            KeyId = input.ReadInt64();
            break;
          }
          case 32: {
            Outgoing = input.ReadBool();
            break;
          }
          case 42: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataAccountState : pb::IMessage<DataAccountState> {
    private static readonly pb::MessageParser<DataAccountState> _parser = new pb::MessageParser<DataAccountState>(() => new DataAccountState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataAccountState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountState(DataAccountState other) : this() {
      deviceId_ = other.deviceId_;
      accountId_ = other.accountId_;
      accountType_ = other.accountType_;
      globalAccountState_ = other.globalAccountState_;
      globalAccountStateReason_ = other.globalAccountStateReason_;
      notificationFlags_ = other.notificationFlags_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountState Clone() {
      return new DataAccountState(this);
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private int deviceId_;
    /// <summary>
    ///  Device ID. If 0, authentication failed, and the client must create a new account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private int accountId_;
    /// <summary>
    ///  Account ID. If 0, proceed with account creation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "accountType" field.</summary>
    public const int AccountTypeFieldNumber = 3;
    private global::InfX.AccountType accountType_ = 0;
    /// <summary>
    ///  Account type. If not AT_UNKNOWN, account creation may bypass type selection
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.AccountType AccountType {
      get { return accountType_; }
      set {
        accountType_ = value;
      }
    }

    /// <summary>Field number for the "globalAccountState" field.</summary>
    public const int GlobalAccountStateFieldNumber = 4;
    private global::InfX.GlobalAccountState globalAccountState_ = 0;
    /// <summary>
    ///  TODO: Rename to globalState
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.GlobalAccountState GlobalAccountState {
      get { return globalAccountState_; }
      set {
        globalAccountState_ = value;
      }
    }

    /// <summary>Field number for the "globalAccountStateReason" field.</summary>
    public const int GlobalAccountStateReasonFieldNumber = 5;
    private global::InfX.GlobalAccountStateReason globalAccountStateReason_ = 0;
    /// <summary>
    ///  TODO: Rename to globalStateReason
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.GlobalAccountStateReason GlobalAccountStateReason {
      get { return globalAccountStateReason_; }
      set {
        globalAccountStateReason_ = value;
      }
    }

    /// <summary>Field number for the "notificationFlags" field.</summary>
    public const int NotificationFlagsFieldNumber = 6;
    private global::InfX.NotificationFlags notificationFlags_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.NotificationFlags NotificationFlags {
      get { return notificationFlags_; }
      set {
        notificationFlags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataAccountState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataAccountState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      if (AccountId != other.AccountId) return false;
      if (AccountType != other.AccountType) return false;
      if (GlobalAccountState != other.GlobalAccountState) return false;
      if (GlobalAccountStateReason != other.GlobalAccountStateReason) return false;
      if (NotificationFlags != other.NotificationFlags) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId != 0) hash ^= DeviceId.GetHashCode();
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      if (AccountType != 0) hash ^= AccountType.GetHashCode();
      if (GlobalAccountState != 0) hash ^= GlobalAccountState.GetHashCode();
      if (GlobalAccountStateReason != 0) hash ^= GlobalAccountStateReason.GetHashCode();
      if (NotificationFlags != 0) hash ^= NotificationFlags.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeviceId);
      }
      if (AccountId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AccountId);
      }
      if (AccountType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AccountType);
      }
      if (GlobalAccountState != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) GlobalAccountState);
      }
      if (GlobalAccountStateReason != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) GlobalAccountStateReason);
      }
      if (NotificationFlags != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) NotificationFlags);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviceId);
      }
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      if (AccountType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccountType);
      }
      if (GlobalAccountState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GlobalAccountState);
      }
      if (GlobalAccountStateReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GlobalAccountStateReason);
      }
      if (NotificationFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NotificationFlags);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataAccountState other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      if (other.AccountType != 0) {
        AccountType = other.AccountType;
      }
      if (other.GlobalAccountState != 0) {
        GlobalAccountState = other.GlobalAccountState;
      }
      if (other.GlobalAccountStateReason != 0) {
        GlobalAccountStateReason = other.GlobalAccountStateReason;
      }
      if (other.NotificationFlags != 0) {
        NotificationFlags = other.NotificationFlags;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DeviceId = input.ReadInt32();
            break;
          }
          case 16: {
            AccountId = input.ReadInt32();
            break;
          }
          case 24: {
            accountType_ = (global::InfX.AccountType) input.ReadEnum();
            break;
          }
          case 32: {
            globalAccountState_ = (global::InfX.GlobalAccountState) input.ReadEnum();
            break;
          }
          case 40: {
            globalAccountStateReason_ = (global::InfX.GlobalAccountStateReason) input.ReadEnum();
            break;
          }
          case 48: {
            notificationFlags_ = (global::InfX.NotificationFlags) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataAccountSummary : pb::IMessage<DataAccountSummary> {
    private static readonly pb::MessageParser<DataAccountSummary> _parser = new pb::MessageParser<DataAccountSummary>(() => new DataAccountSummary());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataAccountSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountSummary(DataAccountSummary other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      location_ = other.location_;
      avatarThumbnailUrl_ = other.avatarThumbnailUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountSummary Clone() {
      return new DataAccountSummary(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 3;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatarThumbnailUrl" field.</summary>
    public const int AvatarThumbnailUrlFieldNumber = 4;
    private string avatarThumbnailUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarThumbnailUrl {
      get { return avatarThumbnailUrl_; }
      set {
        avatarThumbnailUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataAccountSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataAccountSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Location != other.Location) return false;
      if (AvatarThumbnailUrl != other.AvatarThumbnailUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (AvatarThumbnailUrl.Length != 0) hash ^= AvatarThumbnailUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Location);
      }
      if (AvatarThumbnailUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AvatarThumbnailUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (AvatarThumbnailUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarThumbnailUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataAccountSummary other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.AvatarThumbnailUrl.Length != 0) {
        AvatarThumbnailUrl = other.AvatarThumbnailUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            Location = input.ReadString();
            break;
          }
          case 34: {
            AvatarThumbnailUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataAccountDetail : pb::IMessage<DataAccountDetail> {
    private static readonly pb::MessageParser<DataAccountDetail> _parser = new pb::MessageParser<DataAccountDetail>(() => new DataAccountDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataAccountDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountDetail(DataAccountDetail other) : this() {
      categories_ = other.categories_.Clone();
      socialMedia_ = other.socialMedia_.Clone();
      avatarCoverUrl_ = other.avatarCoverUrl_;
      url_ = other.url_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccountDetail Clone() {
      return new DataAccountDetail(this);
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::InfX.CategoryId> _repeated_categories_codec
        = pb::FieldCodec.ForMessage(18, global::InfX.CategoryId.Parser);
    private readonly pbc::RepeatedField<global::InfX.CategoryId> categories_ = new pbc::RepeatedField<global::InfX.CategoryId>();
    /// <summary>
    ///  repeated string coverUrls = 1;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.CategoryId> Categories {
      get { return categories_; }
    }

    /// <summary>Field number for the "socialMedia" field.</summary>
    public const int SocialMediaFieldNumber = 3;
    private static readonly pb::FieldCodec<global::InfX.DataSocialMedia> _repeated_socialMedia_codec
        = pb::FieldCodec.ForMessage(26, global::InfX.DataSocialMedia.Parser);
    private readonly pbc::RepeatedField<global::InfX.DataSocialMedia> socialMedia_ = new pbc::RepeatedField<global::InfX.DataSocialMedia>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.DataSocialMedia> SocialMedia {
      get { return socialMedia_; }
    }

    /// <summary>Field number for the "avatarCoverUrl" field.</summary>
    public const int AvatarCoverUrlFieldNumber = 7;
    private string avatarCoverUrl_ = "";
    /// <summary>
    ///  Higher resolution, but same as avatarThumbnailUrl
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarCoverUrl {
      get { return avatarCoverUrl_; }
      set {
        avatarCoverUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 6;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 4;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 5;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataAccountDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataAccountDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!categories_.Equals(other.categories_)) return false;
      if(!socialMedia_.Equals(other.socialMedia_)) return false;
      if (AvatarCoverUrl != other.AvatarCoverUrl) return false;
      if (Url != other.Url) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= categories_.GetHashCode();
      hash ^= socialMedia_.GetHashCode();
      if (AvatarCoverUrl.Length != 0) hash ^= AvatarCoverUrl.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      categories_.WriteTo(output, _repeated_categories_codec);
      socialMedia_.WriteTo(output, _repeated_socialMedia_codec);
      if (Latitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Longitude);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Url);
      }
      if (AvatarCoverUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AvatarCoverUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += categories_.CalculateSize(_repeated_categories_codec);
      size += socialMedia_.CalculateSize(_repeated_socialMedia_codec);
      if (AvatarCoverUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarCoverUrl);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataAccountDetail other) {
      if (other == null) {
        return;
      }
      categories_.Add(other.categories_);
      socialMedia_.Add(other.socialMedia_);
      if (other.AvatarCoverUrl.Length != 0) {
        AvatarCoverUrl = other.AvatarCoverUrl;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            categories_.AddEntriesFrom(input, _repeated_categories_codec);
            break;
          }
          case 26: {
            socialMedia_.AddEntriesFrom(input, _repeated_socialMedia_codec);
            break;
          }
          case 33: {
            Latitude = input.ReadDouble();
            break;
          }
          case 41: {
            Longitude = input.ReadDouble();
            break;
          }
          case 50: {
            Url = input.ReadString();
            break;
          }
          case 58: {
            AvatarCoverUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataAccount : pb::IMessage<DataAccount> {
    private static readonly pb::MessageParser<DataAccount> _parser = new pb::MessageParser<DataAccount>(() => new DataAccount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccount(DataAccount other) : this() {
      State = other.state_ != null ? other.State.Clone() : null;
      Summary = other.summary_ != null ? other.Summary.Clone() : null;
      Detail = other.detail_ != null ? other.Detail.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAccount Clone() {
      return new DataAccount(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::InfX.DataAccountState state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.DataAccountState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "summary" field.</summary>
    public const int SummaryFieldNumber = 2;
    private global::InfX.DataAccountSummary summary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.DataAccountSummary Summary {
      get { return summary_; }
      set {
        summary_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 3;
    private global::InfX.DataAccountDetail detail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.DataAccountDetail Detail {
      get { return detail_; }
      set {
        detail_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(State, other.State)) return false;
      if (!object.Equals(Summary, other.Summary)) return false;
      if (!object.Equals(Detail, other.Detail)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (state_ != null) hash ^= State.GetHashCode();
      if (summary_ != null) hash ^= Summary.GetHashCode();
      if (detail_ != null) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (state_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(State);
      }
      if (summary_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Summary);
      }
      if (detail_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (summary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Summary);
      }
      if (detail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataAccount other) {
      if (other == null) {
        return;
      }
      if (other.state_ != null) {
        if (state_ == null) {
          state_ = new global::InfX.DataAccountState();
        }
        State.MergeFrom(other.State);
      }
      if (other.summary_ != null) {
        if (summary_ == null) {
          summary_ = new global::InfX.DataAccountSummary();
        }
        Summary.MergeFrom(other.Summary);
      }
      if (other.detail_ != null) {
        if (detail_ == null) {
          detail_ = new global::InfX.DataAccountDetail();
        }
        Detail.MergeFrom(other.Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (state_ == null) {
              state_ = new global::InfX.DataAccountState();
            }
            input.ReadMessage(state_);
            break;
          }
          case 18: {
            if (summary_ == null) {
              summary_ = new global::InfX.DataAccountSummary();
            }
            input.ReadMessage(summary_);
            break;
          }
          case 26: {
            if (detail_ == null) {
              detail_ = new global::InfX.DataAccountDetail();
            }
            input.ReadMessage(detail_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Sends some info from https://pub.dartlang.org/packages/device_info#-readme-tab-
  ///  Name: DA_CREAT
  ///  Response: NetDeviceAuthState
  /// </summary>
  public sealed partial class NetDeviceAuthCreateReq : pb::IMessage<NetDeviceAuthCreateReq> {
    private static readonly pb::MessageParser<NetDeviceAuthCreateReq> _parser = new pb::MessageParser<NetDeviceAuthCreateReq>(() => new NetDeviceAuthCreateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetDeviceAuthCreateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthCreateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthCreateReq(NetDeviceAuthCreateReq other) : this() {
      aesKey_ = other.aesKey_;
      commonDeviceId_ = other.commonDeviceId_;
      name_ = other.name_;
      info_ = other.info_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthCreateReq Clone() {
      return new NetDeviceAuthCreateReq(this);
    }

    /// <summary>Field number for the "aesKey" field.</summary>
    public const int AesKeyFieldNumber = 1;
    private pb::ByteString aesKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  Public key for future authentication (AES-256)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AesKey {
      get { return aesKey_; }
      set {
        aesKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "commonDeviceId" field.</summary>
    public const int CommonDeviceIdFieldNumber = 4;
    private pb::ByteString commonDeviceId_ = pb::ByteString.Empty;
    /// <summary>
    ///  Common identifier for the device in case of multiple accounts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CommonDeviceId {
      get { return commonDeviceId_; }
      set {
        commonDeviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///  Device information for developers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private string info_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetDeviceAuthCreateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetDeviceAuthCreateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AesKey != other.AesKey) return false;
      if (CommonDeviceId != other.CommonDeviceId) return false;
      if (Name != other.Name) return false;
      if (Info != other.Info) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AesKey.Length != 0) hash ^= AesKey.GetHashCode();
      if (CommonDeviceId.Length != 0) hash ^= CommonDeviceId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AesKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(AesKey);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Info);
      }
      if (CommonDeviceId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(CommonDeviceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AesKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AesKey);
      }
      if (CommonDeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CommonDeviceId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetDeviceAuthCreateReq other) {
      if (other == null) {
        return;
      }
      if (other.AesKey.Length != 0) {
        AesKey = other.AesKey;
      }
      if (other.CommonDeviceId.Length != 0) {
        CommonDeviceId = other.CommonDeviceId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AesKey = input.ReadBytes();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Info = input.ReadString();
            break;
          }
          case 34: {
            CommonDeviceId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Device requires an authentication challenge
  ///  Name: DA_CHALL
  ///  Response: NetDevAuthChallengeResReq
  /// </summary>
  public sealed partial class NetDeviceAuthChallengeReq : pb::IMessage<NetDeviceAuthChallengeReq> {
    private static readonly pb::MessageParser<NetDeviceAuthChallengeReq> _parser = new pb::MessageParser<NetDeviceAuthChallengeReq>(() => new NetDeviceAuthChallengeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetDeviceAuthChallengeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthChallengeReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthChallengeReq(NetDeviceAuthChallengeReq other) : this() {
      deviceId_ = other.deviceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthChallengeReq Clone() {
      return new NetDeviceAuthChallengeReq(this);
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private int deviceId_;
    /// <summary>
    ///  Id of the device that wants to authenticate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetDeviceAuthChallengeReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetDeviceAuthChallengeReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId != 0) hash ^= DeviceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeviceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetDeviceAuthChallengeReq other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId != 0) {
        DeviceId = other.DeviceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DeviceId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Server supplies challenge for the device
  ///  Name: DA_R_CHA
  ///  Response: NetDeviceAuthSignatureResReq
  /// </summary>
  public sealed partial class NetDeviceAuthChallengeResReq : pb::IMessage<NetDeviceAuthChallengeResReq> {
    private static readonly pb::MessageParser<NetDeviceAuthChallengeResReq> _parser = new pb::MessageParser<NetDeviceAuthChallengeResReq>(() => new NetDeviceAuthChallengeResReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetDeviceAuthChallengeResReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthChallengeResReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthChallengeResReq(NetDeviceAuthChallengeResReq other) : this() {
      challenge_ = other.challenge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthChallengeResReq Clone() {
      return new NetDeviceAuthChallengeResReq(this);
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 1;
    private pb::ByteString challenge_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Challenge {
      get { return challenge_; }
      set {
        challenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetDeviceAuthChallengeResReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetDeviceAuthChallengeResReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Challenge != other.Challenge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Challenge.Length != 0) hash ^= Challenge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Challenge.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Challenge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Challenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Challenge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetDeviceAuthChallengeResReq other) {
      if (other == null) {
        return;
      }
      if (other.Challenge.Length != 0) {
        Challenge = other.Challenge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Challenge = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  App completes the challenge
  ///  Name: DA_R_SIG
  ///  Response: NetDeviceAuthState
  /// </summary>
  public sealed partial class NetDeviceAuthSignatureResReq : pb::IMessage<NetDeviceAuthSignatureResReq> {
    private static readonly pb::MessageParser<NetDeviceAuthSignatureResReq> _parser = new pb::MessageParser<NetDeviceAuthSignatureResReq>(() => new NetDeviceAuthSignatureResReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetDeviceAuthSignatureResReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthSignatureResReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthSignatureResReq(NetDeviceAuthSignatureResReq other) : this() {
      signature_ = other.signature_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthSignatureResReq Clone() {
      return new NetDeviceAuthSignatureResReq(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetDeviceAuthSignatureResReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetDeviceAuthSignatureResReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetDeviceAuthSignatureResReq other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Create or auth result
  ///  Name: DA_STATE
  /// </summary>
  public sealed partial class NetDeviceAuthState : pb::IMessage<NetDeviceAuthState> {
    private static readonly pb::MessageParser<NetDeviceAuthState> _parser = new pb::MessageParser<NetDeviceAuthState>(() => new NetDeviceAuthState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetDeviceAuthState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthState(NetDeviceAuthState other) : this() {
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetDeviceAuthState Clone() {
      return new NetDeviceAuthState(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 8;
    private global::InfX.DataAccount data_;
    /// <summary>
    /// / Whole account data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.DataAccount Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetDeviceAuthState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetDeviceAuthState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetDeviceAuthState other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::InfX.DataAccount();
        }
        Data.MergeFrom(other.Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 66: {
            if (data_ == null) {
              data_ = new global::InfX.DataAccount();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  App requests the server to set the account type
  ///  Special case when going backwards in the onboarding process
  ///  Valid when account_id == 0
  ///  Removes all OAuth associated with the device
  ///  Name: A_SETTYP
  /// </summary>
  public sealed partial class NetSetAccountType : pb::IMessage<NetSetAccountType> {
    private static readonly pb::MessageParser<NetSetAccountType> _parser = new pb::MessageParser<NetSetAccountType>(() => new NetSetAccountType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetSetAccountType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetSetAccountType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetSetAccountType(NetSetAccountType other) : this() {
      accountType_ = other.accountType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetSetAccountType Clone() {
      return new NetSetAccountType(this);
    }

    /// <summary>Field number for the "accountType" field.</summary>
    public const int AccountTypeFieldNumber = 1;
    private global::InfX.AccountType accountType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.AccountType AccountType {
      get { return accountType_; }
      set {
        accountType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetSetAccountType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetSetAccountType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountType != other.AccountType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountType != 0) hash ^= AccountType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AccountType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccountType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetSetAccountType other) {
      if (other == null) {
        return;
      }
      if (other.AccountType != 0) {
        AccountType = other.AccountType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            accountType_ = (global::InfX.AccountType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  App requests OAuth url
  ///  Name: OA_URLRE
  ///  Response: NetOAuthUrlRes
  /// </summary>
  public sealed partial class NetOAuthUrlReq : pb::IMessage<NetOAuthUrlReq> {
    private static readonly pb::MessageParser<NetOAuthUrlReq> _parser = new pb::MessageParser<NetOAuthUrlReq>(() => new NetOAuthUrlReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetOAuthUrlReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthUrlReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthUrlReq(NetOAuthUrlReq other) : this() {
      oauthProvider_ = other.oauthProvider_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthUrlReq Clone() {
      return new NetOAuthUrlReq(this);
    }

    /// <summary>Field number for the "oauthProvider" field.</summary>
    public const int OauthProviderFieldNumber = 1;
    private int oauthProvider_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OauthProvider {
      get { return oauthProvider_; }
      set {
        oauthProvider_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetOAuthUrlReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetOAuthUrlReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OauthProvider != other.OauthProvider) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OauthProvider != 0) hash ^= OauthProvider.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OauthProvider != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OauthProvider);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OauthProvider != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OauthProvider);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetOAuthUrlReq other) {
      if (other == null) {
        return;
      }
      if (other.OauthProvider != 0) {
        OauthProvider = other.OauthProvider;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OauthProvider = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  App requests OAuth url
  ///  Name: OA_R_URL
  ///  Response: NetOAuthUrlRes
  /// </summary>
  public sealed partial class NetOAuthUrlRes : pb::IMessage<NetOAuthUrlRes> {
    private static readonly pb::MessageParser<NetOAuthUrlRes> _parser = new pb::MessageParser<NetOAuthUrlRes>(() => new NetOAuthUrlRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetOAuthUrlRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthUrlRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthUrlRes(NetOAuthUrlRes other) : this() {
      authUrl_ = other.authUrl_;
      callbackUrl_ = other.callbackUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthUrlRes Clone() {
      return new NetOAuthUrlRes(this);
    }

    /// <summary>Field number for the "authUrl" field.</summary>
    public const int AuthUrlFieldNumber = 1;
    private string authUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthUrl {
      get { return authUrl_; }
      set {
        authUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "callbackUrl" field.</summary>
    public const int CallbackUrlFieldNumber = 2;
    private string callbackUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallbackUrl {
      get { return callbackUrl_; }
      set {
        callbackUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetOAuthUrlRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetOAuthUrlRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AuthUrl != other.AuthUrl) return false;
      if (CallbackUrl != other.CallbackUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AuthUrl.Length != 0) hash ^= AuthUrl.GetHashCode();
      if (CallbackUrl.Length != 0) hash ^= CallbackUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AuthUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AuthUrl);
      }
      if (CallbackUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CallbackUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AuthUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthUrl);
      }
      if (CallbackUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallbackUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetOAuthUrlRes other) {
      if (other == null) {
        return;
      }
      if (other.AuthUrl.Length != 0) {
        AuthUrl = other.AuthUrl;
      }
      if (other.CallbackUrl.Length != 0) {
        CallbackUrl = other.CallbackUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AuthUrl = input.ReadString();
            break;
          }
          case 18: {
            CallbackUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  App adds another OAuth provider to the account
  ///  Name: OA_CONNE
  ///  Response: NetOAuthConnectRes
  /// </summary>
  public sealed partial class NetOAuthConnectReq : pb::IMessage<NetOAuthConnectReq> {
    private static readonly pb::MessageParser<NetOAuthConnectReq> _parser = new pb::MessageParser<NetOAuthConnectReq>(() => new NetOAuthConnectReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetOAuthConnectReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthConnectReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthConnectReq(NetOAuthConnectReq other) : this() {
      oauthProvider_ = other.oauthProvider_;
      callbackQuery_ = other.callbackQuery_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthConnectReq Clone() {
      return new NetOAuthConnectReq(this);
    }

    /// <summary>Field number for the "oauthProvider" field.</summary>
    public const int OauthProviderFieldNumber = 1;
    private int oauthProvider_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OauthProvider {
      get { return oauthProvider_; }
      set {
        oauthProvider_ = value;
      }
    }

    /// <summary>Field number for the "callbackQuery" field.</summary>
    public const int CallbackQueryFieldNumber = 2;
    private string callbackQuery_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallbackQuery {
      get { return callbackQuery_; }
      set {
        callbackQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetOAuthConnectReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetOAuthConnectReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OauthProvider != other.OauthProvider) return false;
      if (CallbackQuery != other.CallbackQuery) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OauthProvider != 0) hash ^= OauthProvider.GetHashCode();
      if (CallbackQuery.Length != 0) hash ^= CallbackQuery.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OauthProvider != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OauthProvider);
      }
      if (CallbackQuery.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CallbackQuery);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OauthProvider != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OauthProvider);
      }
      if (CallbackQuery.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallbackQuery);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetOAuthConnectReq other) {
      if (other == null) {
        return;
      }
      if (other.OauthProvider != 0) {
        OauthProvider = other.OauthProvider;
      }
      if (other.CallbackQuery.Length != 0) {
        CallbackQuery = other.CallbackQuery;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OauthProvider = input.ReadInt32();
            break;
          }
          case 18: {
            CallbackQuery = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  OAuth addition result
  ///  Name: OA_R_CON
  /// </summary>
  public sealed partial class NetOAuthConnectRes : pb::IMessage<NetOAuthConnectRes> {
    private static readonly pb::MessageParser<NetOAuthConnectRes> _parser = new pb::MessageParser<NetOAuthConnectRes>(() => new NetOAuthConnectRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetOAuthConnectRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthConnectRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthConnectRes(NetOAuthConnectRes other) : this() {
      SocialMedia = other.socialMedia_ != null ? other.SocialMedia.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOAuthConnectRes Clone() {
      return new NetOAuthConnectRes(this);
    }

    /// <summary>Field number for the "socialMedia" field.</summary>
    public const int SocialMediaFieldNumber = 1;
    private global::InfX.DataSocialMedia socialMedia_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.DataSocialMedia SocialMedia {
      get { return socialMedia_; }
      set {
        socialMedia_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetOAuthConnectRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetOAuthConnectRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SocialMedia, other.SocialMedia)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (socialMedia_ != null) hash ^= SocialMedia.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (socialMedia_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SocialMedia);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (socialMedia_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SocialMedia);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetOAuthConnectRes other) {
      if (other == null) {
        return;
      }
      if (other.socialMedia_ != null) {
        if (socialMedia_ == null) {
          socialMedia_ = new global::InfX.DataSocialMedia();
        }
        SocialMedia.MergeFrom(other.SocialMedia);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (socialMedia_ == null) {
              socialMedia_ = new global::InfX.DataSocialMedia();
            }
            input.ReadMessage(socialMedia_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Create account
  ///  Response: NetDeviceAuthState
  ///  Name: A_CREATE
  /// </summary>
  public sealed partial class NetAccountCreateReq : pb::IMessage<NetAccountCreateReq> {
    private static readonly pb::MessageParser<NetAccountCreateReq> _parser = new pb::MessageParser<NetAccountCreateReq>(() => new NetAccountCreateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetAccountCreateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetAccountCreateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetAccountCreateReq(NetAccountCreateReq other) : this() {
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetAccountCreateReq Clone() {
      return new NetAccountCreateReq(this);
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 2;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 3;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetAccountCreateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetAccountCreateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Latitude != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Longitude);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetAccountCreateReq other) {
      if (other == null) {
        return;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 17: {
            Latitude = input.ReadDouble();
            break;
          }
          case 25: {
            Longitude = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Client requests the server permission to upload an image
  ///  The server may delete the image later if it is never used
  ///  Name: UP_IMAGE
  ///  Response: NetResImageUpload
  /// </summary>
  public sealed partial class NetUploadImageReq : pb::IMessage<NetUploadImageReq> {
    private static readonly pb::MessageParser<NetUploadImageReq> _parser = new pb::MessageParser<NetUploadImageReq>(() => new NetUploadImageReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetUploadImageReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetUploadImageReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetUploadImageReq(NetUploadImageReq other) : this() {
      fileName_ = other.fileName_;
      contentLength_ = other.contentLength_;
      contentType_ = other.contentType_;
      contentSha256_ = other.contentSha256_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetUploadImageReq Clone() {
      return new NetUploadImageReq(this);
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 1;
    private string fileName_ = "";
    /// <summary>
    ///  File information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contentLength" field.</summary>
    public const int ContentLengthFieldNumber = 2;
    private int contentLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContentLength {
      get { return contentLength_; }
      set {
        contentLength_ = value;
      }
    }

    /// <summary>Field number for the "contentType" field.</summary>
    public const int ContentTypeFieldNumber = 4;
    private string contentType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentType {
      get { return contentType_; }
      set {
        contentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contentSha256" field.</summary>
    public const int ContentSha256FieldNumber = 3;
    private pb::ByteString contentSha256_ = pb::ByteString.Empty;
    /// <summary>
    ///  Hashed file contents
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContentSha256 {
      get { return contentSha256_; }
      set {
        contentSha256_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetUploadImageReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetUploadImageReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileName != other.FileName) return false;
      if (ContentLength != other.ContentLength) return false;
      if (ContentType != other.ContentType) return false;
      if (ContentSha256 != other.ContentSha256) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (ContentLength != 0) hash ^= ContentLength.GetHashCode();
      if (ContentType.Length != 0) hash ^= ContentType.GetHashCode();
      if (ContentSha256.Length != 0) hash ^= ContentSha256.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
      if (ContentLength != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ContentLength);
      }
      if (ContentSha256.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ContentSha256);
      }
      if (ContentType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ContentType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (ContentLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentLength);
      }
      if (ContentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentType);
      }
      if (ContentSha256.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContentSha256);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetUploadImageReq other) {
      if (other == null) {
        return;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.ContentLength != 0) {
        ContentLength = other.ContentLength;
      }
      if (other.ContentType.Length != 0) {
        ContentType = other.ContentType;
      }
      if (other.ContentSha256.Length != 0) {
        ContentSha256 = other.ContentSha256;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
          case 16: {
            ContentLength = input.ReadInt32();
            break;
          }
          case 26: {
            ContentSha256 = input.ReadBytes();
            break;
          }
          case 34: {
            ContentType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request parameters to be used by the client verbatim for uploading
  ///  Name: UP_R_IMG
  /// </summary>
  public sealed partial class NetUploadImageRes : pb::IMessage<NetUploadImageRes> {
    private static readonly pb::MessageParser<NetUploadImageRes> _parser = new pb::MessageParser<NetUploadImageRes>(() => new NetUploadImageRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetUploadImageRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetUploadImageRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetUploadImageRes(NetUploadImageRes other) : this() {
      requestMethod_ = other.requestMethod_;
      requestUrl_ = other.requestUrl_;
      fileExists_ = other.fileExists_;
      uploadKey_ = other.uploadKey_;
      coverUrl_ = other.coverUrl_;
      thumbnailUrl_ = other.thumbnailUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetUploadImageRes Clone() {
      return new NetUploadImageRes(this);
    }

    /// <summary>Field number for the "requestMethod" field.</summary>
    public const int RequestMethodFieldNumber = 1;
    private string requestMethod_ = "";
    /// <summary>
    ///  Request options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestMethod {
      get { return requestMethod_; }
      set {
        requestMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requestUrl" field.</summary>
    public const int RequestUrlFieldNumber = 2;
    private string requestUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestUrl {
      get { return requestUrl_; }
      set {
        requestUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fileExists" field.</summary>
    public const int FileExistsFieldNumber = 9;
    private bool fileExists_;
    /// <summary>
    ///  Result options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FileExists {
      get { return fileExists_; }
      set {
        fileExists_ = value;
      }
    }

    /// <summary>Field number for the "uploadKey" field.</summary>
    public const int UploadKeyFieldNumber = 10;
    private string uploadKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UploadKey {
      get { return uploadKey_; }
      set {
        uploadKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coverUrl" field.</summary>
    public const int CoverUrlFieldNumber = 11;
    private string coverUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoverUrl {
      get { return coverUrl_; }
      set {
        coverUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumbnailUrl" field.</summary>
    public const int ThumbnailUrlFieldNumber = 12;
    private string thumbnailUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ThumbnailUrl {
      get { return thumbnailUrl_; }
      set {
        thumbnailUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetUploadImageRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetUploadImageRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestMethod != other.RequestMethod) return false;
      if (RequestUrl != other.RequestUrl) return false;
      if (FileExists != other.FileExists) return false;
      if (UploadKey != other.UploadKey) return false;
      if (CoverUrl != other.CoverUrl) return false;
      if (ThumbnailUrl != other.ThumbnailUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestMethod.Length != 0) hash ^= RequestMethod.GetHashCode();
      if (RequestUrl.Length != 0) hash ^= RequestUrl.GetHashCode();
      if (FileExists != false) hash ^= FileExists.GetHashCode();
      if (UploadKey.Length != 0) hash ^= UploadKey.GetHashCode();
      if (CoverUrl.Length != 0) hash ^= CoverUrl.GetHashCode();
      if (ThumbnailUrl.Length != 0) hash ^= ThumbnailUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestMethod.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestMethod);
      }
      if (RequestUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RequestUrl);
      }
      if (FileExists != false) {
        output.WriteRawTag(72);
        output.WriteBool(FileExists);
      }
      if (UploadKey.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UploadKey);
      }
      if (CoverUrl.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CoverUrl);
      }
      if (ThumbnailUrl.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ThumbnailUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestMethod);
      }
      if (RequestUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestUrl);
      }
      if (FileExists != false) {
        size += 1 + 1;
      }
      if (UploadKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UploadKey);
      }
      if (CoverUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoverUrl);
      }
      if (ThumbnailUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ThumbnailUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetUploadImageRes other) {
      if (other == null) {
        return;
      }
      if (other.RequestMethod.Length != 0) {
        RequestMethod = other.RequestMethod;
      }
      if (other.RequestUrl.Length != 0) {
        RequestUrl = other.RequestUrl;
      }
      if (other.FileExists != false) {
        FileExists = other.FileExists;
      }
      if (other.UploadKey.Length != 0) {
        UploadKey = other.UploadKey;
      }
      if (other.CoverUrl.Length != 0) {
        CoverUrl = other.CoverUrl;
      }
      if (other.ThumbnailUrl.Length != 0) {
        ThumbnailUrl = other.ThumbnailUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RequestMethod = input.ReadString();
            break;
          }
          case 18: {
            RequestUrl = input.ReadString();
            break;
          }
          case 72: {
            FileExists = input.ReadBool();
            break;
          }
          case 82: {
            UploadKey = input.ReadString();
            break;
          }
          case 90: {
            CoverUrl = input.ReadString();
            break;
          }
          case 98: {
            ThumbnailUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Message to create offer
  /// </summary>
  public sealed partial class NetReqCreateOffer : pb::IMessage<NetReqCreateOffer> {
    private static readonly pb::MessageParser<NetReqCreateOffer> _parser = new pb::MessageParser<NetReqCreateOffer>(() => new NetReqCreateOffer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetReqCreateOffer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetReqCreateOffer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetReqCreateOffer(NetReqCreateOffer other) : this() {
      Offer = other.offer_ != null ? other.Offer.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetReqCreateOffer Clone() {
      return new NetReqCreateOffer(this);
    }

    /// <summary>Field number for the "offer" field.</summary>
    public const int OfferFieldNumber = 1;
    private global::InfX.DataBusinessOffer offer_;
    /// <summary>
    ///  repeated string imageIds = 2;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.DataBusinessOffer Offer {
      get { return offer_; }
      set {
        offer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetReqCreateOffer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetReqCreateOffer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Offer, other.Offer)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (offer_ != null) hash ^= Offer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (offer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Offer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (offer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetReqCreateOffer other) {
      if (other == null) {
        return;
      }
      if (other.offer_ != null) {
        if (offer_ == null) {
          offer_ = new global::InfX.DataBusinessOffer();
        }
        Offer.MergeFrom(other.Offer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (offer_ == null) {
              offer_ = new global::InfX.DataBusinessOffer();
            }
            input.ReadMessage(offer_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response to successful offer creation
  /// </summary>
  public sealed partial class NetResCreateOffer : pb::IMessage<NetResCreateOffer> {
    private static readonly pb::MessageParser<NetResCreateOffer> _parser = new pb::MessageParser<NetResCreateOffer>(() => new NetResCreateOffer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetResCreateOffer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetResCreateOffer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetResCreateOffer(NetResCreateOffer other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetResCreateOffer Clone() {
      return new NetResCreateOffer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///  Identifier of the offer on the server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetResCreateOffer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetResCreateOffer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetResCreateOffer other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
