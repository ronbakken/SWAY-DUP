// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace InfX {

  /// <summary>Holder for reflection information generated from inf.proto</summary>
  public static partial class InfReflection {

    #region Descriptor
    /// <summary>File descriptor for inf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglpbmYucHJvdG8iJQoTQ29uZmlnU3ViQ2F0ZWdvcmllcxIOCgZsYWJlbHMY",
            "ASADKAkiNQoQQ29uZmlnQ2F0ZWdvcmllcxIhCgNzdWIYASADKAsyFC5Db25m",
            "aWdTdWJDYXRlZ29yaWVzIqgCChNDb25maWdPQXV0aFByb3ZpZGVyEg8KB3Zp",
            "c2libGUYASABKAgSDwoHZW5hYmxlZBgCIAEoCBINCgVsYWJlbBgDIAEoCRIY",
            "ChBmb250QXdlc29tZUJyYW5kGA4gASgFEgwKBGhvc3QYBCABKAkSFwoPcmVx",
            "dWVzdFRva2VuVXJsGAUgASgJEhcKD2F1dGhlbnRpY2F0ZVVybBgGIAEoCRIP",
            "CgdhdXRoVXJsGAcgASgJEhEKCWF1dGhRdWVyeRgIIAEoCRITCgtjYWxsYmFj",
            "a1VybBgJIAEoCRITCgtjb25zdW1lcktleRgKIAEoCRIWCg5jb25zdW1lclNl",
            "Y3JldBgLIAEoCRIQCghjbGllbnRJZBgMIAEoCRIOCgZuYXRpdmUYDSABKAki",
            "RgoUQ29uZmlnT0F1dGhQcm92aWRlcnMSIQoDYWxsGAEgAygLMhQuQ29uZmln",
            "T0F1dGhQcm92aWRlchILCgNrZXkYAiABKAkijwEKCkNvbmZpZ0RhdGESFQoN",
            "Y2xpZW50VmVyc2lvbhgBIAEoBRIUCgxkb3dubG9hZFVybHMYBCADKAkSJQoK",
            "Y2F0ZWdvcmllcxgCIAEoCzIRLkNvbmZpZ0NhdGVnb3JpZXMSLQoOb2F1dGhQ",
            "cm92aWRlcnMYAyABKAsyFS5Db25maWdPQXV0aFByb3ZpZGVycyInCgpDYXRl",
            "Z29yeUlkEgwKBG1haW4YASABKAUSCwoDc3ViGAIgASgFIooBCg5EYXRhSW5m",
            "bHVlbmNlchIKCgJpZBgBIAEoAxIMCgRuYW1lGAIgASgJEhAKCGxvY2F0aW9u",
            "GAMgASgJEhEKCWF2YXRhclVybBgEIAEoCRIfCgpjYXRlZ29yaWVzGAUgAygL",
            "MgsuQ2F0ZWdvcnlJZBILCgNsYXQYBiABKAESCwoDbG5nGAcgASgBIogBCgxE",
            "YXRhQnVzaW5lc3MSCgoCaWQYASABKAMSDAoEbmFtZRgCIAEoCRIQCghsb2Nh",
            "dGlvbhgDIAEoCRIRCglhdmF0YXJVcmwYBCABKAkSHwoKY2F0ZWdvcmllcxgF",
            "IAMoCzILLkNhdGVnb3J5SWQSCwoDbGF0GAYgASgBEgsKA2xuZxgHIAEoASLQ",
            "AQoJRGF0YU9mZmVyEgoKAmlkGAEgASgDEh8KCGJ1c2luZXNzGAIgASgLMg0u",
            "RGF0YUJ1c2luZXNzEg0KBXRpdGxlGAMgASgJEhEKCWltYWdlVXJscxgEIAMo",
            "CRIfCgpjYXRlZ29yaWVzGAUgAygLMgsuQ2F0ZWdvcnlJZBILCgNsYXQYBiAB",
            "KAESCwoDbG5nGAcgASgBEhMKC2Rlc2NyaXB0aW9uGAggASgJEhQKDGRlbGl2",
            "ZXJhYmxlcxgJIAEoCRIOCgZyZXdhcmQYCiABKAkiWwoNRGF0YUFwcGxpY2Fu",
            "dBIKCgJpZBgBIAEoAxIZCgVvZmZlchgCIAEoCzIKLkRhdGFPZmZlchIjCgpp",
            "bmZsdWVuY2VyGAMgASgLMg8uRGF0YUluZmx1ZW5jZXIiYgoIRGF0YUNoYXQS",
            "EwoLYXBwbGljYW50SWQYASABKAMSEgoKc2VxdWVuY2VJZBgCIAEoAxINCgVr",
            "ZXlJZBgDIAEoAxIQCghvdXRnb2luZxgEIAEoCBIMCgR0ZXh0GAUgASgJIiYK",
            "Dk5ldFJlc1JlamVjdGVkEhQKDHJlamVjdFJlYXNvbhgBIAEoCSJHChFOZXRS",
            "ZXFJbWFnZVVwbG9hZBIQCghmaWxlTmFtZRgBIAEoCRIQCghmaWxlU2l6ZRgC",
            "IAEoBRIOCgZzaGEyNTYYAyABKAki3wEKEU5ldFJlc0ltYWdlVXBsb2FkEhUK",
            "DXJlcXVlc3RNZXRob2QYASABKAkSEgoKcmVxdWVzdFVybBgCIAEoCRIZChFo",
            "ZWFkZXJDb250ZW50VHlwZRgDIAEoCRIbChNoZWFkZXJDb250ZW50TGVuZ3Ro",
            "GAQgASgJEhIKCmhlYWRlckhvc3QYBSABKAkSFgoOaGVhZGVyWEFtekRhdGUY",
            "BiABKAkSHgoWaGVhZGVyWEFtelN0b3JhZ2VDbGFzcxgHIAEoCRIbChNoZWFk",
            "ZXJBdXRob3JpemF0aW9uGAggASgJIkAKEU5ldFJlcUNyZWF0ZU9mZmVyEhkK",
            "BW9mZmVyGAEgASgLMgouRGF0YU9mZmVyEhAKCGltYWdlSWRzGAIgAygJIh8K",
            "EU5ldFJlc0NyZWF0ZU9mZmVyEgoKAmlkGAEgASgDKjIKDk5ldE1lc3NhZ2VU",
            "eXBlEgsKB1VOS05PV04QABITCg9DTElFTlRfSURFTlRJRlkQAUIHqgIESW5m",
            "WGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::InfX.NetMessageType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigSubCategories), global::InfX.ConfigSubCategories.Parser, new[]{ "Labels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigCategories), global::InfX.ConfigCategories.Parser, new[]{ "Sub" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigOAuthProvider), global::InfX.ConfigOAuthProvider.Parser, new[]{ "Visible", "Enabled", "Label", "FontAwesomeBrand", "Host", "RequestTokenUrl", "AuthenticateUrl", "AuthUrl", "AuthQuery", "CallbackUrl", "ConsumerKey", "ConsumerSecret", "ClientId", "Native" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigOAuthProviders), global::InfX.ConfigOAuthProviders.Parser, new[]{ "All", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.ConfigData), global::InfX.ConfigData.Parser, new[]{ "ClientVersion", "DownloadUrls", "Categories", "OauthProviders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.CategoryId), global::InfX.CategoryId.Parser, new[]{ "Main", "Sub" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataInfluencer), global::InfX.DataInfluencer.Parser, new[]{ "Id", "Name", "Location", "AvatarUrl", "Categories", "Lat", "Lng" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataBusiness), global::InfX.DataBusiness.Parser, new[]{ "Id", "Name", "Location", "AvatarUrl", "Categories", "Lat", "Lng" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataOffer), global::InfX.DataOffer.Parser, new[]{ "Id", "Business", "Title", "ImageUrls", "Categories", "Lat", "Lng", "Description", "Deliverables", "Reward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataApplicant), global::InfX.DataApplicant.Parser, new[]{ "Id", "Offer", "Influencer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.DataChat), global::InfX.DataChat.Parser, new[]{ "ApplicantId", "SequenceId", "KeyId", "Outgoing", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetResRejected), global::InfX.NetResRejected.Parser, new[]{ "RejectReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetReqImageUpload), global::InfX.NetReqImageUpload.Parser, new[]{ "FileName", "FileSize", "Sha256" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetResImageUpload), global::InfX.NetResImageUpload.Parser, new[]{ "RequestMethod", "RequestUrl", "HeaderContentType", "HeaderContentLength", "HeaderHost", "HeaderXAmzDate", "HeaderXAmzStorageClass", "HeaderAuthorization" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetReqCreateOffer), global::InfX.NetReqCreateOffer.Parser, new[]{ "Offer", "ImageIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.NetResCreateOffer), global::InfX.NetResCreateOffer.Parser, new[]{ "Id" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  Type of message
  /// </summary>
  public enum NetMessageType {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("CLIENT_IDENTIFY")] ClientIdentify = 1,
  }

  #endregion

  #region Messages
  public sealed partial class ConfigSubCategories : pb::IMessage<ConfigSubCategories> {
    private static readonly pb::MessageParser<ConfigSubCategories> _parser = new pb::MessageParser<ConfigSubCategories>(() => new ConfigSubCategories());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigSubCategories> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSubCategories() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSubCategories(ConfigSubCategories other) : this() {
      labels_ = other.labels_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSubCategories Clone() {
      return new ConfigSubCategories(this);
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_labels_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> labels_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Labels {
      get { return labels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigSubCategories);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigSubCategories other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!labels_.Equals(other.labels_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= labels_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      labels_.WriteTo(output, _repeated_labels_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += labels_.CalculateSize(_repeated_labels_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigSubCategories other) {
      if (other == null) {
        return;
      }
      labels_.Add(other.labels_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            labels_.AddEntriesFrom(input, _repeated_labels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigCategories : pb::IMessage<ConfigCategories> {
    private static readonly pb::MessageParser<ConfigCategories> _parser = new pb::MessageParser<ConfigCategories>(() => new ConfigCategories());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigCategories> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigCategories() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigCategories(ConfigCategories other) : this() {
      sub_ = other.sub_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigCategories Clone() {
      return new ConfigCategories(this);
    }

    /// <summary>Field number for the "sub" field.</summary>
    public const int SubFieldNumber = 1;
    private static readonly pb::FieldCodec<global::InfX.ConfigSubCategories> _repeated_sub_codec
        = pb::FieldCodec.ForMessage(10, global::InfX.ConfigSubCategories.Parser);
    private readonly pbc::RepeatedField<global::InfX.ConfigSubCategories> sub_ = new pbc::RepeatedField<global::InfX.ConfigSubCategories>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.ConfigSubCategories> Sub {
      get { return sub_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigCategories);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigCategories other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sub_.Equals(other.sub_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sub_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sub_.WriteTo(output, _repeated_sub_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sub_.CalculateSize(_repeated_sub_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigCategories other) {
      if (other == null) {
        return;
      }
      sub_.Add(other.sub_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sub_.AddEntriesFrom(input, _repeated_sub_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigOAuthProvider : pb::IMessage<ConfigOAuthProvider> {
    private static readonly pb::MessageParser<ConfigOAuthProvider> _parser = new pb::MessageParser<ConfigOAuthProvider>(() => new ConfigOAuthProvider());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigOAuthProvider> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProvider() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProvider(ConfigOAuthProvider other) : this() {
      visible_ = other.visible_;
      enabled_ = other.enabled_;
      label_ = other.label_;
      fontAwesomeBrand_ = other.fontAwesomeBrand_;
      host_ = other.host_;
      requestTokenUrl_ = other.requestTokenUrl_;
      authenticateUrl_ = other.authenticateUrl_;
      authUrl_ = other.authUrl_;
      authQuery_ = other.authQuery_;
      callbackUrl_ = other.callbackUrl_;
      consumerKey_ = other.consumerKey_;
      consumerSecret_ = other.consumerSecret_;
      clientId_ = other.clientId_;
      native_ = other.native_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProvider Clone() {
      return new ConfigOAuthProvider(this);
    }

    /// <summary>Field number for the "visible" field.</summary>
    public const int VisibleFieldNumber = 1;
    private bool visible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Visible {
      get { return visible_; }
      set {
        visible_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 2;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 3;
    private string label_ = "";
    /// <summary>
    /// / Visual name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fontAwesomeBrand" field.</summary>
    public const int FontAwesomeBrandFieldNumber = 14;
    private int fontAwesomeBrand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FontAwesomeBrand {
      get { return fontAwesomeBrand_; }
      set {
        fontAwesomeBrand_ = value;
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 4;
    private string host_ = "";
    /// <summary>
    /// / API endpoints of the OAuth provider
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requestTokenUrl" field.</summary>
    public const int RequestTokenUrlFieldNumber = 5;
    private string requestTokenUrl_ = "";
    /// <summary>
    /// / API endpoints for Twitter-like OAuth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestTokenUrl {
      get { return requestTokenUrl_; }
      set {
        requestTokenUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authenticateUrl" field.</summary>
    public const int AuthenticateUrlFieldNumber = 6;
    private string authenticateUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthenticateUrl {
      get { return authenticateUrl_; }
      set {
        authenticateUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authUrl" field.</summary>
    public const int AuthUrlFieldNumber = 7;
    private string authUrl_ = "";
    /// <summary>
    /// / API endpoints for Spotify-like OAuth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthUrl {
      get { return authUrl_; }
      set {
        authUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authQuery" field.</summary>
    public const int AuthQueryFieldNumber = 8;
    private string authQuery_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthQuery {
      get { return authQuery_; }
      set {
        authQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "callbackUrl" field.</summary>
    public const int CallbackUrlFieldNumber = 9;
    private string callbackUrl_ = "";
    /// <summary>
    /// / Url that will be used to detect login success by the app
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallbackUrl {
      get { return callbackUrl_; }
      set {
        callbackUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "consumerKey" field.</summary>
    public const int ConsumerKeyFieldNumber = 10;
    private string consumerKey_ = "";
    /// <summary>
    /// / Generated by the OAuth provider, not really secret, Twitter-like
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConsumerKey {
      get { return consumerKey_; }
      set {
        consumerKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "consumerSecret" field.</summary>
    public const int ConsumerSecretFieldNumber = 11;
    private string consumerSecret_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConsumerSecret {
      get { return consumerSecret_; }
      set {
        consumerSecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientId" field.</summary>
    public const int ClientIdFieldNumber = 12;
    private string clientId_ = "";
    /// <summary>
    /// / From OAuth provider, Spotify-like, may not include clientSecret
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "native" field.</summary>
    public const int NativeFieldNumber = 13;
    private string native_ = "";
    /// <summary>
    /// / Request settings
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Native {
      get { return native_; }
      set {
        native_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigOAuthProvider);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigOAuthProvider other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Visible != other.Visible) return false;
      if (Enabled != other.Enabled) return false;
      if (Label != other.Label) return false;
      if (FontAwesomeBrand != other.FontAwesomeBrand) return false;
      if (Host != other.Host) return false;
      if (RequestTokenUrl != other.RequestTokenUrl) return false;
      if (AuthenticateUrl != other.AuthenticateUrl) return false;
      if (AuthUrl != other.AuthUrl) return false;
      if (AuthQuery != other.AuthQuery) return false;
      if (CallbackUrl != other.CallbackUrl) return false;
      if (ConsumerKey != other.ConsumerKey) return false;
      if (ConsumerSecret != other.ConsumerSecret) return false;
      if (ClientId != other.ClientId) return false;
      if (Native != other.Native) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Visible != false) hash ^= Visible.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (FontAwesomeBrand != 0) hash ^= FontAwesomeBrand.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (RequestTokenUrl.Length != 0) hash ^= RequestTokenUrl.GetHashCode();
      if (AuthenticateUrl.Length != 0) hash ^= AuthenticateUrl.GetHashCode();
      if (AuthUrl.Length != 0) hash ^= AuthUrl.GetHashCode();
      if (AuthQuery.Length != 0) hash ^= AuthQuery.GetHashCode();
      if (CallbackUrl.Length != 0) hash ^= CallbackUrl.GetHashCode();
      if (ConsumerKey.Length != 0) hash ^= ConsumerKey.GetHashCode();
      if (ConsumerSecret.Length != 0) hash ^= ConsumerSecret.GetHashCode();
      if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
      if (Native.Length != 0) hash ^= Native.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Visible != false) {
        output.WriteRawTag(8);
        output.WriteBool(Visible);
      }
      if (Enabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enabled);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Label);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Host);
      }
      if (RequestTokenUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RequestTokenUrl);
      }
      if (AuthenticateUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AuthenticateUrl);
      }
      if (AuthUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AuthUrl);
      }
      if (AuthQuery.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AuthQuery);
      }
      if (CallbackUrl.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CallbackUrl);
      }
      if (ConsumerKey.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ConsumerKey);
      }
      if (ConsumerSecret.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ConsumerSecret);
      }
      if (ClientId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ClientId);
      }
      if (Native.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Native);
      }
      if (FontAwesomeBrand != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(FontAwesomeBrand);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Visible != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (FontAwesomeBrand != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FontAwesomeBrand);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (RequestTokenUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestTokenUrl);
      }
      if (AuthenticateUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthenticateUrl);
      }
      if (AuthUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthUrl);
      }
      if (AuthQuery.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthQuery);
      }
      if (CallbackUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallbackUrl);
      }
      if (ConsumerKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConsumerKey);
      }
      if (ConsumerSecret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConsumerSecret);
      }
      if (ClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      if (Native.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Native);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigOAuthProvider other) {
      if (other == null) {
        return;
      }
      if (other.Visible != false) {
        Visible = other.Visible;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.FontAwesomeBrand != 0) {
        FontAwesomeBrand = other.FontAwesomeBrand;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.RequestTokenUrl.Length != 0) {
        RequestTokenUrl = other.RequestTokenUrl;
      }
      if (other.AuthenticateUrl.Length != 0) {
        AuthenticateUrl = other.AuthenticateUrl;
      }
      if (other.AuthUrl.Length != 0) {
        AuthUrl = other.AuthUrl;
      }
      if (other.AuthQuery.Length != 0) {
        AuthQuery = other.AuthQuery;
      }
      if (other.CallbackUrl.Length != 0) {
        CallbackUrl = other.CallbackUrl;
      }
      if (other.ConsumerKey.Length != 0) {
        ConsumerKey = other.ConsumerKey;
      }
      if (other.ConsumerSecret.Length != 0) {
        ConsumerSecret = other.ConsumerSecret;
      }
      if (other.ClientId.Length != 0) {
        ClientId = other.ClientId;
      }
      if (other.Native.Length != 0) {
        Native = other.Native;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Visible = input.ReadBool();
            break;
          }
          case 16: {
            Enabled = input.ReadBool();
            break;
          }
          case 26: {
            Label = input.ReadString();
            break;
          }
          case 34: {
            Host = input.ReadString();
            break;
          }
          case 42: {
            RequestTokenUrl = input.ReadString();
            break;
          }
          case 50: {
            AuthenticateUrl = input.ReadString();
            break;
          }
          case 58: {
            AuthUrl = input.ReadString();
            break;
          }
          case 66: {
            AuthQuery = input.ReadString();
            break;
          }
          case 74: {
            CallbackUrl = input.ReadString();
            break;
          }
          case 82: {
            ConsumerKey = input.ReadString();
            break;
          }
          case 90: {
            ConsumerSecret = input.ReadString();
            break;
          }
          case 98: {
            ClientId = input.ReadString();
            break;
          }
          case 106: {
            Native = input.ReadString();
            break;
          }
          case 112: {
            FontAwesomeBrand = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigOAuthProviders : pb::IMessage<ConfigOAuthProviders> {
    private static readonly pb::MessageParser<ConfigOAuthProviders> _parser = new pb::MessageParser<ConfigOAuthProviders>(() => new ConfigOAuthProviders());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigOAuthProviders> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProviders() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProviders(ConfigOAuthProviders other) : this() {
      all_ = other.all_.Clone();
      key_ = other.key_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOAuthProviders Clone() {
      return new ConfigOAuthProviders(this);
    }

    /// <summary>Field number for the "all" field.</summary>
    public const int AllFieldNumber = 1;
    private static readonly pb::FieldCodec<global::InfX.ConfigOAuthProvider> _repeated_all_codec
        = pb::FieldCodec.ForMessage(10, global::InfX.ConfigOAuthProvider.Parser);
    private readonly pbc::RepeatedField<global::InfX.ConfigOAuthProvider> all_ = new pbc::RepeatedField<global::InfX.ConfigOAuthProvider>();
    /// <summary>
    /// / List of all OAuthProviders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.ConfigOAuthProvider> All {
      get { return all_; }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// / This AES-256 key decrypts the OAuth keys
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigOAuthProviders);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigOAuthProviders other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!all_.Equals(other.all_)) return false;
      if (Key != other.Key) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= all_.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      all_.WriteTo(output, _repeated_all_codec);
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += all_.CalculateSize(_repeated_all_codec);
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigOAuthProviders other) {
      if (other == null) {
        return;
      }
      all_.Add(other.all_);
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            all_.AddEntriesFrom(input, _repeated_all_codec);
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigData : pb::IMessage<ConfigData> {
    private static readonly pb::MessageParser<ConfigData> _parser = new pb::MessageParser<ConfigData>(() => new ConfigData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigData(ConfigData other) : this() {
      clientVersion_ = other.clientVersion_;
      downloadUrls_ = other.downloadUrls_.Clone();
      Categories = other.categories_ != null ? other.Categories.Clone() : null;
      OauthProviders = other.oauthProviders_ != null ? other.OauthProviders.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigData Clone() {
      return new ConfigData(this);
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 1;
    private int clientVersion_;
    /// <summary>
    /// / If this goes up in a config, the client must be updated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = value;
      }
    }

    /// <summary>Field number for the "downloadUrls" field.</summary>
    public const int DownloadUrlsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_downloadUrls_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> downloadUrls_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// / URLs where the config can be downloaded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DownloadUrls {
      get { return downloadUrls_; }
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 2;
    private global::InfX.ConfigCategories categories_;
    /// <summary>
    /// / Configuration data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.ConfigCategories Categories {
      get { return categories_; }
      set {
        categories_ = value;
      }
    }

    /// <summary>Field number for the "oauthProviders" field.</summary>
    public const int OauthProvidersFieldNumber = 3;
    private global::InfX.ConfigOAuthProviders oauthProviders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.ConfigOAuthProviders OauthProviders {
      get { return oauthProviders_; }
      set {
        oauthProviders_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientVersion != other.ClientVersion) return false;
      if(!downloadUrls_.Equals(other.downloadUrls_)) return false;
      if (!object.Equals(Categories, other.Categories)) return false;
      if (!object.Equals(OauthProviders, other.OauthProviders)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientVersion != 0) hash ^= ClientVersion.GetHashCode();
      hash ^= downloadUrls_.GetHashCode();
      if (categories_ != null) hash ^= Categories.GetHashCode();
      if (oauthProviders_ != null) hash ^= OauthProviders.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ClientVersion);
      }
      if (categories_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Categories);
      }
      if (oauthProviders_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OauthProviders);
      }
      downloadUrls_.WriteTo(output, _repeated_downloadUrls_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientVersion);
      }
      size += downloadUrls_.CalculateSize(_repeated_downloadUrls_codec);
      if (categories_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Categories);
      }
      if (oauthProviders_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OauthProviders);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigData other) {
      if (other == null) {
        return;
      }
      if (other.ClientVersion != 0) {
        ClientVersion = other.ClientVersion;
      }
      downloadUrls_.Add(other.downloadUrls_);
      if (other.categories_ != null) {
        if (categories_ == null) {
          categories_ = new global::InfX.ConfigCategories();
        }
        Categories.MergeFrom(other.Categories);
      }
      if (other.oauthProviders_ != null) {
        if (oauthProviders_ == null) {
          oauthProviders_ = new global::InfX.ConfigOAuthProviders();
        }
        OauthProviders.MergeFrom(other.OauthProviders);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClientVersion = input.ReadInt32();
            break;
          }
          case 18: {
            if (categories_ == null) {
              categories_ = new global::InfX.ConfigCategories();
            }
            input.ReadMessage(categories_);
            break;
          }
          case 26: {
            if (oauthProviders_ == null) {
              oauthProviders_ = new global::InfX.ConfigOAuthProviders();
            }
            input.ReadMessage(oauthProviders_);
            break;
          }
          case 34: {
            downloadUrls_.AddEntriesFrom(input, _repeated_downloadUrls_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CategoryId : pb::IMessage<CategoryId> {
    private static readonly pb::MessageParser<CategoryId> _parser = new pb::MessageParser<CategoryId>(() => new CategoryId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CategoryId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryId(CategoryId other) : this() {
      main_ = other.main_;
      sub_ = other.sub_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryId Clone() {
      return new CategoryId(this);
    }

    /// <summary>Field number for the "main" field.</summary>
    public const int MainFieldNumber = 1;
    private int main_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Main {
      get { return main_; }
      set {
        main_ = value;
      }
    }

    /// <summary>Field number for the "sub" field.</summary>
    public const int SubFieldNumber = 2;
    private int sub_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sub {
      get { return sub_; }
      set {
        sub_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CategoryId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CategoryId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Main != other.Main) return false;
      if (Sub != other.Sub) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Main != 0) hash ^= Main.GetHashCode();
      if (Sub != 0) hash ^= Sub.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Main != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Main);
      }
      if (Sub != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sub);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Main != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Main);
      }
      if (Sub != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sub);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CategoryId other) {
      if (other == null) {
        return;
      }
      if (other.Main != 0) {
        Main = other.Main;
      }
      if (other.Sub != 0) {
        Sub = other.Sub;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Main = input.ReadInt32();
            break;
          }
          case 16: {
            Sub = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataInfluencer : pb::IMessage<DataInfluencer> {
    private static readonly pb::MessageParser<DataInfluencer> _parser = new pb::MessageParser<DataInfluencer>(() => new DataInfluencer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataInfluencer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataInfluencer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataInfluencer(DataInfluencer other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      location_ = other.location_;
      avatarUrl_ = other.avatarUrl_;
      categories_ = other.categories_.Clone();
      lat_ = other.lat_;
      lng_ = other.lng_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataInfluencer Clone() {
      return new DataInfluencer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 3;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatarUrl" field.</summary>
    public const int AvatarUrlFieldNumber = 4;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::InfX.CategoryId> _repeated_categories_codec
        = pb::FieldCodec.ForMessage(42, global::InfX.CategoryId.Parser);
    private readonly pbc::RepeatedField<global::InfX.CategoryId> categories_ = new pbc::RepeatedField<global::InfX.CategoryId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.CategoryId> Categories {
      get { return categories_; }
    }

    /// <summary>Field number for the "lat" field.</summary>
    public const int LatFieldNumber = 6;
    private double lat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lat {
      get { return lat_; }
      set {
        lat_ = value;
      }
    }

    /// <summary>Field number for the "lng" field.</summary>
    public const int LngFieldNumber = 7;
    private double lng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lng {
      get { return lng_; }
      set {
        lng_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataInfluencer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataInfluencer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Location != other.Location) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if(!categories_.Equals(other.categories_)) return false;
      if (Lat != other.Lat) return false;
      if (Lng != other.Lng) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      hash ^= categories_.GetHashCode();
      if (Lat != 0D) hash ^= Lat.GetHashCode();
      if (Lng != 0D) hash ^= Lng.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Location);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AvatarUrl);
      }
      categories_.WriteTo(output, _repeated_categories_codec);
      if (Lat != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Lat);
      }
      if (Lng != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Lng);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      size += categories_.CalculateSize(_repeated_categories_codec);
      if (Lat != 0D) {
        size += 1 + 8;
      }
      if (Lng != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataInfluencer other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      categories_.Add(other.categories_);
      if (other.Lat != 0D) {
        Lat = other.Lat;
      }
      if (other.Lng != 0D) {
        Lng = other.Lng;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Location = input.ReadString();
            break;
          }
          case 34: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 42: {
            categories_.AddEntriesFrom(input, _repeated_categories_codec);
            break;
          }
          case 49: {
            Lat = input.ReadDouble();
            break;
          }
          case 57: {
            Lng = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataBusiness : pb::IMessage<DataBusiness> {
    private static readonly pb::MessageParser<DataBusiness> _parser = new pb::MessageParser<DataBusiness>(() => new DataBusiness());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataBusiness> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBusiness() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBusiness(DataBusiness other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      location_ = other.location_;
      avatarUrl_ = other.avatarUrl_;
      categories_ = other.categories_.Clone();
      lat_ = other.lat_;
      lng_ = other.lng_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBusiness Clone() {
      return new DataBusiness(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 3;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatarUrl" field.</summary>
    public const int AvatarUrlFieldNumber = 4;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::InfX.CategoryId> _repeated_categories_codec
        = pb::FieldCodec.ForMessage(42, global::InfX.CategoryId.Parser);
    private readonly pbc::RepeatedField<global::InfX.CategoryId> categories_ = new pbc::RepeatedField<global::InfX.CategoryId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.CategoryId> Categories {
      get { return categories_; }
    }

    /// <summary>Field number for the "lat" field.</summary>
    public const int LatFieldNumber = 6;
    private double lat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lat {
      get { return lat_; }
      set {
        lat_ = value;
      }
    }

    /// <summary>Field number for the "lng" field.</summary>
    public const int LngFieldNumber = 7;
    private double lng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lng {
      get { return lng_; }
      set {
        lng_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataBusiness);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataBusiness other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Location != other.Location) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if(!categories_.Equals(other.categories_)) return false;
      if (Lat != other.Lat) return false;
      if (Lng != other.Lng) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      hash ^= categories_.GetHashCode();
      if (Lat != 0D) hash ^= Lat.GetHashCode();
      if (Lng != 0D) hash ^= Lng.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Location);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AvatarUrl);
      }
      categories_.WriteTo(output, _repeated_categories_codec);
      if (Lat != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Lat);
      }
      if (Lng != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Lng);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      size += categories_.CalculateSize(_repeated_categories_codec);
      if (Lat != 0D) {
        size += 1 + 8;
      }
      if (Lng != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataBusiness other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      categories_.Add(other.categories_);
      if (other.Lat != 0D) {
        Lat = other.Lat;
      }
      if (other.Lng != 0D) {
        Lng = other.Lng;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Location = input.ReadString();
            break;
          }
          case 34: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 42: {
            categories_.AddEntriesFrom(input, _repeated_categories_codec);
            break;
          }
          case 49: {
            Lat = input.ReadDouble();
            break;
          }
          case 57: {
            Lng = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataOffer : pb::IMessage<DataOffer> {
    private static readonly pb::MessageParser<DataOffer> _parser = new pb::MessageParser<DataOffer>(() => new DataOffer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataOffer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOffer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOffer(DataOffer other) : this() {
      id_ = other.id_;
      Business = other.business_ != null ? other.Business.Clone() : null;
      title_ = other.title_;
      imageUrls_ = other.imageUrls_.Clone();
      categories_ = other.categories_.Clone();
      lat_ = other.lat_;
      lng_ = other.lng_;
      description_ = other.description_;
      deliverables_ = other.deliverables_;
      reward_ = other.reward_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOffer Clone() {
      return new DataOffer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "business" field.</summary>
    public const int BusinessFieldNumber = 2;
    private global::InfX.DataBusiness business_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.DataBusiness Business {
      get { return business_; }
      set {
        business_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imageUrls" field.</summary>
    public const int ImageUrlsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_imageUrls_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> imageUrls_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ImageUrls {
      get { return imageUrls_; }
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::InfX.CategoryId> _repeated_categories_codec
        = pb::FieldCodec.ForMessage(42, global::InfX.CategoryId.Parser);
    private readonly pbc::RepeatedField<global::InfX.CategoryId> categories_ = new pbc::RepeatedField<global::InfX.CategoryId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InfX.CategoryId> Categories {
      get { return categories_; }
    }

    /// <summary>Field number for the "lat" field.</summary>
    public const int LatFieldNumber = 6;
    private double lat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lat {
      get { return lat_; }
      set {
        lat_ = value;
      }
    }

    /// <summary>Field number for the "lng" field.</summary>
    public const int LngFieldNumber = 7;
    private double lng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lng {
      get { return lng_; }
      set {
        lng_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 8;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deliverables" field.</summary>
    public const int DeliverablesFieldNumber = 9;
    private string deliverables_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deliverables {
      get { return deliverables_; }
      set {
        deliverables_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 10;
    private string reward_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reward {
      get { return reward_; }
      set {
        reward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataOffer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataOffer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Business, other.Business)) return false;
      if (Title != other.Title) return false;
      if(!imageUrls_.Equals(other.imageUrls_)) return false;
      if(!categories_.Equals(other.categories_)) return false;
      if (Lat != other.Lat) return false;
      if (Lng != other.Lng) return false;
      if (Description != other.Description) return false;
      if (Deliverables != other.Deliverables) return false;
      if (Reward != other.Reward) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (business_ != null) hash ^= Business.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      hash ^= imageUrls_.GetHashCode();
      hash ^= categories_.GetHashCode();
      if (Lat != 0D) hash ^= Lat.GetHashCode();
      if (Lng != 0D) hash ^= Lng.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Deliverables.Length != 0) hash ^= Deliverables.GetHashCode();
      if (Reward.Length != 0) hash ^= Reward.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (business_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Business);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      imageUrls_.WriteTo(output, _repeated_imageUrls_codec);
      categories_.WriteTo(output, _repeated_categories_codec);
      if (Lat != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Lat);
      }
      if (Lng != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Lng);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Description);
      }
      if (Deliverables.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Deliverables);
      }
      if (Reward.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Reward);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (business_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Business);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      size += imageUrls_.CalculateSize(_repeated_imageUrls_codec);
      size += categories_.CalculateSize(_repeated_categories_codec);
      if (Lat != 0D) {
        size += 1 + 8;
      }
      if (Lng != 0D) {
        size += 1 + 8;
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Deliverables.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Deliverables);
      }
      if (Reward.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reward);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataOffer other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.business_ != null) {
        if (business_ == null) {
          business_ = new global::InfX.DataBusiness();
        }
        Business.MergeFrom(other.Business);
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      imageUrls_.Add(other.imageUrls_);
      categories_.Add(other.categories_);
      if (other.Lat != 0D) {
        Lat = other.Lat;
      }
      if (other.Lng != 0D) {
        Lng = other.Lng;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Deliverables.Length != 0) {
        Deliverables = other.Deliverables;
      }
      if (other.Reward.Length != 0) {
        Reward = other.Reward;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            if (business_ == null) {
              business_ = new global::InfX.DataBusiness();
            }
            input.ReadMessage(business_);
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 34: {
            imageUrls_.AddEntriesFrom(input, _repeated_imageUrls_codec);
            break;
          }
          case 42: {
            categories_.AddEntriesFrom(input, _repeated_categories_codec);
            break;
          }
          case 49: {
            Lat = input.ReadDouble();
            break;
          }
          case 57: {
            Lng = input.ReadDouble();
            break;
          }
          case 66: {
            Description = input.ReadString();
            break;
          }
          case 74: {
            Deliverables = input.ReadString();
            break;
          }
          case 82: {
            Reward = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataApplicant : pb::IMessage<DataApplicant> {
    private static readonly pb::MessageParser<DataApplicant> _parser = new pb::MessageParser<DataApplicant>(() => new DataApplicant());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataApplicant> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataApplicant() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataApplicant(DataApplicant other) : this() {
      id_ = other.id_;
      Offer = other.offer_ != null ? other.Offer.Clone() : null;
      Influencer = other.influencer_ != null ? other.Influencer.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataApplicant Clone() {
      return new DataApplicant(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "offer" field.</summary>
    public const int OfferFieldNumber = 2;
    private global::InfX.DataOffer offer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.DataOffer Offer {
      get { return offer_; }
      set {
        offer_ = value;
      }
    }

    /// <summary>Field number for the "influencer" field.</summary>
    public const int InfluencerFieldNumber = 3;
    private global::InfX.DataInfluencer influencer_;
    /// <summary>
    ///  bool influencer accepted/delivered/...
    ///  bool business accepted/received service/...
    ///  datetime schedule etc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.DataInfluencer Influencer {
      get { return influencer_; }
      set {
        influencer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataApplicant);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataApplicant other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Offer, other.Offer)) return false;
      if (!object.Equals(Influencer, other.Influencer)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (offer_ != null) hash ^= Offer.GetHashCode();
      if (influencer_ != null) hash ^= Influencer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (offer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Offer);
      }
      if (influencer_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Influencer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (offer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offer);
      }
      if (influencer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Influencer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataApplicant other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.offer_ != null) {
        if (offer_ == null) {
          offer_ = new global::InfX.DataOffer();
        }
        Offer.MergeFrom(other.Offer);
      }
      if (other.influencer_ != null) {
        if (influencer_ == null) {
          influencer_ = new global::InfX.DataInfluencer();
        }
        Influencer.MergeFrom(other.Influencer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            if (offer_ == null) {
              offer_ = new global::InfX.DataOffer();
            }
            input.ReadMessage(offer_);
            break;
          }
          case 26: {
            if (influencer_ == null) {
              influencer_ = new global::InfX.DataInfluencer();
            }
            input.ReadMessage(influencer_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataChat : pb::IMessage<DataChat> {
    private static readonly pb::MessageParser<DataChat> _parser = new pb::MessageParser<DataChat>(() => new DataChat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataChat(DataChat other) : this() {
      applicantId_ = other.applicantId_;
      sequenceId_ = other.sequenceId_;
      keyId_ = other.keyId_;
      outgoing_ = other.outgoing_;
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataChat Clone() {
      return new DataChat(this);
    }

    /// <summary>Field number for the "applicantId" field.</summary>
    public const int ApplicantIdFieldNumber = 1;
    private long applicantId_;
    /// <summary>
    ///  One chat per applicant
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ApplicantId {
      get { return applicantId_; }
      set {
        applicantId_ = value;
      }
    }

    /// <summary>Field number for the "sequenceId" field.</summary>
    public const int SequenceIdFieldNumber = 2;
    private long sequenceId_;
    /// <summary>
    ///  Sequential identifier in the chat stream
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SequenceId {
      get { return sequenceId_; }
      set {
        sequenceId_ = value;
      }
    }

    /// <summary>Field number for the "keyId" field.</summary>
    public const int KeyIdFieldNumber = 3;
    private long keyId_;
    /// <summary>
    ///  Deduplication client-side (ghost entry)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long KeyId {
      get { return keyId_; }
      set {
        keyId_ = value;
      }
    }

    /// <summary>Field number for the "outgoing" field.</summary>
    public const int OutgoingFieldNumber = 4;
    private bool outgoing_;
    /// <summary>
    ///  Outgoing or incoming message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Outgoing {
      get { return outgoing_; }
      set {
        outgoing_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 5;
    private string text_ = "";
    /// <summary>
    ///  The written text
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplicantId != other.ApplicantId) return false;
      if (SequenceId != other.SequenceId) return false;
      if (KeyId != other.KeyId) return false;
      if (Outgoing != other.Outgoing) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplicantId != 0L) hash ^= ApplicantId.GetHashCode();
      if (SequenceId != 0L) hash ^= SequenceId.GetHashCode();
      if (KeyId != 0L) hash ^= KeyId.GetHashCode();
      if (Outgoing != false) hash ^= Outgoing.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplicantId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ApplicantId);
      }
      if (SequenceId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SequenceId);
      }
      if (KeyId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(KeyId);
      }
      if (Outgoing != false) {
        output.WriteRawTag(32);
        output.WriteBool(Outgoing);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplicantId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApplicantId);
      }
      if (SequenceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SequenceId);
      }
      if (KeyId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(KeyId);
      }
      if (Outgoing != false) {
        size += 1 + 1;
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataChat other) {
      if (other == null) {
        return;
      }
      if (other.ApplicantId != 0L) {
        ApplicantId = other.ApplicantId;
      }
      if (other.SequenceId != 0L) {
        SequenceId = other.SequenceId;
      }
      if (other.KeyId != 0L) {
        KeyId = other.KeyId;
      }
      if (other.Outgoing != false) {
        Outgoing = other.Outgoing;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplicantId = input.ReadInt64();
            break;
          }
          case 16: {
            SequenceId = input.ReadInt64();
            break;
          }
          case 24: {
            KeyId = input.ReadInt64();
            break;
          }
          case 32: {
            Outgoing = input.ReadBool();
            break;
          }
          case 42: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Generic rejection
  /// </summary>
  public sealed partial class NetResRejected : pb::IMessage<NetResRejected> {
    private static readonly pb::MessageParser<NetResRejected> _parser = new pb::MessageParser<NetResRejected>(() => new NetResRejected());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetResRejected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetResRejected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetResRejected(NetResRejected other) : this() {
      rejectReason_ = other.rejectReason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetResRejected Clone() {
      return new NetResRejected(this);
    }

    /// <summary>Field number for the "rejectReason" field.</summary>
    public const int RejectReasonFieldNumber = 1;
    private string rejectReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectReason {
      get { return rejectReason_; }
      set {
        rejectReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetResRejected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetResRejected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RejectReason != other.RejectReason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RejectReason.Length != 0) hash ^= RejectReason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RejectReason.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RejectReason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RejectReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RejectReason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetResRejected other) {
      if (other == null) {
        return;
      }
      if (other.RejectReason.Length != 0) {
        RejectReason = other.RejectReason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RejectReason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Client requests the server permission to upload an image
  ///  The server may delete the image later if it is never used
  /// </summary>
  public sealed partial class NetReqImageUpload : pb::IMessage<NetReqImageUpload> {
    private static readonly pb::MessageParser<NetReqImageUpload> _parser = new pb::MessageParser<NetReqImageUpload>(() => new NetReqImageUpload());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetReqImageUpload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetReqImageUpload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetReqImageUpload(NetReqImageUpload other) : this() {
      fileName_ = other.fileName_;
      fileSize_ = other.fileSize_;
      sha256_ = other.sha256_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetReqImageUpload Clone() {
      return new NetReqImageUpload(this);
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 1;
    private string fileName_ = "";
    /// <summary>
    ///  File information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fileSize" field.</summary>
    public const int FileSizeFieldNumber = 2;
    private int fileSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FileSize {
      get { return fileSize_; }
      set {
        fileSize_ = value;
      }
    }

    /// <summary>Field number for the "sha256" field.</summary>
    public const int Sha256FieldNumber = 3;
    private string sha256_ = "";
    /// <summary>
    ///  Hashed file contents
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sha256 {
      get { return sha256_; }
      set {
        sha256_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetReqImageUpload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetReqImageUpload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileName != other.FileName) return false;
      if (FileSize != other.FileSize) return false;
      if (Sha256 != other.Sha256) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (FileSize != 0) hash ^= FileSize.GetHashCode();
      if (Sha256.Length != 0) hash ^= Sha256.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
      if (FileSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FileSize);
      }
      if (Sha256.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Sha256);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (FileSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FileSize);
      }
      if (Sha256.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sha256);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetReqImageUpload other) {
      if (other == null) {
        return;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.FileSize != 0) {
        FileSize = other.FileSize;
      }
      if (other.Sha256.Length != 0) {
        Sha256 = other.Sha256;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
          case 16: {
            FileSize = input.ReadInt32();
            break;
          }
          case 26: {
            Sha256 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request parameters to be used by the client verbatim for uploading
  /// </summary>
  public sealed partial class NetResImageUpload : pb::IMessage<NetResImageUpload> {
    private static readonly pb::MessageParser<NetResImageUpload> _parser = new pb::MessageParser<NetResImageUpload>(() => new NetResImageUpload());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetResImageUpload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetResImageUpload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetResImageUpload(NetResImageUpload other) : this() {
      requestMethod_ = other.requestMethod_;
      requestUrl_ = other.requestUrl_;
      headerContentType_ = other.headerContentType_;
      headerContentLength_ = other.headerContentLength_;
      headerHost_ = other.headerHost_;
      headerXAmzDate_ = other.headerXAmzDate_;
      headerXAmzStorageClass_ = other.headerXAmzStorageClass_;
      headerAuthorization_ = other.headerAuthorization_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetResImageUpload Clone() {
      return new NetResImageUpload(this);
    }

    /// <summary>Field number for the "requestMethod" field.</summary>
    public const int RequestMethodFieldNumber = 1;
    private string requestMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestMethod {
      get { return requestMethod_; }
      set {
        requestMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requestUrl" field.</summary>
    public const int RequestUrlFieldNumber = 2;
    private string requestUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestUrl {
      get { return requestUrl_; }
      set {
        requestUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headerContentType" field.</summary>
    public const int HeaderContentTypeFieldNumber = 3;
    private string headerContentType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeaderContentType {
      get { return headerContentType_; }
      set {
        headerContentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headerContentLength" field.</summary>
    public const int HeaderContentLengthFieldNumber = 4;
    private string headerContentLength_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeaderContentLength {
      get { return headerContentLength_; }
      set {
        headerContentLength_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headerHost" field.</summary>
    public const int HeaderHostFieldNumber = 5;
    private string headerHost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeaderHost {
      get { return headerHost_; }
      set {
        headerHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headerXAmzDate" field.</summary>
    public const int HeaderXAmzDateFieldNumber = 6;
    private string headerXAmzDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeaderXAmzDate {
      get { return headerXAmzDate_; }
      set {
        headerXAmzDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headerXAmzStorageClass" field.</summary>
    public const int HeaderXAmzStorageClassFieldNumber = 7;
    private string headerXAmzStorageClass_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeaderXAmzStorageClass {
      get { return headerXAmzStorageClass_; }
      set {
        headerXAmzStorageClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headerAuthorization" field.</summary>
    public const int HeaderAuthorizationFieldNumber = 8;
    private string headerAuthorization_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeaderAuthorization {
      get { return headerAuthorization_; }
      set {
        headerAuthorization_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetResImageUpload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetResImageUpload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestMethod != other.RequestMethod) return false;
      if (RequestUrl != other.RequestUrl) return false;
      if (HeaderContentType != other.HeaderContentType) return false;
      if (HeaderContentLength != other.HeaderContentLength) return false;
      if (HeaderHost != other.HeaderHost) return false;
      if (HeaderXAmzDate != other.HeaderXAmzDate) return false;
      if (HeaderXAmzStorageClass != other.HeaderXAmzStorageClass) return false;
      if (HeaderAuthorization != other.HeaderAuthorization) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestMethod.Length != 0) hash ^= RequestMethod.GetHashCode();
      if (RequestUrl.Length != 0) hash ^= RequestUrl.GetHashCode();
      if (HeaderContentType.Length != 0) hash ^= HeaderContentType.GetHashCode();
      if (HeaderContentLength.Length != 0) hash ^= HeaderContentLength.GetHashCode();
      if (HeaderHost.Length != 0) hash ^= HeaderHost.GetHashCode();
      if (HeaderXAmzDate.Length != 0) hash ^= HeaderXAmzDate.GetHashCode();
      if (HeaderXAmzStorageClass.Length != 0) hash ^= HeaderXAmzStorageClass.GetHashCode();
      if (HeaderAuthorization.Length != 0) hash ^= HeaderAuthorization.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestMethod.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestMethod);
      }
      if (RequestUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RequestUrl);
      }
      if (HeaderContentType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HeaderContentType);
      }
      if (HeaderContentLength.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HeaderContentLength);
      }
      if (HeaderHost.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HeaderHost);
      }
      if (HeaderXAmzDate.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(HeaderXAmzDate);
      }
      if (HeaderXAmzStorageClass.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(HeaderXAmzStorageClass);
      }
      if (HeaderAuthorization.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(HeaderAuthorization);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestMethod);
      }
      if (RequestUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestUrl);
      }
      if (HeaderContentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeaderContentType);
      }
      if (HeaderContentLength.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeaderContentLength);
      }
      if (HeaderHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeaderHost);
      }
      if (HeaderXAmzDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeaderXAmzDate);
      }
      if (HeaderXAmzStorageClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeaderXAmzStorageClass);
      }
      if (HeaderAuthorization.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeaderAuthorization);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetResImageUpload other) {
      if (other == null) {
        return;
      }
      if (other.RequestMethod.Length != 0) {
        RequestMethod = other.RequestMethod;
      }
      if (other.RequestUrl.Length != 0) {
        RequestUrl = other.RequestUrl;
      }
      if (other.HeaderContentType.Length != 0) {
        HeaderContentType = other.HeaderContentType;
      }
      if (other.HeaderContentLength.Length != 0) {
        HeaderContentLength = other.HeaderContentLength;
      }
      if (other.HeaderHost.Length != 0) {
        HeaderHost = other.HeaderHost;
      }
      if (other.HeaderXAmzDate.Length != 0) {
        HeaderXAmzDate = other.HeaderXAmzDate;
      }
      if (other.HeaderXAmzStorageClass.Length != 0) {
        HeaderXAmzStorageClass = other.HeaderXAmzStorageClass;
      }
      if (other.HeaderAuthorization.Length != 0) {
        HeaderAuthorization = other.HeaderAuthorization;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RequestMethod = input.ReadString();
            break;
          }
          case 18: {
            RequestUrl = input.ReadString();
            break;
          }
          case 26: {
            HeaderContentType = input.ReadString();
            break;
          }
          case 34: {
            HeaderContentLength = input.ReadString();
            break;
          }
          case 42: {
            HeaderHost = input.ReadString();
            break;
          }
          case 50: {
            HeaderXAmzDate = input.ReadString();
            break;
          }
          case 58: {
            HeaderXAmzStorageClass = input.ReadString();
            break;
          }
          case 66: {
            HeaderAuthorization = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Message to create offer
  /// </summary>
  public sealed partial class NetReqCreateOffer : pb::IMessage<NetReqCreateOffer> {
    private static readonly pb::MessageParser<NetReqCreateOffer> _parser = new pb::MessageParser<NetReqCreateOffer>(() => new NetReqCreateOffer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetReqCreateOffer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetReqCreateOffer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetReqCreateOffer(NetReqCreateOffer other) : this() {
      Offer = other.offer_ != null ? other.Offer.Clone() : null;
      imageIds_ = other.imageIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetReqCreateOffer Clone() {
      return new NetReqCreateOffer(this);
    }

    /// <summary>Field number for the "offer" field.</summary>
    public const int OfferFieldNumber = 1;
    private global::InfX.DataOffer offer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.DataOffer Offer {
      get { return offer_; }
      set {
        offer_ = value;
      }
    }

    /// <summary>Field number for the "imageIds" field.</summary>
    public const int ImageIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_imageIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> imageIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ImageIds {
      get { return imageIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetReqCreateOffer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetReqCreateOffer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Offer, other.Offer)) return false;
      if(!imageIds_.Equals(other.imageIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (offer_ != null) hash ^= Offer.GetHashCode();
      hash ^= imageIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (offer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Offer);
      }
      imageIds_.WriteTo(output, _repeated_imageIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (offer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offer);
      }
      size += imageIds_.CalculateSize(_repeated_imageIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetReqCreateOffer other) {
      if (other == null) {
        return;
      }
      if (other.offer_ != null) {
        if (offer_ == null) {
          offer_ = new global::InfX.DataOffer();
        }
        Offer.MergeFrom(other.Offer);
      }
      imageIds_.Add(other.imageIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (offer_ == null) {
              offer_ = new global::InfX.DataOffer();
            }
            input.ReadMessage(offer_);
            break;
          }
          case 18: {
            imageIds_.AddEntriesFrom(input, _repeated_imageIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response to successful offer creation
  /// </summary>
  public sealed partial class NetResCreateOffer : pb::IMessage<NetResCreateOffer> {
    private static readonly pb::MessageParser<NetResCreateOffer> _parser = new pb::MessageParser<NetResCreateOffer>(() => new NetResCreateOffer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetResCreateOffer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetResCreateOffer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetResCreateOffer(NetResCreateOffer other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetResCreateOffer Clone() {
      return new NetResCreateOffer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///  Identifier of the offer on the server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetResCreateOffer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetResCreateOffer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetResCreateOffer other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
