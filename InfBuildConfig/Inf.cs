// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inf.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace InfX {

  /// <summary>Holder for reflection information generated from inf.proto</summary>
  public static partial class InfReflection {

    #region Descriptor
    /// <summary>File descriptor for inf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglpbmYucHJvdG8iggEKBkNvbmZpZxImCgpjYXRlZ29yaWVzGAEgASgLMhIu",
            "Q29uZmlnLkNhdGVnb3JpZXMaHgoNU3ViQ2F0ZWdvcmllcxINCgVsYWJlbBgB",
            "IAMoCRowCgpDYXRlZ29yaWVzEiIKA3N1YhgBIAMoCzIVLkNvbmZpZy5TdWJD",
            "YXRlZ29yaWVzQgeqAgRJbmZYYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.Config), global::InfX.Config.Parser, new[]{ "Categories" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::InfX.Config.Types.SubCategories), global::InfX.Config.Types.SubCategories.Parser, new[]{ "Label" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::InfX.Config.Types.Categories), global::InfX.Config.Types.Categories.Parser, new[]{ "Sub" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::InfX.InfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      Categories = other.categories_ != null ? other.Categories.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 1;
    private global::InfX.Config.Types.Categories categories_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InfX.Config.Types.Categories Categories {
      get { return categories_; }
      set {
        categories_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Categories, other.Categories)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (categories_ != null) hash ^= Categories.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (categories_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Categories);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (categories_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Categories);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.categories_ != null) {
        if (categories_ == null) {
          categories_ = new global::InfX.Config.Types.Categories();
        }
        Categories.MergeFrom(other.Categories);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (categories_ == null) {
              categories_ = new global::InfX.Config.Types.Categories();
            }
            input.ReadMessage(categories_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Config message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SubCategories : pb::IMessage<SubCategories> {
        private static readonly pb::MessageParser<SubCategories> _parser = new pb::MessageParser<SubCategories>(() => new SubCategories());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SubCategories> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::InfX.Config.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubCategories() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubCategories(SubCategories other) : this() {
          label_ = other.label_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SubCategories Clone() {
          return new SubCategories(this);
        }

        /// <summary>Field number for the "label" field.</summary>
        public const int LabelFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_label_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> label_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Label {
          get { return label_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SubCategories);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SubCategories other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!label_.Equals(other.label_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= label_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          label_.WriteTo(output, _repeated_label_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += label_.CalculateSize(_repeated_label_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SubCategories other) {
          if (other == null) {
            return;
          }
          label_.Add(other.label_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                label_.AddEntriesFrom(input, _repeated_label_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Categories : pb::IMessage<Categories> {
        private static readonly pb::MessageParser<Categories> _parser = new pb::MessageParser<Categories>(() => new Categories());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Categories> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::InfX.Config.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Categories() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Categories(Categories other) : this() {
          sub_ = other.sub_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Categories Clone() {
          return new Categories(this);
        }

        /// <summary>Field number for the "sub" field.</summary>
        public const int SubFieldNumber = 1;
        private static readonly pb::FieldCodec<global::InfX.Config.Types.SubCategories> _repeated_sub_codec
            = pb::FieldCodec.ForMessage(10, global::InfX.Config.Types.SubCategories.Parser);
        private readonly pbc::RepeatedField<global::InfX.Config.Types.SubCategories> sub_ = new pbc::RepeatedField<global::InfX.Config.Types.SubCategories>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::InfX.Config.Types.SubCategories> Sub {
          get { return sub_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Categories);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Categories other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!sub_.Equals(other.sub_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= sub_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          sub_.WriteTo(output, _repeated_sub_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += sub_.CalculateSize(_repeated_sub_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Categories other) {
          if (other == null) {
            return;
          }
          sub_.Add(other.sub_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                sub_.AddEntriesFrom(input, _repeated_sub_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
