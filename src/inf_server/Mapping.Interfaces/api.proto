syntax = "proto3";

package mapping;
option csharp_namespace = "Mapping.Interfaces";

service MappingService {
    rpc ListMapItems (ListMapItemsRequest) returns (ListMapItemsResponse) {}
}

message Money {
  string currency_code = 1;
  int32 units = 2;
  int32 nanos = 3;
}

message GeoPoint {
    double latitude = 1;
    double longitude = 2;
}

message MapItem {
    enum Status {
        unknown = 0;
        inactive = 1;
        active = 2;
    }

    GeoPoint geoPoint = 1;
    Status status = 2;
    string parentClusterId = 3;

    oneof payload {
        OfferMapItem offer = 4;
        UserMapItem user = 5;
    }
}

message OfferMapItem {
    string offerId = 1;
}

message UserMapItem {
    string userId = 1;
}

message ListMapItemsRequest {
    message Filter {
        // Offer-specific filters
        message OfferFilterDto {
            enum Status {
                unknown = 0;
                active = 1;
                inactive = 2;
                closed = 3;
                archived = 4;
            }

            enum DeliverableType {
                post = 0;
                mention = 1;
                video = 2;
                custom = 3;
            }

            enum AcceptancePolicy {
                manualReview = 0;
                automaticAcceptMatching = 1;
                allowNegotiation = 2;
            }

            string businessAccountId = 1;
            repeated Status offerStatuses = 2;
            repeated DeliverableType deliverableTypes = 3;
            repeated string deliverableSocialNetworkProviderIds = 8;
            repeated AcceptancePolicy acceptancePolicies = 4;
            Money minimumRewardCash = 6;
            Money minimumRewardService = 7;
        }

        // User-specific filter
        message UserFilterDto {
            enum Type {
                unknown = 0;
                influencer = 1;
                business = 2;
            }

            repeated Type userTypes = 1;
            repeated string socialMediaNetworkIds = 2;
            Money minimumValue = 3;
            Money maximumValue = 4;
        }

        enum ItemType {
            offers = 0;
            users = 1;
        }

        repeated ItemType itemTypes = 1;
        repeated string quadKeys = 2;

        repeated string categoryIds = 3;
        string phrase = 4;

        OfferFilterDto offerFilter = 5;
        UserFilterDto userFilter = 6;
    }

    Filter filter = 1;
}

message ListMapItemsResponse {
    repeated MapItem results = 1;
}