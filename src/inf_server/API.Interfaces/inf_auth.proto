syntax = "proto3";

package api;
option csharp_namespace = "API.Interfaces";

import "empty.proto";
import "user.proto";

service InfAuth {
    // Send out a login email with a link including a login-token
    rpc SendLoginEmail(SendLoginEmailRequest) returns (Empty) {}

    // Creates a new user based on the login-token that the app received through a deep link
    rpc CreateNewUser(CreateNewUserRequest) returns (CreateNewUserResponse) {}

    // Requests a long living refresh token based on a one time login-token the app
    // has reveived over a deep login link
    rpc LoginWithLoginToken(LoginWithLoginTokenRequest) returns (LoginWithLoginTokenResponse) {}

    // Requests an access-token at startup based on a stored refresh-token
    // not sure if we need this as we also have GetAccessToken
    rpc LoginWithRefreshToken(LoginWithRefreshTokenRequest) returns (LoginWithRefreshTokenResponse) {}

    // Retrieves an access-token based on the stored long living refresh token
    // This is used for refreshing an expiring access-token
    rpc GetAccessToken(GetAccessTokenRequest) returns (GetAccessTokenResponse) {}

    // Retrieves user data based on an userId
    rpc GetUser(GetUserRequest) returns (GetUserResponse);

    // Updates an existing user object
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);

    // Permanently invalidates the given refresh token.
    rpc Logout(LogoutRequest) returns (Empty) {}
}

message SendLoginEmailRequest {
    string email = 1;
    UserType userType = 2;
}

message CreateNewUserRequest {
    // Token that is passed to the app with the login / sign-up link from the email
    string loginToken = 1;
    UserDto userData = 2;
    // device ID for push notification
    string deviceId = 3;
    // After successful creation of the new user the invitation code is marked as used
    string invitationCode = 4;
}

message CreateNewUserResponse {
    string refreshToken = 1;
}

message LoginWithLoginTokenRequest {
    string loginToken = 1;
}

message LoginWithLoginTokenResponse {
    string refreshToken = 1;
    UserDto userData = 2;
}

message GetUserRequest {
    string userId = 1;
}

message GetUserResponse {
    UserDto userData = 1;
}

message UpdateUserRequest {
    UserDto user = 1;
}

message UpdateUserResponse {
    UserDto user = 1;
}

message GetAccessTokenRequest {
    string refreshToken = 1;
}

message GetAccessTokenResponse {
    string accessToken = 1;
}

message LoginWithRefreshTokenRequest {
    string refreshToken = 1;
}

message LoginWithRefreshTokenResponse {
    string accessToken = 1;
    UserDto userData = 2;
}

message LogoutRequest {
    string refreshToken = 1;
}
